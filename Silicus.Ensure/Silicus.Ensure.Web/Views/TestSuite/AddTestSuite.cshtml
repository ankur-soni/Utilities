@model Silicus.Ensure.Web.Models.TestSuiteViewModel
@using Silicus.Ensure.Models.Constants
@using Kendo.Mvc.UI;



<div class="alert alert-success" id="messageDiv" style="display:none;">
    <span id="messageContent"></span>
</div>
<h2>@ViewBag.Type Test Suite</h2>

@using (Html.BeginForm("Save", "TestSuite", FormMethod.Post, new { id = "frmAddTestSuite" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @if (Model != null)
        {
            @Html.HiddenFor(model => model.TestSuiteId)
            @Html.HiddenFor(model => model.IsCopy)
            @Html.HiddenFor(model => model.Status)
            @Html.HiddenFor(model => model.PrimaryTagNames)
        }


        <div class="form-group">
            @Html.LabelFor(model => model.TestSuiteName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TestSuiteName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TestSuiteName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @*@Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })*@
                @(Html.Kendo().DropDownListFor(m => m.Position)
                                    .DataTextField("PositionName")
                                    .DataValueField("PositionId")
        //.Placeholder("Select Positions...")
                                    .OptionLabel("Select Position...")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                {
                                                    read.Action("GetAllPositionDetails", "Common");
                                                })
                                                .ServerFiltering(false);
                                            })
        // .Value(Model.Position)
                                    .HtmlAttributes(new { style = "width: 100%", required = "required" }))
                @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                <a href="#" onclick="addPosition();">Add Position</a>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Competency, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().DropDownListFor(model => model.Competency)
                    .OptionLabel("--Select--")
                    .BindTo(new List<SelectListItem>() {
                    new SelectListItem(){
                    Text=Convert.ToString(Proficiency.Beginner),
                    Value=Convert.ToString((Int32)Proficiency.Beginner)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(Proficiency.Intermediate),
                    Value=Convert.ToString((Int32)Proficiency.Intermediate)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(Proficiency.Expert),
                    Value=Convert.ToString((Int32)Proficiency.Expert)
                    }
                    })
                   .HtmlAttributes(new { style = "width: 100%" }))
                @Html.ValidationMessageFor(model => model.Competency, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Question Type</label>
            <div class="col-md-5">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.OptionalQuestion, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-7">
                    @Html.TextBoxFor(m => m.OptionalQuestion, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.OptionalQuestion)
                </div>
            </div>
            <div class="col-md-5">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.PracticalQuestion, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-7">
                    @Html.TextBoxFor(m => m.PracticalQuestion, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.PracticalQuestion)
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <label class="control-label col-md-2">Experience</label>
            <div class="col-md-5">
                @(Html.Kendo().DropDownListFor(m => m.FromExperience)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo(EnumHelper.GetSelectList((typeof(Year)))
                        .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                        .HtmlAttributes(new { style = "width: 100%" })
                        .OptionLabel("Year")
                )
                @Html.ValidationMessageFor(m => m.FromExperience)
            </div>
            <div class="col-md-5">
                @(Html.Kendo().DropDownListFor(m => m.ToExperience)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo(EnumHelper.GetSelectList((typeof(Year)))
                        .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                        .HtmlAttributes(new { style = "width: 100%" })
                        .OptionLabel("Months")
                )
                @Html.ValidationMessageFor(m => m.ToExperience)
            </div>
        </div>

        @*<div class="form-group">
                @(Html.Kendo().Grid(Model.Tags).Name("TagsGrid").Pageable(pager => { pager.PageSizes(true); })
                   .Columns(columns =>
                        {

                            columns.Bound(p => p.TagName)
                                      .ClientTemplate("#=TagName#")
                                      .Title("Parameter")
                                      .EditorTemplateName("TagList").Width(100);
                            columns.Bound(q => q.Weightage).Width(150);
                            //columns.Bound(q => q.Proficiency).Width(100);
                            columns.Bound(p => p.ProficiencyName)
                                      .ClientTemplate("#=ProficiencyName#")
                                      .Title("Proficiency")
                                      .EditorTemplateName("ProficiencyList").Width(100);

                            columns.Command(command => command.Destroy()).Width(150);
                        })
                .ToolBar(toolbar => { toolbar.Create(); toolbar.Save(); })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .DataSource(dataSource =>
                          dataSource.Ajax()
                          .Batch(true)
                          .ServerOperation(false)
                              //.Events(events => events.Error("grid_error")) // Handle the "error" event.
                            .Model(model =>
                            {
                                model.Id(product => product.TagId);
                                //model.Field(product => product.TagId).Editable(false);
                            })
                            .Create(create => create.Action("Products_Create", "Home"))
                              //.Read(read => read.Action("Products_Read", "Home"))
                            .Update(update => update.Action("Products_Update", "Home"))
                            .Destroy(destroy => destroy.Action("Products_Destroy", "Home"))
                      )
                )
            </div>*@
        
        <div id="TagCustomControl">
            <div class="form-group">
                <div class="form-group">
                    <div class="col-md-2">
                    </div>
                    <div class="col-md-3">
                        Skill Tags
                    </div>
                    <div class="col-md-3">
                        Weightage %
                    </div>
                    <div class="col-md-3">
                        Efficiency
                    </div>
                    <div class="col-md-1">
                        Actions
                    </div>
                </div>
            </div>
            @if (Model != null && Model.Tags != null && Model.Tags.Count > 0)
            {
                int i = 0;
                // for (int i = 0; i < Model.Tags.Count; i++)
                var tagCount = Model.Tags.Count;
                foreach (var tag in Model.Tags)
                {
                    i++;
                    <div class="form-group">
                        <div class="col-md-2">
                            Skill Tags
                        </div>
                        <div class="col-md-3">
                            <input type="text" id="Tag_@i" value="@tag.TagName" name="Tag_@i" data-val="true" data-val-required="Tag cant be null!." class="tagAutoComplete">
                        </div>
                        <div class="col-md-3">
                            <input type="text" id="Weightage_@i" value="@tag.Weightage" name="Weightage_@i" data-val="true" data-val-required="Weightage cant be null!." class="key-numeric WeightageField" />
                        </div>
                        <div class="col-md-3">
                            <input type="text" id="Proficiency_@i" value="@tag.Proficiency" name="Proficiency_@i" data-val="true" data-val-required="Proficiency cant be null!." required class="proficiencyDropDown" />
                        </div>
                        <div class="col-md-1">

                            @{var isDisply = "";
                            if (tagCount > i)
                            {
                                isDisply = "display:none;";
                            }

                            <input data-val="@i" type="button" value="Add" class="addbtn" style=@isDisply />
                                <input data-val="@i" type="button" value="Remove" class="removebtn" style=@isDisply />
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="form-group">
                    <div class="col-md-2">
                        Skill Tags
                    </div>
                    <div class="col-md-3">
                        <input type="text" id="Tag_1" name="Tag_1" data-val="true" data-val-required="Tag cant be null!." class="tagAutoComplete">
                    </div>
                    <div class="col-md-3">
                        <input type="text" id="Weightage_1" name="Weightage_1" data-val="true" data-val-required="Weightage cant be null!." class="key-numeric WeightageField" />
                    </div>
                    <div class="col-md-3">
                        <input type="text" id="Proficiency_1" name="Proficiency_1" data-val="true" data-val-required="Proficiency cant be null!." class="proficiencyDropDown" />
                    </div>
                    <div class="col-md-1">
                        <input data-val="1" type="button" value="Add" class="addbtn" />
                        @*<input data-val="1" type="button" value="Remove" class="removebtn" />*@
                    </div>
                </div>
            }
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnSave" value="Save" class="btn btn-default" />
                <input type="button" onclick="onCancelClick()" value="Cancel" class="btn btn-default" />
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    function onCancelClick() {
        redirectToTestSuiteList();
    }
    function redirectToTestSuiteList()
    {
        window.location = '@Url.Action("List", "TestSuite")';
    }
    function createControls() {
        $(".tagAutoComplete").kendoAutoComplete({
            dataSource: {
                serverFiltering: false,
                transport: {
                    read: "/Common/GetAllTagDetails"
                }
            },
            filter: "contains",
            dataTextField: "TagName",
            dataValueField: "TagId",
            minLength: 1,
            placeholder: "Select tag",
            seperator: ","
        });

        $(".proficiencyDropDown").kendoDropDownList({
            dataTextField: "name",
            dataValueField: "id",
            required: true,
            dataSource: [
                { name: '--Select--', id: '' },
                { name: '@Convert.ToString(Proficiency.Beginner)', id: '@Convert.ToInt32(Proficiency.Beginner)' },
                { name: '@Convert.ToString(Proficiency.Intermediate)', id: '@Convert.ToInt32(Proficiency.Intermediate)' },
                { name: '@Convert.ToString(Proficiency.Expert)', id: '@Convert.ToInt32(Proficiency.Expert)' }
            ]
        });

            $('.key-numeric').keypress(function (e) {
                var verified = (e.which == 8 || e.which == undefined || e.which == 0) ? null : String.fromCharCode(e.which).match(/[^0-9]/);
                if (verified) { e.preventDefault(); }
            });
        }

        function formatOfCustomControl(rowno) {
            return '<div class="form-group">' +
                        '<div class="col-md-2">Skill Tags</div>' +
                        '<div class="col-md-3">' +
                            '<input type="text" id="Tag_' + rowno + '" name="Tag_' + rowno + '" data-val="true" data-val-required="Tag cant be null!." class="tagAutoComplete">' +
                        '</div>' +
                        '<div class="col-md-3">' +
                            '<input type="text" id="Weightage_' + rowno + '" name="Weightage_' + rowno + '" data-val="true" data-val-required="Weightage cant be null!." class="key-numeric WeightageField" />' +
                        '</div>' +
                        '<div class="col-md-3">' +
                            '<input type="text" id="Proficiency_' + rowno + '" name="Proficiency_' + rowno + '" data-val="true" data-val-required="Proficiency cant be null!." class="proficiencyDropDown" />' +
                        '</div>' +
            '<div class="col-md-1">' +
                '<input data-val="' + rowno + '"  type="button" value="Add" class="addbtn" />' +
                '<input data-val="' + rowno + '" type="button" value="Remove" class="removebtn" />' +
            '</div>' +
        '</div>';
        }

        $(function () {
            SetNavigationMenuActive('TestSuite');
            createControls();
            $("#frmAddTestSuite").kendoValidator();

            $("#OptionalQuestion").change(function () {
                var oQuestion = parseInt(100) - parseInt($(this).val());
                $("#PracticalQuestion").val(parseInt(oQuestion));
            });
            $("#PracticalQuestion").change(function () {
                var oQuestion = parseInt(100) - parseInt($(this).val());
                $("#OptionalQuestion").val(parseInt(oQuestion));
            });

            $("#TagCustomControl").on("click", ".addbtn", function () {
                debugger;
                var rowno = eval($(this).attr('data-val'));
                var control = formatOfCustomControl(rowno + 1);
                $("#TagCustomControl").append(control);
                $(".addbtn[data-val=" + rowno + "]").hide();
                if (rowno > 1)
                    $(".removebtn[data-val=" + rowno + "]").hide();
                createControls();
            });

            $("#TagCustomControl").on("click", ".removebtn", function () {
                var $btn = $(this);
                $.when(showConfirmationWindow('Are you sure,  you want to delete this record?', 'Delete')).then(function (confirmed) {
                    if (confirmed) {
                        var rowno = eval($btn.attr('data-val')) - 1;
                        $(".addbtn[data-val=" + rowno + "]").show();
                        if (rowno > 1)
                            $(".removebtn[data-val=" + rowno + "]").show();
                        var div = $btn.closest('.form-group');
                        $(div).remove();
                    }
                });


            });

            $("#btnSave").click(function () {
                debugger;
                if ($("#frmAddTestSuite").valid()) {
                    tags = '';
                    var TestSuiteId = $("#TestSuiteId").val();
                    var IsCopy = $("#IsCopy").val();
                    var TestSuiteName = $("#TestSuiteName").val();
                    var Duration = $("#Duration").val();
                    var Position = $("#Position").val();
                    var Competency = $("#Competency").val();
                    var ProjectName = $("#ProjectName").val();
                    var FromExperience = $("#FromExperience").val();
                    var ToExperience = $("#ToExperience").val();
                    var OptionalQuestion = $("#OptionalQuestion").val();
                    var PracticalQuestion = $("#PracticalQuestion").val();
                    var Status = $("#Status").val();
                    var Weights = '';
                    var Proficiency = '';
                    $('#TagCustomControl input.tagAutoComplete').each(function () {
                        debugger;
                        if (tags == '') {
                            tags += $(this).val();
                        }
                        else {
                            tags += "," + $(this).val();
                        }
                    })

                    $('#TagCustomControl input.WeightageField').each(function () {
                        if (Weights == '') {
                            Weights += $(this).val();
                        }
                        else {
                            Weights += "," + $(this).val();
                        }
                    })

                    $('#TagCustomControl input.proficiencyDropDown').each(function () {
                        if (Proficiency == '') {
                            Proficiency += $(this).val();
                        }
                        else {
                            Proficiency += "," + $(this).val();
                        }
                    })

                    $.ajax(
                    {
                        type: "POST",
                        url: "Save",
                        data: {
                            TestSuiteId: TestSuiteId,
                            IsCopy: IsCopy,
                            TestSuiteName: TestSuiteName,
                            Duration: Duration,
                            Position: Position,
                            Competency: Competency,
                            PrimaryTagNames: tags,
                            Weights: Weights,
                            Proficiency: Proficiency,
                            ProjectName: ProjectName,
                            Status: Status,
                            FromExperience: FromExperience,
                            ToExperience: ToExperience,
                            OptionalQuestion: OptionalQuestion,
                            PracticalQuestion: PracticalQuestion,
                        },
                        success: function (response) {
                            if (response != null && response.status == "success") {
                                $("#SuccessModel").modal();
                                if (IsCopy == "True") {
                                    //$("#msgContent").text("Test suite copy created successfully.");
                                    ShowMessage("Test suite copy created successfully..", 1);
                                    redirectToTestSuiteList();
                                }
                                else if (TestSuiteId == 0) {
                                    //$("#msgContent").text("Test suite created successfully.");
                                    ShowMessage("Test suite created successfully.", 1);
                                    redirectToTestSuiteList();
                                }
                                else {
                                    //$("#msgContent").text("Test suite updated successfully.");
                                    ShowMessage("Test suite updated successfully.", 1);
                                    redirectToTestSuiteList();
                                }
                            } else {
                                ShowMessage(response.message, 0);
                            }
                        },
                        error: function (response) {
                            ShowMessage("error!");
                        }
                    });
                }
                else {
                    $("#frmAddTestSuite").submit();
                    //validateTestSuite();
                }
            });

        });

        function addPosition() {
            $("#PositionForm")[0].reset();
            $("#addPositionPopup").modal('show');
        }

        function savePosition() {
            if ($("#PositionForm").valid()) {
                $.ajax({
                    type: "POST",
                    url: '/Positions/PositionSave',
                    data: $('#PositionForm').serialize(),
                    success: function (returndata) {
                        debugger;
                        $("#addPositionPopup").modal('hide');
                        var $PositionSelect = $('#Position').data('kendoDropDownList');
                        var multidata = $PositionSelect.dataSource.data();
                        multidata.push(returndata);
                        $("#PositionForm").trigger("reset");
                        $PositionSelect.value(returndata.PositionId);
                    }
                });
            }
            else {
                $('#PositionForm').submit();
            }
        }
        var dataItem1; //This should be Global variable
        //function getParentID() {
        //    debugger
        //    var row = $(event.srcElement).closest("tr");
        //    var grid = $(event.srcElement).closest("[data-role=grid]").data("kendoGrid");
        //    dataItem = grid.dataItem(row);
        //    var arr = [];
        //    $(dataItem.TagName).each(function () {
        //        arr.push(this);
        //    });
        //    return { values: arr };
        //}
        function onSelectTag(e) {
            debugger;
            var selectedValue = this.dataItem(e.item.index()).TagName;
            if (selectedValue != null) {
                this.dataItem(e.item.index()).TagName = selectedValue;
            }
        }
        function onAdditionalData() {

            return {
                text: $("#TagName").val()
            };
        }


</script>


<div class="modal fade" id="addPositionPopup" role="dialog">
    <form id="PositionForm" action="/Position/Save" method="post">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><span>Add Position</span></h4>
                </div>
                <div class="modal-body">

                    @Html.Partial("~/Views/Positions/AddPosition.cshtml", new Silicus.Ensure.Models.DataObjects.Position())
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="savePosition()" class="btn btn-default">Save</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </form>
</div>
