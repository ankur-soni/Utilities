@using Kendo.Mvc.UI;
@if (Request.IsAuthenticated)
{
    @(Html.Kendo().Grid<Silicus.Ensure.Web.Models.QuestionModel>().Name("questionGrids")
                                .Columns(columns =>
                                {
                                    columns.Bound(q => q.Id).Title("Id").Width(100).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").ShowOperators(false).InputWidth(100)));
                                    columns.Bound(q => q.QuestionDescription).Title("Question description").Width(400).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").ShowOperators(false)));
                                    columns.Bound(q => q.QuestionType).ClientTemplate("#=QuestionTypeString#").Width(200).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").Template("QuestionTypeDropDownList").ShowOperators(false)));
                                    columns.Bound(q => q.TechnologyId).ClientTemplate("#=TechnologyName#").Title("Technology").Width(200).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").Template("TechnologyDropDownList").ShowOperators(false)));
                                    columns.Bound(q => q.Status).ClientTemplate("#=StatusName#").Title("Status").Width(400).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").Template("StatusDropDownList").ShowOperators(false)));
                                    //.ClientGroupHeaderTemplate("#= value# (#=count#)").Hidden(true);
                                    columns.Bound(q => q.Tags).ClientTemplate("#=TagsString#").ClientTemplate("#=TagsString#").Title("Tags").Width(400).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").Template("TagsAutoComplete").ShowOperators(false)));
                                    columns.Bound(q => q.ProficiencyLevel).ClientTemplate("#=ProficiencyLevelString#").Title("Proficiency level").Width(400).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").Template("ProficiencyLevelDropDownList").ShowOperators(false)));
                                    columns.Bound(q => q.Id).ClientTemplate(@"
                                                <a href='/QuestionBank/EditQuestion?questionId=#=Id#' class='k-button M-T4'>Edit</a>
                            <a class='k-button M-T4' href='\\#' onclick='ConfirmDeleteQuestionRow(event)'>Delete</a>
                                               ").Title("Actions").Width(400).Sortable(false).Filterable(false);
                                    //.ClientGroupHeaderTemplate("#= value# (#=count#)").Hidden(true);
                                })
                                      .DataSource(dataSource => dataSource.Ajax().Events(eve => eve.RequestStart("OnRequestStart"))
                                      //.Group(group => group.Add(p => p.StatusName)).Aggregates(aggr => aggr.Add(p => p.StatusName).Count())
                                      .Sort(sort => sort.Add("Id").Ascending()).Model(model =>
                                      {
                                          model.Id(p => p.Id);
                                          model.Field(p => p.Id).Editable(false);
                                      })
                                         .Read(read => read.Action("GetAllQuestions", "QuestionBank"))
                                         .Destroy(delete => delete.Action("DeleteQuestion", "QuestionBank"))
                                         .PageSize(10)
                                         .ServerOperation(true)
                                            ).Pageable(p => p.PageSizes(true))
                                             .Sortable()
                                             .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                                             .Resizable(resizing => resizing.Columns(true))
    )}


<script>
    var tagsValue = "";
    function QuestionTypeDropDownList(args) {
        args.element.kendoDropDownList({
            dataSource: args.dataSource,
            dataTextField: "QuestionTypeString",
            dataValueField: "QuestionType",
            autoBind: false,
            valuePrimitive: true
        });
    }


    function ProficiencyLevelDropDownList(args) {
        args.element.kendoDropDownList({
            dataSource: args.dataSource,
            dataTextField: "ProficiencyLevelString",
            dataValueField: "ProficiencyLevel",
            autoBind: false,
            valuePrimitive: true
        });
    }

    function StatusDropDownList(args) {
        args.element.kendoDropDownList({
            dataSource: [
               { text: "Ready For Review", value: 1 },
               { text: "Approved", value: 2 },
               { text: "On Hold", value: 3 },
               { text: "Rejected", value: 4 }
            ],
            dataTextField: "text",
            dataValueField: "value",
            autoBind: false,
            valuePrimitive: true
        });
    }

    function TechnologyDropDownList(args) {
        args.element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: {
                        url: "/Technology/GetAllTechnologiesForDropDown"
                    }
                }
            },
            dataTextField: "TechnologyName",
            dataValueField: "TechnologyId",
            autoBind: false,
            valuePrimitive: true
        });
    }

    function TagsAutoComplete(args) {
        args.element.kendoAutoComplete({
            dataSource: {
                transport: {
                    read: "/Common/GetAllTagDetails",
                    dataType:"jsonp"
                }
            },
            select:OnSelect,
            dataValueField: "TagId",
            dataTextField: "TagName",
            minLength: 1,
            seperator: ",",
            valuePrimitive:true

        });
    }

    function OnRequestStart(e) {
        debugger

    }

    function OnSelect(e) {
        var dataItem = this.dataItem(e.item.index());
        tagsValue = dataItem.TagId;
        }

</script>