@using Kendo.Mvc.UI;
@using System.Collections

@{
    ViewBag.Title = "ShowAllProductBacklog";
    var isRolePm = ViewBag.IsRolePm;
}

<script>
    function onProductBacklogsDataBound(e) {
        var isRolePm = @ViewBag.IsRolePm.ToString().ToLower();
        var grid = $("#productBacklogs").data("kendoGrid");
        var gridData = grid.dataSource.view();
        for (var i = 0; i < gridData.length; i++) {
            var currentUid = gridData[i].uid;
            var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
            var assignButton = $(currenRow).find(".k-grid-Assign");
            var updateButton = $(currenRow).find(".k-grid-Update");
            var acceptButton = $(currenRow).find(".k-grid-Accept");
            if (gridData[i].AssigneeDisplayName != "Unassigned" && gridData[i].AssigneeDisplayName != "") {
                if (assignButton) {
                    assignButton.text("Re Assign");
                    acceptButton.remove();
                }
            }else if(!isRolePm && !gridData[i].IsTaskAssignedToUser){
                updateButton.remove();
            }
        }

        $(".hours").kendoMaskedTextBox({
            mask: "00 : 00",
            change: onHrsChange
        });

    }

</script>


<script src="~/Scripts/Custom/productBacklogIndex.js"></script>

<div class="row white-bg header-row">
    <nav class="" role="navigation" style="margin-bottom: 0">
        <div class="navbar-header">
            <a class="navbar-minimalize minimalize-styl-2 btn btn-primary" id="menu-toggle" style="margin-left:15px;" href="#"><i class="fa fa-bars"></i> </a>
        </div>
    </nav>

    <div class="col-lg-11 col-md-11 col-sm-11">
        <h1 class="dashboard-name">Product Backlog</h1>
    </div>
</div>
<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="box header-box M-T15">
            <div class="header-walloffame">
                <span>Projects</span>
                @(Html.Kendo().DropDownList()
                  .Name("projects")
                  .DataTextField("Name")
                  .DataValueField("Name")
                  .Events(e => e.Change("onProjectChange").DataBound("onProjectDataBound"))
                    .Filter("contains")
                  .DataSource(source =>
                  {
                      source.Custom()
                      .ServerFiltering(false)
                      .Type("aspnetmvc-ajax")
                      .Transport(transport =>
                      {
                          transport.Read("GetProjects", "ProductBacklog");
                      })
                      .Schema(schema =>
                      {
                          schema.Data("Data")
                              .Total("Total");
                      });
                  })
                )
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="box">

            @(Html.Kendo().Grid<Silicus.Reusable.Web.Models.ViewModel.ProductBacklogViewModel>
                ()
                .Name("productBacklogs")
                .AutoBind(false)
                .Events(e => e.DataBound("onProductBacklogsDataBound"))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Title).Editable(false);
                    model.Field(p => p.TimeAllocated).Editable(false);
                    model.Field(p => p.TimeSpent).Editable(false);
                    model.Field(p => p.State).Editable(false);
                })
                .Read(read => read.Action("GetProductBacklogs", "ProductBacklog").Data("additionalData"))
                .PageSize(20)
                )

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Width(10);
                    columns.Bound(p => p.Title).Width(50).ClientTemplate(@"<a href='\\#' onclick='openDetails(#=Id#)'>#=Title#</a>");
                    columns.Bound(p => p.Type).Width(10);
                    columns.Bound(p => p.AreaPath).Width(30).Title("Area");
                    columns.Bound(p => p.AssigneeDisplayName).Width(50).Title("Assigned To");
                    columns.Bound(p => p.TimeAllocatedString).Width(10).Title("Time Allocated (Hrs)").ClientTemplate("<input class='allocated-hours hours' id=#=Id# value='#=TimeAllocatedString#'  #=(Assignee == 'Unassigned' || TimeAllocatedString == '00:00')?'':'disabled'# />");
                    columns.Bound(p => p.TimeSpentString).Width(10).Title("Time Spent (Hrs)").ClientTemplate("<input value='#=TimeSpentString#' class='spent-hours hours'/>");
                    columns.Bound(p => p.State).Width(10);
                    columns.Command(command =>
                    {
                        command.Custom("Accept").Click("accept");

                        //  if (isRolePm)
                        //{
                        command.Custom("Assign").Click("openAssignUserForm");
                        //}
                        //command.Custom("Update");
                    }).Width(40).Title("Actions");
                })
                 .Scrollable()
                 .Editable(editable => editable.Mode(GridEditMode.PopUp))
                 .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                 .Resizable(resize => resize.Columns(true))
                .HtmlAttributes(new { style = "height: 750px;" })
                .Sortable()
                .Pageable(pageable => pageable
                .Refresh(true))
                .Editable(ed => ed.Mode(GridEditMode.InLine))
            )

        </div>
    </div>
</div>

@Html.Partial("_BootstrapModalTemplate", new Silicus.Reusable.Web.Models.ViewModel.BootstrapModalTemplateViewModel()
{
    Id = "detailsFormModal",
    Title = "Details",
    CloseButtonVisible = true,
    SaveButtonVisible = false
})

@{
    string str = Html.Kendo().DropDownList()
                    .BindTo((IEnumerable)ViewBag.Users)
                    .Filter("contains")
                    .OptionLabel("Unassigned")
                    .DataValueField("EmailAddress")
                    .DataTextField("DisplayName")
                    .Name("Assignee").ToString();

}

@Html.Partial("_BootstrapModalTemplate", new Silicus.Reusable.Web.Models.ViewModel.BootstrapModalTemplateViewModel()
{
    Id = "assineeFormModal",
    Title = "Assign User",
    CloseButtonVisible = true,
    SaveButtonVisible = true,
    ContentHtml = str,
    SaveButtonOnlickEvent="assignUser()"
})
