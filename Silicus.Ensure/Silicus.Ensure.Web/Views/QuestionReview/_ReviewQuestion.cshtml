@model Silicus.Ensure.Web.Models.ReviewQuestion.ReviewQuestionViewModel
@using Silicus.Ensure.Models.Constants;
@{
    Layout = null;
    var role = Silicus.Ensure.Web.MvcApplication.getCurrentUserRoles();
}
<link href="~/Content/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
<script src="~/Content/sweetalert2/sweetalert2.min.js"></script>
<script src="~/Scripts/Custom/addquestion.js"></script>

@if (Model != null && Model.QuestionDetails != null)
{
    <script>
        $(document).ready(function () {
            //window.onbeforeunload = function () {
            //    return "Do you really want to close?";
            //};
            $('#addTagPopup').on('hidden.bs.modal', function () {
                $('.field-validation-error').hide();
            });
            SetNavigationMenuActive('QuestionBank');
            $('.k-editor-toolbar').hide();
            var questionType = $("#QuestionType").val();
            if(questionType&&questionType==2)
            {
                QuestionTypeChange();
            }
            $("#IsAnsOption1").removeAttr("data-val-required")
            $("#AddQuestionForm").kendoValidator({
                rules: {
                    Option1: function (input, params) {
                        return validateOptions(input, params,1);
                    },
                    Option2: function (input, params) {
                        return validateOptions(input, params,2);
                    },
                    Option3: function (input, params) {
                        return validateOtherOptions(input, params,3);
                    },
                    Option4: function (input, params) {
                        return validateOtherOptions(input, params,4);
                    }
                    ,
                    Option5: function (input, params) {
                        return validateOtherOptions(input, params,5);
                    },
                    Option6: function (input, params) {
                        return validateOtherOptions(input, params,6);
                    },
                    Option7: function (input, params) {
                        return validateOtherOptions(input, params,7);
                    },
                    Option8: function (input, params) {
                        return validateOtherOptions(input, params,8);
                    },
                    IsAnsOption1: function (input, params) {
                        return isAnySelectedAns(input);
                    },
                    Answer:function (input, params) {
                        var qType = $('#QuestionType').val();
                        if (input.is("[name=Answer]") && qType == 2) {
                            input.attr("data-Answer-msg", "Answer is required.");
                            return input.val().trim()!="";
                        }
                        return true;
                    }
                }
            });


            var $answerType=$("#AnswerType");
            if($answerType.val()<2)
            {
                $answerType.val(1);
                $("#IsAllowedmoreThanOneAns").attr("checked",false);
            }
            else
            {
                $("#IsAllowedmoreThanOneAns").attr("checked",true);
            }
            $("#IsAllowedmoreThanOneAns").on("click",function()
            {
                $("#AnswerType").val($("#IsAllowedmoreThanOneAns input").is(":checked")?2:1);
                var $ansCheckBoxes=$(".ansCheckBox:checked");
                if($ansCheckBoxes.length>1)
                    $ansCheckBoxes.prop("checked",false);
            })

            $(".ansCheckBox").on("click",function()
            {
                if(!$("#IsAllowedmoreThanOneAns input").is(":checked"))
                {
                    $(".ansCheckBox").prop("checked",false);
                    $(this).prop("checked",true);
                }
            });

            // Hide More Than 2 Options.
            for(var i=3; i<=8; i++)
            {
                $("#rowOpt"+i).hide();
            }
            $("#errorDiv").hide();
            $("#durationRequired").hide();
            $("#practicalAns").hide();
            var success =@Model.QuestionDetails.Success;
            var edit="@Model.QuestionDetails.Edit";
            if(success==1)
            {
                window.onbeforeunload = null;
                $(window).unbind('unload');
                if(edit=="True"){
                    ShowMessage("Question updated successfully.",true);
                    window.location.href = "/QuestionBank/QuestionBank";
                }
                else{
                    ShowMessage("Question added successfully.",true);
                    window.location.href = "/QuestionBank/QuestionBank";
                }
            }
            if(success==2){
                ShowMessage("Question added successfully.",true);
            }
            else
            {
                if(edit=="True"){
                    var optCnt=@Model.QuestionDetails.OptionCount;
                    OptionDispalyOnEdit(optCnt);
                    //ShowRequiredOptionInCorrectAnswerDropDown();
                }
            }

            // Check Question Type on Edit.
            var qtype=@Model.QuestionDetails.QuestionType;
            if (qtype == "2") {
                $("#practical").hide();
                $("#practicalAns").show();
                $("#durationRequired").show();
            }

        });
        function ApproveQuestion(e){
            swal({
                title: "Are you sure?",
                text: "Are you sure, you want to approve this question?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes",
                cancelButtonText: "No",
                closeOnConfirm: true,
                closeOnCancel: true
            }).then(
       function () {
           var questionId=$('#QuestionId').attr('data-value');
           var nextQuestionId=$('#btnApproveQuestion').attr('data-NextQuestionId');
           var technologyId=$('#TechnologyId').val();
           if(questionId && technologyId){
               tabStrip = $("#ReviewQuestionTabs").data("kendoTabStrip");
               var questionStatusType="@((int)Model.QuestionStatusType)";
               var index=tabStrip.select().index()+1;
               if(tabStrip){
                   var status="@((int)QuestionStatus.Approved)"
                   $('#ReviewQuestionTabs-'+index).html('');
                   $.ajax({
                       url:'/QuestionReview/SubmitQuestionReview/',
                       data:{QuestionId:questionId,NextQuestionId:nextQuestionId,Status:status,TechnologyId:technologyId,questionStatusType:questionStatusType},
                       success: function(data){
                           toastr.success("Question has been approved.");
                           if(nextQuestionId){
                               $('#ReviewQuestionTabs-'+index).html(data);
                           }
                           else{
                               $('#ReviewQuestionTabs-'+index).text("No more questions here.");
                           }
                       }
                   })
               }
           }})
        }

        function PutQuestionOnHold(){
            swal({
                title: "Why?",
                text: "Please give suitable reason for placing this question on hold.",
                input:"textarea",
                inputValidator: function (value) {
                    return new Promise(function (resolve, reject) {
                        if (!(value&&value.trim()!="")) {
                            reject('Your comment is required.');
                        }
                        else{ var questionId=$('#QuestionId').attr('data-value');
                            var nextQuestionId=$('#btnQuestionOnHold').attr('data-NextQuestionId');
                            var technologyId=$('#TechnologyId').val();
                            if(questionId && technologyId){
                                tabStrip = $("#ReviewQuestionTabs").data("kendoTabStrip");
                                var index=tabStrip.select().index()+1;
                                if(tabStrip){
                                    var status="@((int)QuestionStatus.OnHold)";
                                    var questionStatusType="@((int)Model.QuestionStatusType)";
                                    $('#ReviewQuestionTabs-'+index).html('');
                                    $.ajax({
                                        url:'/QuestionReview/SubmitQuestionReview/',
                                        data:{QuestionId:questionId,NextQuestionId:nextQuestionId,Status:status,TechnologyId:technologyId,comment:value,questionStatusType:questionStatusType},
                                        success: function(data){
                                            toastr.success("Question has been put on hold.");
                                            if(nextQuestionId){
                                                $('#ReviewQuestionTabs-'+index).html(data);
                                            }
                                            else{
                                                $('#ReviewQuestionTabs-'+index).text("No more questions here.");
                                            }
                                            resolve();
                                        }
                                    })
                                }
                            }
                        }
                    })
                },
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes",
                cancelButtonText: "No",
                closeOnConfirm: true,
                closeOnCancel: true
            });
        }

        function RejectQuestion(){
            swal({
                title: "Why?",
                text: "Please give suitable reason for rejecting this question.",
                input:"textarea",
                inputValidator: function (value) {
                    return new Promise(function (resolve, reject) {
                        if (!(value&&value.trim()!="")) {
                            reject('Your comment is required.');
                        }
                        else{ var questionId=$('#QuestionId').attr('data-value');
                            var nextQuestionId=$('#btnRejectQuestion').attr('data-NextQuestionId');
                            var technologyId=$('#TechnologyId').val();
                            if(questionId && technologyId){
                                tabStrip = $("#ReviewQuestionTabs").data("kendoTabStrip");
                                var index=tabStrip.select().index()+1;
                                if(tabStrip){
                                    var status="@((int)QuestionStatus.Rejected)"
                                    var questionStatusType="@((int)Model.QuestionStatusType)"
                                    $('#ReviewQuestionTabs-'+index).html('');
                                    $.ajax({
                                        url:'/QuestionReview/SubmitQuestionReview/',
                                        data:{QuestionId:questionId,NextQuestionId:nextQuestionId,Status:status,TechnologyId:technologyId,comment:value,questionStatusType:questionStatusType},
                                        success: function(data){
                                            toastr.success("Question has been Rejected.");
                                            if(nextQuestionId){
                                                $('#ReviewQuestionTabs-'+index).html(data);
                                            }
                                            else{
                                                $('#ReviewQuestionTabs-'+index).text("No more questions here.");
                                            }
                                            resolve();
                                        }
                                    })
                                }
                            }
                        }
                    })
                },
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes",
                cancelButtonText: "No",
                closeOnConfirm: true,
                closeOnCancel: true
            });
        }

        function SkipQuestion(){
            var questionId=$('#QuestionId').attr('data-value');
            var nextQuestionId=$('#btnSkipQuestion').attr('data-NextQuestionId');
            var technologyId=$('#TechnologyId').val();
            var questionStatusType="@((int)Model.QuestionStatusType)"
            if(questionId && technologyId){
                tabStrip = $("#ReviewQuestionTabs").data("kendoTabStrip");
                var index=tabStrip.select().index()+1;
                if(tabStrip){
                    $('#ReviewQuestionTabs-'+index).html('');
                    $.ajax({
                        url:'/QuestionReview/ReviewQuestion',
                        data:{questionId:nextQuestionId,technologyId:technologyId,questionStatusType:questionStatusType},
                        success: function(data){
                            if(nextQuestionId){
                                $('#ReviewQuestionTabs-'+index).html(data);
                            }
                        }
                    })
                }
            }
        }
    </script>

    <div class="row">
        <div class="f1">

            @using (Html.BeginForm("EditAndApproveQuestion", "QuestionReview", FormMethod.Post, new { id = "AddQuestionForm", onsubmit = "OnSubmit()" }))
            {
                // @Html.HiddenFor(ques => ques.QuestionDetails.TechnologyId, new { @id = "TechnologyId" });
                @Html.HiddenFor(ques => ques.NextQuestionId, new { @id = "NextQuestionId" });
                
                        <div class="row">
                            <div class="btn-nav">
                                <div class="pull-right">
                                    @if (Model.QuestionStatusType == QuestionStatus.ReadyForReview || Model.QuestionStatusType == QuestionStatus.OnHold)
                                    {
                                        <input type="button" id="btnApproveQuestion" onclick="ApproveQuestion()" value="Approve" class="btn btn-primary M-T4" data-NextQuestionId="@Model.NextQuestionId" />
                                        <input type="button" id="btnRejectQuestion" onclick="RejectQuestion()" value="Reject" class="btn btn-primary M-T4" data-NextQuestionId="@Model.NextQuestionId" />
                                        if (Model.QuestionStatusType == QuestionStatus.ReadyForReview)
                                        {
                                            <input type="button" style="width: 70px;margin-left:1px;" id="btnQuestionOnHold" onclick="PutQuestionOnHold()" name="btnOnHold" value="On Hold" class="btn btn-primary M-T4" data-NextQuestionId="@Model.NextQuestionId" />
                                        }
                                        else
                                        {
                                            <input type="submit"  id="btnEditAndApproveQuestion" name="btnEditAndApproveQuestion" value="Edit And Approve" class="btn btn-primary M-T4" />
                                        }
                                    }
                                    else if (Model.QuestionStatusType == QuestionStatus.Rejected)
                                    {
                                        <input type="submit" style="width: 70px;margin-left:1px;" id="btnEditAndApproveQuestion" name="btnEditAndApproveQuestion" value="Save" class="btn btn-primary M-T4" />
                                    }
                                    @if (Model.NextQuestionId != null)
                                    {
                                        <input type="button" value="Skip" id="btnSkipQuestion" onclick="SkipQuestion()" class="btn btn-secondary M-T4" data-NextQuestionId="@Model.NextQuestionId" />
                                    }
                                </div>
                            </div>
                        </div>
                        <div id="ReviewQuestionFormElements">
                            @Html.Partial("_QuestionDetailsForm", Model.QuestionDetails)
                        </div>
            }
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="myModal" role="dialog" onclick="OnCancel();">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="OnCancel();">&times;</button>
                    <h4 class="modal-title"><span id="msgMain">Success!</span></h4>
                </div>
                <div class="modal-body">
                    <p id="msgContent">Some text in the modal.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="OnCancel();">Cancel</button>
                </div>
            </div>

        </div>
    </div>
    <div class="modal fade" id="addTagPopup" role="dialog">
        <form id="tagForm" action="/Tag/Save" method="post">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title"><span>Add skill tag</span></h4>
                    </div>
                    <div class="modal-body">

                        @Html.Partial("~/Views/Shared/EditorTemplates/TagEditorTemplate.cshtml", new Silicus.Ensure.Models.DataObjects.Tags())

                    </div>
                    <div class="modal-footer">
                        <button type="button" style="width:70px;" onclick="saveTag()" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>

            </div>
        </form>
    </div>

}
else {
<div>No more questions here.</div>
}

@if (Model != null)
{
    <script>
        var questionTypeDropDown = $("#QuestionType").data("kendoDropDownList");
        if (questionTypeDropDown)
        {
            questionTypeDropDown.enable(false);
        }
    </script>
    if (Model.QuestionStatusType == QuestionStatus.ReadyForReview)
    {
        <script>
            $('#ReviewQuestionFormElements').find('input, textarea, button, select,a,ul').attr('disabled','disabled');
            var multiselect = $("#SkillTag").data("kendoMultiSelect");
            if(multiselect){
                multiselect.enable(false);
            }
            var technologyDropDown = $("#TechnologyId").data("kendoDropDownList");
            if(technologyDropDown){
                technologyDropDown.enable(false);
            }
            var proficiencyDropDown = $("#ProficiencyLevel").data("kendoDropDownList");
            if(proficiencyDropDown){
                proficiencyDropDown.enable(false);
            }
        </script>
    }
}