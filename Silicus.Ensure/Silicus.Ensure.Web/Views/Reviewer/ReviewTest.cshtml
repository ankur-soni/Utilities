@model Silicus.Ensure.Web.Models.TestSuiteCandidateModel
@using Kendo.Mvc.UI;
@using Silicus.Ensure.Web.Models.Test
@using Silicus.Ensure.Web
@using Silicus.Ensure.Models.Constants;

@{
    ViewBag.Title = "Online Test";
    Layout = "~/Views/Shared/_LayoutCandidate.cshtml";
}

<style>
    textarea {
    resize: none;
}
   
    #ReviwerMark_validationMessage {
    font-size: 12px !important;
   
    }
    .section-title {
        color: #ed913c;
        font-size: 20px;
        margin: 20px 35px 0px 35px;
    }

    .section-title-emp {
        color: #235077;
        font-size: 20px;
        margin: 20px 35px 0px 35px;
    }

    .btmBorder1 {
        border-bottom: 1px solid #cdcdcd;
        margin: 10px 35px 20px 35px;
    }

    .question-line {
        color: #01aef3;
        font-size: 20px;
        margin: 0px 35px 20px 35px;
    }

    .candidate-answer {
        margin: 0px 35px 30px 35px;
    }

    .reviewers-comment {
        margin: 0px 35px 30px 50px;
    }

    .marks1 {
        margin: 0px 35px 30px -30px;
    }

    .marks {
        height: 82px !important;
        line-height: 1.8 !important;
        padding: 0 !important;
        text-align: center;
        font-size: 34px;
    }

    .nav-btn {
        margin: 0px 35px 20px 35px;
    }

    .inner {
        border-right: 1px solid #ccc;
        background: #ccc;
        height: 81px;
    }

    .themeColor {
        color: #20a8d8;
    }

    .txtBoxMark {
    color: #01aef3 !important;
    height: 79px;
    width: 87px;
    overflow: hidden;
    text-align: center;
    margin-left: -15px;
    border:none;
    }
</style>

<div class="row main-content" id="main">
    <div class="col-sm-12">
        <div class="row">
            <input type="hidden" value="@Model.TestSuiteId" id="TestSuiteId" />
            <input type="hidden" value="@Model.UserTestSuiteId" id="UserTestSuiteId" />
            <input type="hidden" value="@Model.UserId" id="UserId" />
            <input type="hidden" value="@Model.CandidateStatus" id="CandidateStatus" />
        </div>
        <div class="col-sm-12 M-T15">
            <div class="f1 M-B30" style="background:#fff;border-radius:5px;">
                <div id="QuestionDetails">
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="msgMain">Success!</span></h4>
            </div>
            <div class="modal-body">
                <p id="msgContent">Some text in the modal.</p>
            </div>
            <div class="modal-footer">
                <button id="btnModalOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnAddMoreTimeOK();">OK</button>
                <button id="btnSubmitTestOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnSubmitTestOK();">OK</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>


<!-- Modal Submit Test On Time Complete-->
<div class="modal fade" id="testresultPopup" role="dialog">
   
        <div class="modal-dialog modal-lg">


            <!-- Modal content-->
            
                    <div class="modal-content">
                        <div style="background:#294f71;color:#fff;" class="modal-header">
                            <button style="color:#fff;" type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title" style="font-size:16px;">Evaluation</h4>
                        </div>
                        <div class="modal-body">
                            <form id="frmTestresult">
                                @Html.Partial("_CandidateResult", new CandidateResultViewmodel())
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id="SubmitCandidateResult" type="button" class="btn btn-primary">OK</button>

                        </div>
                    </div>
                </div>
            </div>
        
          

        @section Sidebar{
            <div class="sidebar">
                <nav class="sidebar-nav">

                    <!--mobile menu -->
                    <div class="panel-group hidden-lg-up mobileMenu" id="accordion">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#LearnMenu">OBJECTIVE TEST</a>
                                </h4>
                            </div>
                            <div id="LearnMenu" class="panel-collapse collapse">
                                <div class="panel-body">
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#supportMenu">PRACTICAL TEST</a>
                                </h4>
                            </div>
                            <div id="supportMenu" class="panel-collapse collapse">
                                <div class="panel-body">
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--mobile menu end here-->
                    <div class="menu-btn-sidebar" onclick="customSidebarToggle();"><i class="fa fa-bars" aria-hidden="true"></i></div>
                    <ul class="nav hidden-md-down">
                        <div id="objective-test-side-bar">
                            @*<li class="nav-item nav-heading">
                                <a class="nav-link fontBold" href="#">Objective Questions</a>
                            </li>*@
                            <li class="nav-item">
                                <a class="nav-link personal fontBold" href="#"><i class="fa fa-check-square-o fontBold" aria-hidden="true"></i> OBJECTIVE QUESTIONS </a>
                            </li>
                            <li class="nav-item">
                                <ol class="questions">
                                    @if (@Model.NavigationDetails != null && @Model.NavigationDetails.Objective != null && @Model.NavigationDetails.Objective.Count > 0)
                                    {
                                        foreach (var question in Model.NavigationDetails.Objective)
                                        {
                                            <li>
                                                <a class="nav-link questionView contact QuestionCheckbox @QuestionColor(question)" id="@question.QuestionId" href="#"> @Html.Raw(@question.QuestionDescription)</a>
                                            </li>
                                        }
                                    }
                                </ol>
                            </li>
                        </div>
                        <div id="practical-test-side-bar">
                            @*<li class="nav-item nav-heading">
                                <a class="nav-link fontBold" href="#">Practical Questions</a>
                            </li>*@
                            <li class="nav-item">
                                <a class="nav-link personal fontBold" href="#"><i class="fa fa-check-square-o fontBold" aria-hidden="true"></i> PRACTICAL QUESTIONS </a>
                            </li>
                            <li class="nav-item">
                                <ol class="questions">
                                    @if (@Model.NavigationDetails != null && @Model.NavigationDetails.Practical != null && @Model.NavigationDetails.Practical.Count > 0)
                                    {
                                        foreach (var question in Model.NavigationDetails.Practical)
                                        {
                                            <li>
                                                <a class="nav-link questionView contact QuestionCheckbox @QuestionColor(question)" id="@question.QuestionId" href="#">@Html.Raw(@question.QuestionDescription)</a>
                                            </li>
                                        }
                                    }
                                </ol>
                            </li>
                        </div>
                    </ul>

                </nav>
            </div>

        }

        @section CandidateDetails {
            @Html.Partial("_reviewerTestSummaryAndCandidateDetails", Model)
        }

        @helper QuestionColor(Silicus.Ensure.Models.Test.QuestionNavigationBasics question)
        {
if (question.IsAnswered)
{
        @("is-answered");
}
else if (question.IsViewedOnly)
{
        @("is-viewed-only");
}
else
{
        @("is-not-visited");
}

}

        <script>
    var clock;
    var totalTime;
    $(document).ready(function () {
        $('.breadcrumb-item.active').removeClass('active');
        $('#objective-test').addClass('active');
        $('#practical-test-side-bar').hide();
        $('#objective-test>a,#practical-test>a').removeClass('disabled');
        $('#instruction').hide();
        $("#frmTestresult").kendoValidator();
        $("#ReviwerMark").kendoValidator();
        $("#btnSubmitTestOK").hide();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var url = "/Reviewer/LoadQuestion?userTestSuiteId=";
        $('#QuestionDetails').load(url + userTestSuiteId, disableControls);
        $(document).on("click", "#btnSubmitEvalution", submitEvalution);
        $("#SubmitCandidateResult").on("click", submitCandidateResult);
        $('.QuestionCheckbox').on('click', QuestionCheckboxClicked);
    });

    function disableControls() {
        var status = $("#CandidateStatus").val();
        if (status && (status == "@CandidateStatus.Selected" || status == "@CandidateStatus.Rejected")) {
            if ($('#ReviwerMark').val()) {
                $($('#ReviewerComment').data().kendoEditor.body).attr('contenteditable', false);
                $("#ReviwerMark").prop("readonly", true);
                $('#btnSubmitEvalution').attr('disabled', true);
            }
        }
    }

    function QuestionCheckboxClicked(event) {
        var questionId = $(this).attr('id');
        UpdateCurrentQuestionAndLoadNewOne(questionId);
    }

    function UpdateCurrentQuestionAndLoadNewOne(questionId) {
        updateTestSummary();
        var questionNavigationDetails = GetCurrentQuestionStatus();
        updateQuestionLinkColorClass('#' + questionNavigationDetails.QuestionNumber, questionNavigationDetails.IsReviewed, questionNavigationDetails.IsViewed);
        UpdateAndGetQuestionReview(questionId);
    }

    function updateQuestionLinkColorClass(questionLinkId, isAnswred, isViewedOnly) {
        var className;
        if (isAnswred) {
            className = "is-answered";
        } else if (isViewedOnly == true) {
            className = "is-viewed-only";
        } else {
            className = "is-not-visited";
        }
        $(questionLinkId).removeClass('is-answered');
        $(questionLinkId).removeClass('is-viewed-only');
        $(questionLinkId).removeClass('is-not-visited');

        $(questionLinkId).addClass(className);
    }

    function GetCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsReviewed = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsReviewed = true;
        }
        else {
            IsReviewed = $("#ReviewerComment").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsReviewed: IsReviewed, IsViewed: IsViewed };
        return result;
    }

    function OnNext(e) {
        var validator = $("#ReviwerMark").data("kendoValidator");
        if ($("#ReviwerMark").length == 0 || validator.validate()) {
            var questionId = $('#btnNext').attr('data-id');
            UpdateAndGetQuestionReview(questionId);
        }

        return false;
    }

    function OnPrevious() {
        var validator = $("#ReviwerMark").data("kendoValidator");
        if ($("#ReviwerMark").length == 0 || validator.validate()) {
            var questionId = $('#btnPrevious').attr('data-id');
            UpdateAndGetQuestionReview(questionId);
        }
        return false;
    }

    function GetQuestionDetails(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var questionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Answer: answer };
        $('#QuestionDetails').load('/Candidate/GetQuestionDetails', questionDetails);
    }

    function UpdateAndGetQuestionReview(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var candidateId = $("#UserId").val();
        var comment = $("#ReviewerComment").val();
        var marks = $("#ReviwerMark").val();
        var reviewerQuestionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Comment: comment, Marks: marks };
        $.ajax({
            url: "/Reviewer/UpdateReviewAndGetQuestionDetails",
            cache: false,
            dataType: "html",
            data: reviewerQuestionDetails,
            success: function (data) {
                $("#QuestionDetails").html('');
                $("#QuestionDetails").html(data);
                updateTestSummary();

                disableControls();
            }
        });
    }

    function updateTestSummary() {
        var userTestSuiteId = $("#UserTestSuiteId").val();
        $.ajax({
            url: "/Reviewer/LoadTestSummaryView",
            cache: false,
            dataType: "html",
            data: { userTestSuiteId: userTestSuiteId },
            success: function (data) {
                debugger
                $("#TestSummaryDiv").html('');
                $("#TestSummaryDiv").html(data);
            }
        });
    }

    function calculatePercentage(earned, total) {
        return ((earned / total) * 100);
    }

    function GetAnswer() {
        var answer = "";
        if ($("#QuestionType").val().trim() == "1") {
            if ($("#AnswerType").val().trim() == "1") {
                answer = $('[name="optradio"]:radio:checked').val();
            }
            else {
                $("input:checkbox[name=optcheckbox]:checked").each(function () {
                    answer = answer + $(this).val() + ",";
                });

                answer = answer.slice(0, -1);
            }
        }
        else {
            answer = $("#PracticalAnswer").val();
            answer = encodeURIComponent(answer);
        }
        if (answer == "undefined")
            answer = null;
        return answer;
    }

    function getCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsAnswered = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsAnswered = $(".radio input:checked").length > 0 ? true : false;
        }
        else {
            IsAnswered = $("#PracticalAnswer").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsAnswered: IsAnswered, IsViewed: IsViewed };
        return result;
    }

    function submitEvalution() {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var candidateId = $("#UserId").val();
        var comment = $("#ReviewerComment").val();
        var marks = $("#ReviwerMark").val();
        var questionId = $(this).find('input').attr('id');
        var reviewerQuestionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Comment: comment, Marks: marks };
        $.ajax({
            type: "POST",
            url: "/Reviewer/SumbmitTestReview",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(reviewerQuestionDetails),
            dataType: "json",
            success: function (data) {
                if (data)
                    $("#testresultPopup").modal('show');
                else {
                    $("#testresultPopup").modal('hide');
                    ShowSweetAlertWithoutCancel("Warning!", "Please Review and Mark all Question Before Submit evaluation !", "warning");
                }
            }
        });

    }

    function submitCandidateResult() {
        var validator = $("#frmTestresult").data("kendoValidator");
        var userId = $("#UserId").val();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        if (validator.validate()) {
            var formdata = new FormData($('form').get(0));
            formdata.append('CandidateUserId', userId);
            formdata.append('UserTestSuiteId', userTestSuiteId);

            $.ajax({
                url: '@Url.Action("SumbmitCandidateResult", "Reviewer")',
                type: 'POST',
                data: formdata,
                processData: false,
                contentType: false,
                success: function (msg) {
                    $("#testresultPopup").modal('hide');
                    window.location.href = "/Admin/Candidates";
                }
            });
        }
    }

    function SumbmitTestReview() {
        var validator = $("#frmTestresult").data("kendoValidator");
        var userId = $("#UserId").val();
        if (validator.validate()) {
            var formdata = new FormData($('form').get(0));
            formdata.append('CandidateUserId', userId);

            $.ajax({
                url: '@Url.Action("SumbmitCandidateResult", "Candidate")',
                type: 'POST',
                data: formdata,
                processData: false,
                contentType: false,
                success: function (msg) {
                    $("#testresultPopup").modal('hide');
                }
            });
        }
    }

    function refreshAnsweredQuestionCount() {
        var answeredObjectiveQuestions = parseInt($('#objective-test-side-bar .is-answered').length);
        var answeredPracticalQuestions = parseInt($('#practical-test-side-bar .is-answered').length);
        var totalObjectiveQuestions = parseInt($('#objective-test-side-bar .QuestionCheckbox').length);
        var totalPracticalQuestions = parseInt($('#practical-test-side-bar .QuestionCheckbox').length);
        if (answeredObjectiveQuestions != NaN && answeredPracticalQuestions != NaN && totalObjectiveQuestions != NaN && totalPracticalQuestions != NaN) {
            $('#answeredObjectiveQuestionsCount').text(answeredObjectiveQuestions);
            $('#answeredPracticalQuestionsCount').text(answeredPracticalQuestions);
            $('#notAnsweredObjectiveQuestionsCount').text(totalObjectiveQuestions - answeredObjectiveQuestions);
            $('#notAnsweredPracticalQuestionsCount').text(totalPracticalQuestions - answeredPracticalQuestions);
        }
    }
        </script>


