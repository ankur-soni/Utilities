@model Silicus.Ensure.Web.Models.UserViewModel
@using Silicus.Ensure.Models.Constants;
@using Kendo.Mvc.UI;
@{
    ViewBag.Title = "CandidateAdd";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="candidateDiv">
    @Html.Partial("_CandidateProfile", Model)

</div>

<div class="modal fade" id="addPositionPopup" role="dialog">
    <form id="postionForm">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><span>Add tag</span></h4>
                </div>
                <div class="modal-body">

                    @Html.Partial("~/Views/Shared/EditorTemplates/PostionEditorTemplete.cshtml", new Silicus.Ensure.Web.Models.PositionViewModel())
                </div>
                <div class="modal-footer">
                    <button type="button" style="width:70px;" onclick="savePostion()" class="btn btn-default">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>
    </form>
</div>


<div class="modal fade" id="candidateGridPopup" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span>Select Candidate</span></h4>
            </div>
            <div class="modal-body">
                <span>Candidate already exists in the system.</br> Select a candidate to continue with an existing candidate. </br>Click 'No' to create a new candidate</span>
                <div id="candidateGridBody"></div>
            </div>
            <div class="modal-footer">
                <button type="button" style="width:70px;" onclick="loadCandidateDetails()" class="btn btn-default">Yes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
            </div>
        </div>

    </div>
</div>
<script>


    var fileBool=false;
    $(document).ready(function () {
        $('#messageDiv').fadeOut(5000);
    });

    $(document).ready(function () {
        //$('#uploadFileLink').ke
        loadControls();
    });

    function loadControls()
    {
        $('#ProfilePhotofile').change(function (){
            ShowProfilePhoto(this);
        });

        $('#FirstName,#LastName,#DOB').change(function (){

            if ($("#FirstName").val() && $("#LastName").val() && $("#DOB").val()) {
                checkExistingCandidate();
            }
        });

        //$("#files").kendoUpload();
        $(".toggleEnabled").click(function() {
            getUpload().toggle();
        });

        $(".enable").click(function() {
            getUpload().enable();
        });

        $(".disable").click(function() {
            getUpload().disable();
        });
        $("#DOB").kendoDatePicker({
            format: "dd/MM/yyyy"
        });
    }
    function IsInvalidFileType(fileName)
    {
        if (fileName == "") {
            toastr.error("Browse to upload a valid image file");
            return true;
        }
        var extension=fileName.split(".")[1].toUpperCase();
        if (extension && (extension == "PNG"||extension == "JPG"||extension == "JPEG"))
            return false;
        else
            return true;
    }
    function ClearProfilePhoto(){
        $('#ProfilePhotoImage').attr('src','');
        $('#ProfilePhotofile').val('');
        $('#ProfilePhotoImage').hide();
        $('#RemoveProfilePhoto').hide();
    }
    function ShowProfilePhoto(input){
        var maxSize =$(input).data('max-size');
        if (input.files && input.files[0]) {
            var fileName=input.files[0].name;
            var fileSize = input.files[0].size;
            if(fileSize>maxSize){
                toastr.error('file size should be less than 2mb');
                ClearProfilePhoto();
                return false;
            }
            else if(IsInvalidFileType(fileName)){
                toastr.error('Only jpg, jpeg, png file types are allowed.');
                ClearProfilePhoto();
                return false;
            }
            else{
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#ProfilePhotoImage').attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
                $('#ProfilePhotoImage').show();
            }
        }

    }

    function savePostion()
    {
        if($("#postionForm").valid())
        {
            $.ajax({
                type: "POST",
                url: '/Positions/PositionSave',
                data: $('#postionForm').serialize(),
                success: function (returndata) {
                    $("#addPositionPopup").modal('hide');
                    var $PositionDrpSelect=$('#Position').data('kendoDropDownList');
                    var multidata=$PositionDrpSelect.dataSource.data();
                    multidata.unshift({ PositionName: returndata.PositionName, PositionName: returndata.PositionName});
                    $PositionDrpSelect.value(returndata.PositionName);
                    $PositionDrpSelect.trigger('change');
                    $("#postionForm").trigger("reset");
                }
            });
        }
        else
        {
            $('#postionForm').submit();
        }
    }

    function AddPosition()
    {
        $("#postionForm").kendoValidator({
            rules: {
                tagNamevalidation: function (input, params) {
                    if (input.is("[name='PositionName']") && input.val() != "") {
                        var bool=isTagNameAvailable("", input.val());
                        if(!bool)
                        {
                            input.attr("data-tagNamevalidation-msg", "Position name already exist !");
                            return false;
                        }
                    }

                    return true;
                }
            }
        });
        $('#PositionName').val('');
        $("#addPositionPopup").modal('show');
    }

    function isTagNameAvailable(existingName,updatedName)
    {
        var isAvailable = true;
        if (existingName != updatedName) {
            $.ajax({
                type: "POST",
                url: '/Positions/IsDuplicatePositionName',
                async: false,
                data: { PositionName: updatedName },
                success: function (returndata) {
                    if (returndata == true) {
                        isAvailable = true;
                    }
                    else {
                        isAvailable = false;
                    }
                }
            });
        }
        return isAvailable;
    }

    $(function () {
        $("form").kendoValidator();
        $('.k-invalid').css('margin-bottom','0!important');
    });
    function onCancelClick() {
        window.location = '@Url.Action("Candidates", "Admin")';
    }
    function GetNewDate() {
        var date=new Date();
        var year = date.getFullYear();
        var month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;
        var day = date.getDate().toString();
        day = day.length > 1 ? day : '0' + day;
        return day + '/' +month  + '/' + year;
    }


    function checkMail(email,remoteURL)
    {
        var valid;
        $.ajax({
            async: false,
            type: "POST",
            url: remoteURL,
            data: JSON.stringify({ 'Email': email,'UserId':@Model.UserId }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                valid = data;
            }
        });
        return valid;
    }

    function checkExistingCandidate()
    {
        var userId=$("#UserId").val();
        if(userId==0)
        {
            var firstName=$("#FirstName").val();
            var lastName=$("#LastName").val();
            var dOB=$("#DOB").val();
            $.ajax({
                url: '/Admin/GetCandidateGrid',
                type: 'post',
                dataType: 'html',
                //async:false,
                data: {firstName:firstName,lastName:lastName,dOB:dOB},
                success: function (data) {
                    if(data)
                    {
                        //$('#userGrids').data('kendoGrid').dataSource.data(data);
                        $("#candidateGridBody").html(data);
                        if($('#userGrids').data('kendoGrid').dataSource.total()>0)
                        {
                            $("#candidateGridPopup").modal('show');
                        }
                    }
                }

            });
        }
    }

    function loadCandidateDetails()
    {
        var dataItem=GetDataItemOfSelectedRow();
        if(dataItem)
        {
            $.ajax({
                url: '/Admin/GetCandidateProfile',
                type: 'post',
                dataType: 'html',
                //async:false,
                data: {userId:dataItem.UserId},
                success: function (data) {
                    if(data)
                    {
                        //$('#userGrids').data('kendoGrid').dataSource.data(data);
                        $("#candidateDiv").html(data);
                        loadControls();
                        $('#IsCandidateReappear').val(true);
                        $("#candidateGridPopup").modal('hide');
                    }
                }

            });
        }
        else
        {
            swal("Warning!", "Please select at least 1 candidate.", "error");
        }
    }
    function GetDataItemOfSelectedRow() {
        var checkedRow = $("[name=selectUser]:checked");
        if (checkedRow.length > 0) {
            var userGrid = $('#userGrids').data("kendoGrid");
            if (userGrid) {
                var dataItem = userGrid.dataItem($(checkedRow).closest("tr"));
                return dataItem;
            }
        }
        return false;
    }


    function RemoveProfilePhoto(){
        $('#ProfilePhotoImage').attr('src',"");
        $('#ProfilePhotoImage').hide();
        $('#ProfilePhotofile').show();
        $('#RemoveProfilePhoto').hide();
    }

    //register custom validation rules
    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: { // custom rules
                experiencevalidation: function (input, params) {
                    if (input.is("[name='DOB']")) {
                        if (!(input.val() != "")) {
                            input.attr("data-experiencevalidation-msg", "Date of birth is required!");
                            return false;
                        }
                        else if (input.val() != "") {
                            var today = new Date();
                            var currentYear = today.getFullYear();
                            try {
                                var parts = input.val().split("/");
                                var timestamp = new Date(parts[1] + "/" + parts[0] + "/" + parts[2]);
                                if (isNaN(timestamp) == true || parts[2] < 1900 || parts[2] >= currentYear) {
                                    input.attr("data-experiencevalidation-msg", "Invalid Date");
                                    return false;
                                }
                            }
                            catch (e) {
                                input.attr("data-experiencevalidation-msg", "Invalid Date");
                                return false;
                            }
                        }
                        else if (input.val() != "") {
                            if ($('#DOB').val() > GetNewDate()) {
                                input.attr("data-experiencevalidation-msg", "Date of birth can not be greater than today!");
                                return false;
                            }
                        }
                    }
                    if (input.is("[name='Position']")) {
                        if ((input.val() != "" && input.val() == "--Select--")) {
                            input.attr("data-experiencevalidation-msg", "Position is required!");
                            $('span[aria-owns="Position_listbox"]').css('border', '1px solid red');
                            return false;
                        }
                        else {
                            $('span[aria-owns="Position_listbox"]').css('border', 'none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='Gender']")) {
                        if ((input.val() != "" && input.val() == "--Select--")) {
                            input.attr("data-experiencevalidation-msg", "Gender is required!");
                            $('span[aria-owns="Gender_listbox"]').css('border', '1px solid red');
                            return false;
                        }
                        else {
                            $('span[aria-owns="Gender_listbox"]').css('border', 'none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='RelevantExperienceInYear']")) {
                        if (input.val() == "") {
                            input.attr("data-experiencevalidation-msg", "Relevant experience in year is required!");
                            $('span[aria-owns="RelevantExperienceInYear_listbox"]').css('border', '1px solid red');
                            return false;
                        }
                        else if (CompareTotalAndRelavantExperience()) {
                            input.attr("data-experiencevalidation-msg", "Total experience should be greater than or equal to relevant experience.");
                            return false;

                        }
                        else {
                            $('span[aria-owns="RelevantExperienceInYear_listbox"]').css('border', 'none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='RelevantExperienceInMonth']")) {
                        if (input.val() == "") {
                            input.attr("data-experiencevalidation-msg", "Relevant experience in month is required!");
                            $('span[aria-owns="RelevantExperienceInMonth_listbox"]').css('border', '1px solid red');
                            return false;
                        }
                        else if (CompareTotalAndRelavantExperience()) {

                            input.attr("data-experiencevalidation-msg", "Total experience should be greater than or equal to relevant experience.");
                            return false;

                        }
                        else {
                            $('span[aria-owns="RelevantExperienceInMonth_listbox"]').css('border', 'none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='TotalExperienceInYear']")) {
                        if (input.val() == "") {
                            input.attr("data-experiencevalidation-msg", "Relevant experience in year is required!");
                            $('span[aria-owns="TotalExperienceInYear_listbox"]').css('border', '1px solid red');
                            return false;
                        }
                        else if (CompareTotalAndRelavantExperience()) {
                            input.attr("data-experiencevalidation-msg", "Total experience should be greater than or equal to relevant experience.");
                            return false;

                        }
                        else {
                            $('span[aria-owns="TotalExperienceInYear_listbox"]').css('border', 'none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='TotalExperienceInMonth']")) {
                        if (input.val() == "") {
                            input.attr("data-experiencevalidation-msg", "Relevant experience in month is required!");
                            $('span[aria-owns="TotalExperienceInMonth_listbox"]').css('border', '1px solid red');
                            return false;
                        }
                        else if (CompareTotalAndRelavantExperience()) {

                            input.attr("data-experiencevalidation-msg", "Total experience should be greater than or equal to relevant experience.");
                            return false;

                        }
                        else {
                            $('span[aria-owns="TotalExperienceInMonth_listbox"]').css('border', 'none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[data-val-remote]") && input.val() != "") {
                        var remoteURL = input.attr("data-val-remote-url");
                        if (!checkMail(input.val(), remoteURL)) {
                            input.attr("data-experiencevalidation-msg", "Email is already exist!");
                            return false;
                        }
                    }
                    if (input.is("[id='file']") && fileBool) {
                        if (!(input.val() != "")) {
                            input.attr("data-experiencevalidation-msg", "File is required!");
                            return false;
                        }
                        else if (input.val() != "") {
                            var fileName = $('#file')[0].files[0].name;
                            var extension = fileName.substring(fileName.lastIndexOf('.') + 1)
                            if (extension.toLowerCase() == "doc" || extension.toLowerCase() == "docx" || extension.toLowerCase() == "pdf") {
                                return true;
                            }
                            else {
                                input.attr("data-experiencevalidation-msg", "Allowed extensions are '.doc, .docx, pdf'!");
                                return false;
                            }
                        }
                    }
                    return true;
                }
            },
            messages: { //custom rules messages
                experiencevalidation: function (input) {
                    // return the message text
                    return input.attr("data-val-experiencevalidation");
                }
            }
        });
    })(jQuery, kendo);

    function CompareTotalAndRelavantExperience()
    {
        HideAllExperienceValidationMessages();
        var totalYears=$('#TotalExperienceInYear').val();
        var totalMonths=$('#TotalExperienceInMonth').val() ||0;
        var relevantYears= $('#RelevantExperienceInYear').val();
        var relevantMonths= $('#RelevantExperienceInMonth').val() ||0 ;
        var convertedTotalYears=ConvertYearsToMonths(totalYears);
        var convertedRelevantYears=ConvertYearsToMonths(relevantYears);
        var totalExperienceInMonths=+totalMonths + +convertedTotalYears;
        var relevantExperienceInMonths=+relevantMonths + +convertedRelevantYears;
        if(relevantExperienceInMonths>totalExperienceInMonths)
        {
            return true;
        }
        return false;
    }

    function ConvertYearsToMonths (years){
        if(years&&years>0)
        {
            return years*12;
        }
        else{
            return 0;
        }
    }

    function HideAllExperienceValidationMessages()
    {
        $('#RelevantExperienceInMonth_validationMessage').hide();
        $('#RelevantExperienceInYear_validationMessage').hide();
        $('#TotalExperienceInMonth_validationMessage').hide();
        $('#TotalExperienceInYear_validationMessage').hide();
    }
</script>
<style>
    .height {
        height: 250px;
    }
</style>
