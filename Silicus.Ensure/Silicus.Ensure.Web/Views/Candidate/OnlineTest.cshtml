@model Silicus.Ensure.Web.Models.TestSuiteCandidateModel

@{
    ViewBag.Title = "Online Test";
    Layout = "~/Views/Shared/_LayoutCandidate.cshtml";
}
<div class="row">
    <div class="col-sm-12 main-content" id="main">
        <div class="row">
            <div class="col-sm-12">

                <input type="hidden" value="@Model.TestSuiteId" id="TestSuiteId" />
                <input type="hidden" value="@Model.UserTestSuiteId" id="UserTestSuiteId" />
                <input type="hidden" value="@Model.UserId" id="UserId" />
            </div>
        </div>
        <div class="col-sm-12 M-T15">
            <div class="f1 M-B30" style="background:#fff;border-radius:5px;">
                <div id="QuestionDetails">
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="msgMain">Success!</span></h4>
            </div>
            <div class="modal-body">
                <p id="msgContent">Some text in the modal.</p>
            </div>
            <div class="modal-footer">
                <button id="btnModalOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnAddMoreTimeOK();">OK</button>
                <button id="btnSubmitTestOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnSubmitTestOK();">OK</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>

<!-- Modal Submit Test On Time Complete-->
<div class="modal fade" id="myModalTC" role="dialog" onclick="TestDurationComplete();">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="TestDurationComplete();">&times;</button>
                <h4 class="modal-title"><span id="msgMainTC">Warning!</span></h4>
            </div>
            <div class="modal-body">
                <p id="msgContentTC">The test duration is over, thank you for your participation. Further, the recruitment team will contact you for the update.</p>
            </div>
            <div class="modal-footer">
                <button id="btnModalOKTC" type="button" class="btn btn-default" data-dismiss="modal" onclick="TestDurationComplete();">OK</button>
            </div>
        </div>

    </div>
</div>
<div class="loader-overlay" style="display:none;">
    <div class="loader">

    </div>
</div>
@section Sidebar{
    <div class="sidebar">
        <nav class="sidebar-nav">

            <!--mobile menu -->
            <div class="panel-group hidden-lg-up mobileMenu" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#connectMenu">INSTRUCTIONS</a>
                        </h4>
                    </div>
                    <div id="connectMenu" class="panel-collapse collapse">
                        <div class="panel-body">
                            <ul class="nav">
                                <li class="nav-item">
                                    <a class="nav-link" href="welcome.html"> Welcome </a>
                                </li>
                                <li class="nav-item active ">
                                    <a class="nav-link personal" href="index.html"><i class="fa fa-user"></i> Personal Details </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link contact" href="contact.html"><i class="fa fa-mobile"></i> Contact Details  </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link education" href="education.html"><i class="fa fa-graduation-cap"></i> Education Details  </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link emplyoment" href="emplyoment.html"><i class="fa fa-briefcase"></i> Emplyoment Details  </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link family" href="family.html"><i class="fa fa-users"></i> Family Details  </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link upload" href="documentupload.html"><i class="fa fa-cloud"></i> Upload Doucments  </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link final" href="finalStatus.html"> <i class="fa fa-th-list"></i> Final Status  </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#LearnMenu">OBJECTIVE TEST</a>
                        </h4>
                    </div>
                    <div id="LearnMenu" class="panel-collapse collapse">
                        <div class="panel-body">
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#supportMenu">PRACTICAL TEST</a>
                        </h4>
                    </div>
                    <div id="supportMenu" class="panel-collapse collapse">
                        <div class="panel-body">
                        </div>
                    </div>
                </div>
            </div>
            <!--mobile menu end here-->
            <div class="menu-btn-sidebar" onclick="customSidebarToggle();"><i class="fa fa-bars" aria-hidden="true"></i></div>
            <ul class="nav hidden-md-down">
                <div id="objective-test-side-bar">
                    @*<li class="nav-item nav-heading">
                        <a class="nav-link fontBold" href="#">Objective Questions</a>
                    </li>*@
                    <li class="nav-item">
                        <a class="nav-link personal fontBold" href="#"><i class="fa fa-folder-open" aria-hidden="true"></i> OBJECTIVE QUESTIONS </a>
                    </li>
                    <li class="nav-item">
                        <ol class="questions">
                            @if (@Model.NavigationDetails != null && @Model.NavigationDetails.Objective != null && @Model.NavigationDetails.Objective.Count > 0)
                            {
                                foreach (var question in Model.NavigationDetails.Objective)
                                {
                                    <li>
                                        <a class="nav-link questionView contact QuestionCheckbox @QuestionColor(question)" id="@question.QuestionId" href="#"> @Html.Raw(@question.QuestionDescription)</a>
                                    </li>
                                }
                            }
                        </ol>
                    </li>
                </div>
                <div id="practical-test-side-bar">
                    @*<li class="nav-item nav-heading">
                        <a class="nav-link fontBold" href="#">Practical Questions</a>
                    </li>*@
                    <li class="nav-item">
                        <a class="nav-link personal fontBold" href="#"><i class="fa fa-folder-open" aria-hidden="true"></i> PRACTICAL QUESTIONS </a>
                    </li>
                    <li class="nav-item">
                        <ol class="questions">
                            @if (@Model.NavigationDetails != null && @Model.NavigationDetails.Practical != null && @Model.NavigationDetails.Practical.Count > 0)
                            {
                                foreach (var question in Model.NavigationDetails.Practical)
                                {
                                    <li>
                                        <a class="nav-link questionView contact QuestionCheckbox @QuestionColor(question)" id="@question.QuestionId" href="#">@Html.Raw(@question.QuestionDescription)</a>
                                    </li>
                                }
                            }
                        </ol>
                    </li>
                </div>
            </ul>

        </nav>
    </div>


}


@section CandidateDetails {
    @Html.Partial("_testSuiteAndCandidateDetails", Model)
}

@section ReadOnlyInstructions {
    @Html.Partial("~/Views/Candidate/ReadOnlyInstructions.cshtml")
}

@helper QuestionColor(Silicus.Ensure.Models.Test.QuestionNavigationBasics question)
{
if (question.IsAnswered)
{
        @("is-answered");
}
else if (question.IsViewedOnly)
{
        @("is-viewed-only");
}
else
{
        @("is-not-visited");
}

}



<script>
    var clock;
    var totalTime;
    function updateQuestionLinkColorClass(questionLinkId, isAnswred, isViewedOnly) {
        var className;
        if (isAnswred) {
            className = "is-answered";
        } else if (isViewedOnly == true) {
            className = "is-viewed-only";
        } else {
            className = "is-not-visited";
        }
        $(questionLinkId).removeClass('is-answered');
        $(questionLinkId).removeClass('is-viewed-only');
        $(questionLinkId).removeClass('is-not-visited');

        $(questionLinkId).addClass(className);
    }

    $(document).ready(function () {
        $('.breadcrumb-item.active').removeClass('active');
        $('#objective-test').addClass('active');
        $('#practical-test-side-bar').hide();
        $('#objective-test>a,#practical-test>a').removeClass('disabled');

        $("#frmTestresult").kendoValidator();
        // Hide Submit button of popup. Show when to want submit test.
        $("#btnSubmitTestOK").hide();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var url = "/Candidate/LoadQuestion?userTestSuiteId=";
        $('#QuestionDetails').load(url + userTestSuiteId);

        // Hide "Add More Time" if used 2 times
        var timerCnt = $("#TimerIncCount").val();
        if (timerCnt >= 2)
            $("#btnAddMoreTime").hide();
        $('.QuestionCheckbox').on('click', QuestionCheckboxClicked);
    });

    function QuestionCheckboxClicked(event) {
        if (!$(this).parent().hasClass('active')) {
            var questionId = $(this).attr('id');
            UpdateCurrentQuestionAndLoadNewOne(questionId);
        }
    }

    function UpdateCurrentQuestionAndLoadNewOne(questionId) {
        UpdateTimeDB();
        var questionNavigationDetails = GetCurrentQuestionStatus();
        var activeLinkId;

        if (questionNavigationDetails.Questiontype == 1) {
            activeLinkId = $('#objective-test-side-bar .active>a').attr('id');
        } else if (questionNavigationDetails.Questiontype == 2) {
            activeLinkId = $('#practical-test-side-bar .active>a').attr('id');
        }

        updateQuestionLinkColorClass('#' + activeLinkId, questionNavigationDetails.IsAnswered, questionNavigationDetails.IsViewed);
        MarkAsViewed(questionId);
        GetQuestionDetails(questionId);
    }

    function MarkAsViewed(questionId) {
        if (questionId) {
            var input = '#NavigationSection ' + '#' + questionId;
            if (input) {
                if (!($(input).hasClass('Viewed') || $(input).hasClass('Answered'))) {
                    $(input).addClass('Viewed');
                }
            }
        }
    }
    function GetCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsAnswered = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsAnswered = $("#QuestionDetails").find(".radio input:checked,.checkbox input:checked").length > 0 ? true : false;
        }
        else {
            IsAnswered = $("#PracticalAnswer").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsAnswered: IsAnswered, IsViewed: IsViewed };
        return result;
    }


    function UpdateTimeDB() {
        var time = $.countdown.periodsToSeconds($('#counter').countdown('getTimes'));
        if (time / 60 != 0) {
            var userTestSuiteId = $("#UserTestSuiteId").val();
            $.ajax({
                url: '/Candidate/UpdateTimeCounter',
                dataType: "json",
                type: "POST",
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify({ time: time, userTestSuiteId: userTestSuiteId }),
                success: function () {
                },
                error: function () {
                }
            });
        }
    }

    function OnNext(e) {
        var questionId = $('#btnNext').attr('data-id');
        UpdateCurrentQuestionAndLoadNewOne(questionId);
        return false;
    }

    function OnPrevious() {
        var questionId = $('#btnPrevious').attr('data-id');
        UpdateCurrentQuestionAndLoadNewOne(questionId);
        return false;
    }

    function GetQuestionDetails(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var questionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Answer: answer };
        $('#QuestionDetails').load('/Candidate/GetQuestionDetails', questionDetails);
    }

    function UpdateAndGetQuestionReview(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var candidateId = $("#UserId").val();
        var comment = $("#Comment").val();
        var marks = $("#ReviwerMark").val();
        var reviewerQuestionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Comment: comment, Marks: marks };
        $('#QuestionDetails').load('/Reviewer/UpdateReviewAndGetQuestionDetails', reviewerQuestionDetails);
    }


    function OnSubmitTest() {
        var msg = "Are you sure, you want to Submit the Test? Once you submit the Test, you cannot revisit to view the Questions and their Answers.";
        swal({
            title: "Warning!",
            text: msg,
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            closeOnConfirm: true,
            closeOnCancel: true
        },
    function (isConfirm) {
        if (isConfirm) {
            showCustomLoader();
            OnSubmitTestOK();
            var text = "The test is submitted , thank you for your participation. Further, the recruitment team will contact you for the update";
            swal("Submitted!", "Now you have extra 10 mins.", "success");
        }
    });
    }

    function OnSubmitTestOK() {
        showCustomLoader();    
        var answer = GetAnswer();
        var testSuiteId = $("#TestSuiteId").val();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var userId = $("#UserId").val();
        window.onbeforeunload = null;
        
        window.location.href = '/Candidate/OnSubmitTest?testSuiteId=' + testSuiteId + '&userTestSuiteId=' + userTestSuiteId + '&userTestDetailId=' + userTestDetailId + '&userId=' + userId + '&answer=' + answer;
    }

    function getCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsAnswered = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsAnswered = $(".radio input:checked").length > 0 ? true : false;
        }
        else {
            IsAnswered = $("#PracticalAnswer").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsAnswered: IsAnswered, IsViewed: IsViewed };
        return result;
    }



    function toggleFullScreen() {
        if (!document.fullscreenElement &&    // alternative standard method
            !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {  // current working methods
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) {
                document.documentElement.msRequestFullscreen();
            } else if (document.documentElement.mozRequestFullScreen) {
                document.documentElement.mozRequestFullScreen();
            } else if (document.documentElement.webkitRequestFullscreen) {
                document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
        }
    }




    fullScreen();

    function fullScreen()
    {
        swal({
            title: "FullScreen Mode",
            text: "You are navigating to Fullscreen.",
            type: "warning",
            showCancelButton: false,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Ok",
            cancelButtonText: "No",
            closeOnConfirm: true,
            closeOnCancel: false   
        },
 function (isConfirm) {
     if (isConfirm) {
         toggleFullScreen();
         startCounter();
         isCounterStarted = true;
     }
 });
    }

    $('#btnNext').on('click', function () {
        toggleFullScreen();
    });


    $(document).bind('keydown', function (e) {
        if (e.keyCode === 27) { // Escape key
            e.preventDefault();
        }
    });



    window.onbeforeunload = function () {
        return "Do you really want to close?";
    };
    $('.confirm').click(function () {
        window.onbeforeunload = null;
    });


    function refreshAnsweredQuestionCount() {
        var answeredObjectiveQuestions = parseInt($('#objective-test-side-bar .is-answered').length);
        var answeredPracticalQuestions = parseInt($('#practical-test-side-bar .is-answered').length);
        var totalObjectiveQuestions = parseInt($('#objective-test-side-bar .QuestionCheckbox').length);
        var totalPracticalQuestions = parseInt($('#practical-test-side-bar .QuestionCheckbox').length);
        if (answeredObjectiveQuestions != NaN && answeredPracticalQuestions != NaN && totalObjectiveQuestions != NaN && totalPracticalQuestions != NaN) {
            $('#answeredObjectiveQuestionsCount').text(answeredObjectiveQuestions);
            $('#answeredPracticalQuestionsCount').text(answeredPracticalQuestions);
            $('#notAnsweredObjectiveQuestionsCount').text(totalObjectiveQuestions - answeredObjectiveQuestions);
            $('#notAnsweredPracticalQuestionsCount').text(totalPracticalQuestions - answeredPracticalQuestions);
        }
    }



</script>
