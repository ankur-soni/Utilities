@model Silicus.Ensure.Web.Models.UserViewModel
@using Silicus.Ensure.Models.Constants;
@using Kendo.Mvc.UI;
@{
    ViewBag.Title = "CandidateAdd";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row white-bg header-row">
    <nav class="" role="navigation" style="margin-bottom: 0">
        <div class="navbar-header">
            <a class="navbar-minimalize minimalize-styl-2 btn btn-primary" id="menu-toggle" style="margin-left:15px;border-radius:0px;" href="#"><i class="fa fa-bars"></i> </a>
        </div>
    </nav>
    @if (Model.UserId != 0)
    {
        <div class="col-lg-10 col-md-10 col-sm-10">
            <h1 class="dashboard-name">Edit Candidate</h1>
        </div>
        <script>
            $(document).ready(function()
            {
                SetNavigationMenuActive('Candidates');
            })
        </script>
    }
    else
    {
        <div class="col-lg-10 col-md-10 col-sm-10">
            <h1 class="dashboard-name">Add Candidate</h1>
        </div>
        <script>
            $(document).ready(function()
            {
                SetNavigationMenuActive('Candidates');
                $('#file').css('display','block');
                fileBool=true;
            })
        </script>
    }

</div>

<div class="row">
    <div class="col-sm-12">
        <div class="box M-T15 M-B60">
            <div class="f1">
                <div class="main-content">
                    @using (Html.BeginForm("CandidateSave", "User", FormMethod.Post, new { id = "frmSearchAllNdc", EncType = "multipart/form-data" }))
                    {
                        <input type="hidden" id="Role" name="Role" value="@Silicus.Ensure.Models.Constants.RoleName.Candidate.ToString()" />
                        @Html.HiddenFor(m => m.UserId)
                        <div class="fluid mt20">
                            <div class="row" style="margin-bottom:10px!important">
                                @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
                                {
                                    <div class="alert alert-success" id="messageDiv">
                                        <strong>Error!</strong> <span id="messageContent">@Model.ErrorMessage</span>
                                    </div>
                                }
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.FirstName) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.FirstName)
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.MiddleName)
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.MiddleName, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.LastName) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.LastName)
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.Position) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="col-md-8 col-sm-10 col-xs-10" style="padding-left:0;padding-right:0;height:30px;">
                                            @(Html.Kendo().DropDownListFor(model => model.Position)
                            .OptionLabel("--Select--")
                            .BindTo(Model.PositionList)
                            .DataTextField("PositionName")
                            .DataValueField("PositionName")
                            .Value(Model.Position)
                            .HtmlAttributes(new { style = "width: 100%;border-color: #c5c5c5;" })
                                            )
                                            @Html.ValidationMessageFor(m => m.Position)
                                        </div>
                                        <div class="col-md-4 col-sm-2 col-xs-2">
                                            <a href="#" class="font-Bold themeColorBlue btn btn-primary" onclick="AddPosition();"><span style="font-size: 12px;" class="glyphicon glyphicon-plus"></span></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.RequisitionId) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.RequisitionId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.RequisitionId)
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.Gender) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @(Html.Kendo().DropDownListFor(m => m.Gender)
                        .Name("Gender")
                        .DataTextField("Text")
                        .DataValueField("Value")
                            .BindTo(new List<SelectListItem>
                            () {
                            new SelectListItem(){
                            Text="--Select--",
                            Value="--Select--"
                            },
                            new SelectListItem(){
                            Text="Male",
                            Value="Male"
                            },
                            new SelectListItem(){
                            Text="Female",
                            Value="Female"
                            }
                            }).HtmlAttributes(new { style = "width: 100%;" }))
                                        @Html.ValidationMessageFor(m => m.Gender)
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.Email) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Email)
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.CurrentLocation) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.CurrentLocation, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CurrentLocation)
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.DOB) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        <input type="text" style="width:100%;" name="DOB" id="DOB" value="@if (Model.UserId != 0)
                                                                                         { @Model.DOB.ToShortDateString().Replace("-","/")}" />
                                        @Html.ValidationMessageFor(m => m.DOB)
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.ContactNumber) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.ContactNumber, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ContactNumber)
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.ClientName) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.ClientName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ClientName)
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.Technology) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.Technology, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Technology)
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">

                                    <div class="col-md-6">
                                        <lable>Total experience <b style="color:Red;">*</b></lable>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="col-md-6 col-sm-6 col-xs-6" style="padding-left:0">
                                            @(Html.Kendo().DropDownListFor(m => m.TotalExperienceInYear)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo(EnumHelper.GetSelectList((typeof(Year)))
                        .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                        .HtmlAttributes(new { style = "width: 100%;" })
                        .OptionLabel("Year")
                                            )
                                            @Html.ValidationMessageFor(m => m.TotalExperienceInYear)
                                        </div>
                                        <div class="col-md-6 col-sm-6 col-xs-6" style="padding-right:0">
                                            @(Html.Kendo().DropDownListFor(m => m.TotalExperienceInMonth)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo(EnumHelper.GetSelectList((typeof(Month)))
                        .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                        .HtmlAttributes(new { style = "width: 100%" })
                        .OptionLabel("Months")
                                            )
                                            @Html.ValidationMessageFor(m => m.TotalExperienceInMonth)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        <lable>Relevant experience <b style="color:Red;">*</b></lable>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="col-md-6 col-sm-6 col-xs-6" style="padding-left:0">
                                            @(Html.Kendo().DropDownListFor(m => m.RelevantExperienceInYear)
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .BindTo(EnumHelper.GetSelectList((typeof(Year)))
                            .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                            .HtmlAttributes(new { style = "width: 100%" })
                            .OptionLabel("Year")
                                            )
                                            @Html.ValidationMessageFor(m => m.RelevantExperienceInYear)
                                        </div>
                                        <div class="col-md-6 col-sm-6 col-xs-6" style="padding-right:0">
                                            @(Html.Kendo().DropDownListFor(m => m.RelevantExperienceInMonth)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo(EnumHelper.GetSelectList((typeof(Month)))
                        .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                        .HtmlAttributes(new { style = "width: 100%" })
                        .OptionLabel("Months")
                                            )
                                            @Html.ValidationMessageFor(m => m.RelevantExperienceInMonth)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.CurrentCompany) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.CurrentCompany, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CurrentCompany)
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.CurrentTitle) <b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.CurrentTitle, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CurrentTitle)
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom:10px!important">
                                <div class="col-md-6">
                                    <div class="col-md-6">
                                        Upload Resume<b style="color:Red;">*</b>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="demo-section k-content">
                                            <input name="files" id="file" style="display:none" type="file" />
                                        </div>
                                        @if (!string.IsNullOrEmpty(Model.ResumeName))
                                        {
                                            <div id="uploadFileLink" class="postuploadedfilesholder clearfix">
                                                <div class="fileupload">
                                                    <a href="@Html.Raw(Url.Content(Model.ResumePath))" targ target="_blank">@Html.Raw(Model.ResumeName)</a>
                                                    <span class="deleteupload" title="Delete"><a onclick="DeleteF()">x</a></span>
                                                </div>
                                            </div>
                                            <script type="text/javascript">
                                                function DeleteF() {
                                                    fileBool=true;
                                                    $('#file').css('display','block')
                                                    $("#uploadFileLink").html("");
                                                    $("#ResumeName").val("");
                                                }
                                            </script>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="margin-bottom:10px!important">
                            <div class="col-sm-12"></div>
                            <div class="col-sm-12">
                                <div class="pull-right btn-nav">
                                    @(Html.Kendo().Button()
                                     .Name("btnSave")
                                    .HtmlAttributes(new { type = "submit", @style="width:58px;" })
                                    .Content("Save"))
                                    @(Html.Kendo().Button()
                                                .Name("btnCancel")
                        .HtmlAttributes(new { type = "button", @class = "btn-secondary" })
                                .Content("Cancel")
                                .Events(ev => ev.Click("onCancelClick")))
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addPositionPopup" role="dialog">
    <form id="postionForm">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><span>Add tag</span></h4>
                </div>
                <div class="modal-body">

                    @Html.Partial("~/Views/Shared/EditorTemplates/PostionEditorTemplete.cshtml", new Silicus.Ensure.Web.Models.PositionViewModel())
                </div>
                <div class="modal-footer">
                    <button type="button" style="width:70px;"  onclick="savePostion()" class="btn btn-default">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>
    </form>
</div>
<script>


    var fileBool=false;
    $(document).ready(function () {
        $('#messageDiv').fadeOut(5000);
    });
    $(document).ready(function () {

        $("#DOB").kendoDatePicker({
            format: "dd/MM/yyyy"
        });
    });



    function savePostion()
    {
        if($("#postionForm").valid())
        {
            $.ajax({
                type: "POST",
                url: '/Positions/PositionSave',
                data: $('#postionForm').serialize(),
                success: function (returndata) {
                    $("#addPositionPopup").modal('hide');
                    var $PositionDrpSelect=$('#Position').data('kendoDropDownList');
                    var multidata=$PositionDrpSelect.dataSource.data();
                    multidata.unshift({ PositionName: returndata.PositionName, PositionName: returndata.PositionName});
                    $PositionDrpSelect.value(returndata.PositionName);
                    $PositionDrpSelect.trigger('change');
                    $("#postionForm").trigger("reset");
                }
            });
        }
        else
        {
            $('#postionForm').submit();
        }
    }

    function AddPosition()
    {
        $("#postionForm").kendoValidator({
            rules: {
                tagNamevalidation: function (input, params) {
                    if (input.is("[name='PositionName']") && input.val() != "") {
                        var bool=isTagNameAvailable("", input.val());
                        if(!bool)
                        {
                            input.attr("data-tagNamevalidation-msg", "Position name already exist !");
                            return false;
                        }
                    }

                    return true;
                }
            }
        });
        $('#PositionName').val('');
        $("#addPositionPopup").modal('show');
    }

    function isTagNameAvailable(existingName,updatedName)
    {
        var isAvailable = true;
        if (existingName != updatedName) {
            $.ajax({
                type: "POST",
                url: '/Positions/IsDuplicatePositionName',
                async: false,
                data: { PositionName: updatedName },
                success: function (returndata) {
                    if (returndata == true) {
                        isAvailable = true;
                    }
                    else {
                        isAvailable = false;
                    }
                }
            });
        }
        return isAvailable;
    }

    $(function () {
        $("form").kendoValidator();
        $('.k-invalid').css('margin-bottom','0!important');
    });
    function onCancelClick() {
        window.location = '@Url.Action("Candidates", "Admin")';
    }
    function GetNewDate() {
        var date=new Date();
        var year = date.getFullYear();
        var month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;
        var day = date.getDate().toString();
        day = day.length > 1 ? day : '0' + day;
        return day + '/' +month  + '/' + year;
    }
    //register custom validation rules
    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: { // custom rules
                experiencevalidation: function (input, params) {
                    if (input.is("[name='DOB']")) {
                        if (!(input.val() != "")) {
                            input.attr("data-experiencevalidation-msg", "Date of birth is required!");
                            return false;
                        }
                        else if(input.val() != "")
                        {
                            var today = new Date();
                            var currentYear = today.getFullYear();
                            try{
                                var parts = input.val().split("/");
                                var timestamp= new Date(parts[1]+"/"+parts[0]+"/"+parts[2]);
                                if (isNaN(timestamp)==true||parts[2]<1900||parts[2]>=currentYear)
                                {
                                    input.attr("data-experiencevalidation-msg", "Invalid Date");
                                    return false;
                                }
                            }
                            catch(e){
                                input.attr("data-experiencevalidation-msg", "Invalid Date");
                                return false;
                            }
                        }
                        else if(input.val() != "")
                        {
                            if( $('#DOB').val()>GetNewDate())
                            {
                                input.attr("data-experiencevalidation-msg", "Date of birth can not be greater than today!");
                                return false;
                            }
                        }
                    }
                    if (input.is("[name='Position']")) {
                        if ((input.val() != "" && input.val() == "--Select--")) {
                            input.attr("data-experiencevalidation-msg", "Position is required!");
                            $('span[aria-owns="Position_listbox"]').css('border','1px solid red');
                            return false;
                        }
                        else
                        {
                            $('span[aria-owns="Position_listbox"]').css('border','none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='Gender']")) {
                        if ((input.val() != "" && input.val() == "--Select--")) {
                            input.attr("data-experiencevalidation-msg", "Gender is required!");
                            $('span[aria-owns="Gender_listbox"]').css('border','1px solid red');
                            return false;
                        }
                        else
                        {
                            $('span[aria-owns="Gender_listbox"]').css('border','none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='RelevantExperienceInYear']")) {
                        if (input.val() == "") {
                            input.attr("data-experiencevalidation-msg", "Relevant experience in year is required!");
                            $('span[aria-owns="RelevantExperienceInYear_listbox"]').css('border','1px solid red');
                            return false;
                        }
                        else if (input.val() != ""&& input.val() > $('#TotalExperienceInYear').val()){

                            input.attr("data-experiencevalidation-msg", "Relevant experience in year can not be greater than total experience in year!");
                            return false;

                        }
                        else
                        {
                            $('span[aria-owns="RelevantExperienceInYear_listbox"]').css('border','none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[name='RelevantExperienceInMonth']")) {
                        if (input.val() == "" ) {
                            input.attr("data-experiencevalidation-msg", "Relevant experience in month is required!");
                            $('span[aria-owns="RelevantExperienceInMonth_listbox"]').css('border','1px solid red');
                            return false;
                        }
                        else if (input.val() != ""&& ($('#RelevantExperienceInYear').val() == $('#TotalExperienceInYear').val()||$('#RelevantExperienceInYear').val() < $('#TotalExperienceInYear').val()) && input.val() > $('#TotalExperienceInMonth').val()){

                            input.attr("data-experiencevalidation-msg", "Relevant experience can not be greater than total experience!");
                            return false;

                        }
                        else
                        {
                            $('span[aria-owns="RelevantExperienceInMonth_listbox"]').css('border','none ');
                            input.attr("data-experiencevalidation-msg", "");
                        }
                    }
                    if (input.is("[data-val-remote]") && input.val() != "") {
                        var remoteURL = input.attr("data-val-remote-url");
                        if (!checkMail(input.val(), remoteURL)) {
                            input.attr("data-experiencevalidation-msg", "Email is already exist!");
                            return false;
                        }
                    }
                    if (input.is("[id='file']")&&fileBool) {
                        if (!(input.val() != "")) {
                            input.attr("data-experiencevalidation-msg", "File is required!");
                            return false;
                        }
                        else if(input.val() != "")
                        {
                            var fileName=$('#file')[0].files[0].name;
                            var extension=fileName.substring(fileName.lastIndexOf('.') + 1)
                            if(extension.toLowerCase()== "doc"||extension.toLowerCase() == "docx"||extension.toLowerCase() == "pdf")
                            {
                                return true;
                            }
                            else
                            {
                                input.attr("data-experiencevalidation-msg", "Allowed extensions are '.doc, .docx, pdf'!");
                                return false;
                            }
                        }
                    }
                    return true;
                }
            },
            messages: { //custom rules messages
                experiencevalidation: function (input) {
                    // return the message text
                    return input.attr("data-val-experiencevalidation");
                }
            }
        });
    })(jQuery, kendo);

    function checkMail(email,remoteURL)
    {
        var valid;
        $.ajax({
            async: false,
            type: "POST",
            url: remoteURL,
            data: JSON.stringify({ 'Email': email,'UserId':@Model.UserId }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                valid = data;
            }
        });
        return valid;
    }
</script>
<style>
    .height {
        height: 250px;
    }
</style>
