@model Silicus.EncourageWithAzureAd.Web.Models.NominationViewModel
@{
    ViewBag.Title = "AddNomination";
}

<div class="row white-bg header-row">
    <nav class="" role="navigation" style="margin-bottom: 0">
        <div class="navbar-header">
            <a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="#"><i class="fa fa-bars"></i> </a>
        </div>
    </nav>
    <div class="col-lg-11 col-md-11 col-sm-11">
        <h1 class="header-name">Add Nomination</h1>
    </div>
</div>

<div class="">
    <div class="row">
        <div class="col-sm-12">
            <div class="box M-T15 M-B60">
                <div class="f1">
                    @using (Html.BeginForm("AddNomination", "Nomination", FormMethod.Post, new { id = "addNominationForm" }))
                    {
                        <div class="wizard- M-B15">
                            <div class="f1-steps" id="nomination-steps">
                                <div class="f1-progress">
                                    <div class="f1-progress-line" data-now-value="25" data-number-of-steps="4" style="width:25%;"></div>
                                </div>
                                <div class="f1-step active" step="1">
                                    <div class="f1-step-icon" style="cursor:pointer;"><strong class="ico-num">1</strong></div>

                                    <p>Nomination Category</p>
                                </div>
                                <div class="f1-step" step="2">

                                    <div class="f1-step-icon" style="cursor:pointer;"><strong class="ico-num">2</strong></div>

                                    <p>Employee</p>
                                </div>
                                <div class="f1-step" step="3">

                                    <div class="f1-step-icon" style="cursor:pointer;"><strong class="ico-num">3</strong></div>
                                    <p>Comments</p>
                                </div>
                                <div class="f1-step" step="4">

                                    <div class="f1-step-icon" style="cursor:pointer;"><strong class="ico-num">4</strong></div>
                                    <p>Criteria & Ratings</p>
                                </div>
                            </div>
                        </div>
                        <div id="nominationPeriodText">
                            <span class="themeColorBlue" id="somNominationPeriod" style="display:none;font-weight:bold;">Nomination for SOM-@(Model.SomCustomDate.ToString("MMM-yyyy"))</span>
                            <span class="themeColorBlue" id="pinnacleNominationPeriod" style="display:none;font-weight:bold;">Nomination for Pinnacle-@(Model.PinnacleCustomDate.Year)</span>
                        </div>
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="wizard-box" id="nominationCategory" nomination-step="1">
                            <div class="row">
                                <div class="col-lg-3 col-md-4 col-sm-5">
                                    <div class="form-group">
                                        @Html.Label("Nomination Category", htmlAttributes: new { @class = "control-label" })<span class="asterisk">*</span>
                                        @Html.DropDownListFor(model => model.AwardId, Model.ListOfAwards as SelectList, "Select", new { @class = "form-control", id = "Award" })
                                        @Html.ValidationMessageFor(model => model.AwardId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-actions pull-right">
                                    <button type="button" class="btn btn-success btn-nav btn-next" onclick="moveToNominationStep(2, true);" id="nextButton">Next&nbsp;&nbsp;<i class="fa fa-chevron-circle-right" aria-hidden="true"></i></button>
                                </div>
                            </div>
                        </div>
                        <div class="wizard-box" id="project-Dept-Resource" style="display:none;" nomination-step="2">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group M-B15">
                                        @Html.Label("Employee From", htmlAttributes: new { @class = "control-label requiredfeild" })
                                        <div class="radio-list">
                                            <label class="radio-inline p-0" style="padding-left:0px;">
                                                <div class="radio radio-info">
                                                    @*@Html.RadioButtonFor(model => model.SelectResourcesBy, "Project", new { id = "ProjectRadioButton", value = "Project" })Project*@
                                                    <input type="radio" name="SelectResourcesBy" id="ProjectRadioButton" value="Project">
                                                    <label for="radio1">Project</label>
                                                </div>
                                            </label>
                                            <label class="radio-inline">
                                                <div class="radio radio-info">
                                                    @*@Html.RadioButtonFor(model => model.SelectResourcesBy, "Department", new { id = "DepartmentRadioButton", value = "Department" })Department*@
                                                    <input type="radio" name="SelectResourcesBy" id="DepartmentRadioButton" value="Department">
                                                    <label for="radio1">Department</label>
                                                </div>
                                            </label>
                                            <label class="radio-inline">
                                                <div class="radio radio-info">
                                                    <input type="radio" name="SelectResourcesBy" id="OtherRadioButton" value="Other">
                                                    <label for="radio1">Other</label>
                                                </div>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <input type="hidden" name=ManagerId id="ManagerId" value="@Model.ManagerId">
                            @{ var projectMessage = "There are no projects under you."; }
                            @{ var departmentMessage = "There are no departments under you.";}
                            <div class="row">
                                <div class="col-lg-3 col-md-4 col-sm-5">
                                    <div class="form-group" id="projectInput">
                                        @Html.Label("Project", htmlAttributes: new { @class = "control-label requiredfeild" })
                                        <div>
                                            @if (Model.ProjectsUnderCurrentUser != null)
                                            {
                                                @Html.DropDownListFor(model => model.ProjectID, Model.ProjectsUnderCurrentUser as SelectList, "Select", new { @class = "form-control", id = "SelectedProject" })
                                                @*<span class="help-block themeColorBlue"> Select your Project </span>*@
                                                @Html.ValidationMessageFor(model => model.ProjectID, "", new { @class = "text-danger" })
                                            }
                                            else
                                            {
                                                <span style="color:red">@projectMessage</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row" id="departmentInput">
                                <div class="col-lg-3 col-md-4 col-sm-5">
                                    <div class="form-group">
                                        @Html.Label("Department", htmlAttributes: new { @class = "control-label requiredfeild" })
                                        <div>
                                            @if (Model.DepartmentsUnderCurrentUser != null)
                                            {
                                                @Html.DropDownListFor(model => model.DepartmentId, Model.DepartmentsUnderCurrentUser as SelectList, "Select", new { @class = "form-control", id = "SelectedDepartment" })
                                                @*<span class="help-block themeColorBlue"> Select your Department </span>*@
                                                @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                                            }
                                            else
                                            {
                                                <span style="color:red">@departmentMessage</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-3 col-md-4 col-sm-5">
                                    <div class="form-group" id="otherInput">
                                        @Html.Label("Reason", htmlAttributes: new { @class = "control-label requiredfeild" })
                                        <div>
                                            @Html.TextAreaFor(model => model.OtherNominationReason, new { @class = "form-control", @id = "otherReason", maxlength = 500 })
                                            @Html.ValidationMessageFor(model => model.OtherNominationReason, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-3 col-md-4 col-sm-5" id="employeeInput">
                                    <div class="form-group">
                                        @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label requiredfeild" })
                                        <div>
                                            @Html.DropDownListFor(model => model.ResourceId, Model.Resources as SelectList, "Select", new { @class = "form-control select2-dd", id = "Resources" })
                                            @Html.ValidationMessageFor(model => model.ResourceId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-actions pull-left">
                                    <button type="button" class="btn btn-success btn-nav btn-prev" onclick="moveToNominationStep(1, false);"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i>&nbsp;&nbsp;Prev</button>
                                </div>
                                <div class="form-actions pull-right">
                                    <button type="button" class="btn btn-success btn-nav btn-next" onclick="moveToNominationStep(3, true);" id="nextButton">Next &nbsp;&nbsp;<i class="fa fa-chevron-circle-right" aria-hidden="true"></i></button>
                                </div>
                            </div>
                        </div>
                        <div class="wizard-box" style="display:none;" id="comments" nomination-step="3">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="row">
                                        <div class="form-group">
                                            @Html.Label("Comment", htmlAttributes: new { @class = "col-md-12 control-label requiredfeild" })
                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    @Html.TextAreaFor(model => model.MainComment, new { @class = "form-control", placeholder = "Maximum 500 words", id = "managerComment", name = "defaultconfig", rows = "5", maxlength = 500 })
                                                    @Html.ValidationMessageFor(model => model.MainComment, "", new { @class = "text-danger", id = "managerCommentValidationmessage" })
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-actions pull-left">
                                    <button type="button" class="btn btn-success btn-nav" onclick="moveToNominationStep(2, false);"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i>&nbsp;&nbsp;Prev</button>
                                </div>
                                <div class="form-actions pull-right">
                                    <button type="button" class="btn btn-success btn-nav btn-next" onclick="moveToNominationStep(4, true);" id="nextButton">Next&nbsp;&nbsp;<i class="fa fa-chevron-circle-right" aria-hidden="true"></i></button>
                                </div>
                            </div>
                        </div>
                        <div id="criteriaContainer" style="display:none;" nomination-step="4">
                            <div class="row M-T15" id="disclaimer">
                                <div class="col-sm-12">
                                    <div class="alert alert-danger">
                                        <strong>Disclaimer :</strong> Please select the rating and weightage for the criteria your candidate fits in. Quote the instances of work done by nominee in the ‘Manager Comments’ section to justify the given rating and weightage for that criterion.
                                    </div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="alert alert-danger" style="display:none">
                                        @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger", id = "criterisCommentValidationmessage" })
                                    </div>
                                </div>
                            </div>

                            <div id="criteria-rating">
                            </div>

                            <div class="row M-T15">
                                <div class="form-actions pull-left">
                                    <button type="button" class="btn btn-success btn-nav" onclick="moveToNominationStep(3,false);"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i>&nbsp;&nbsp;Prev</button>
                                </div>
                                <div class="pull-right btn-nav">
                                    <input type="button" name="submit" value="Save Draft" id="savebutton" class="btn btn-primary" onclick="return checkValidationOnSaveDraft();" />
                                    <input type="button" name="submit" value="Submit" id="submitButton" class="btn btn-primary" onclick="return checkValidationOnSubmit();" />
                                    <input type="button" value="Cancel" class="btn btn-primary" onclick="location.href='@Url.Action("Index", "Home")'" />
                                </div>
                            </div>

                        </div>
                                }
                </div>
                <div class="clearfix"></div>
            </div>
        </div>
    </div>
    @Html.Hidden("showDataLoseWarning", false)
</div>

<script src="~/js/plugins/validate/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/js/bootstrap-maxlength.js"></script>
<script src="~/js/plugins/metisMenu/jquery.metisMenu.js"></script>
<script src="~/js/plugins/slimscroll/jquery.slimscroll.min.js"></script>

<link href="~/Css/select2.css" rel="stylesheet" />
<script src="~/js/select2.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        $('#ProjectRadioButton').prop('checked', true);
        $("#departmentInput").hide();
        $("#otherInput").hide();
        $("#label").hide();
        $('#Award option').css('color:red');

        $("#Resources").select2().on("change", function (e) {
            $(this).valid(); //jquery validation script validate on change
        });
    });

    $("#OtherRadioButton").change(function () {
        $("#projectInput").hide();
        $("#departmentInput").hide();
        $("#otherInput").show();

        var _urlGetAllResourcesForOtherReason = '@Url.Action("GetAllResourcesForOtherReason", "Nomination")';
        var selectedAward = +$("#Award").val();
        var status = $("#OtherRadioButton").prop("checked");
        $('#otherReason').val('');
        $('#Resources').empty();
        $('#Resources').append($("<option selected></option>").val(null).html("Select"));
        showCustomLoader();
        $.ajax({
            type: 'GET',
            url: _urlGetAllResourcesForOtherReason,
            data: { awardId: selectedAward },
            success: function (data) {
                var ab = data;
                for (var key in data) {
                    $('#Resources').append($("<option></option>").val(data[key].ID).html(data[key].DisplayName));
                }
                hideCustomLoader();
            },
            error: function (error) {
                hideCustomLoader();
                console.log(error);
            }
        });

        $("#ResourceId").keyup(function () {
            var searchData = $(this).val();
            $("#allResources span").css("display", "none");
            if (searchData) {
                var allEmployees = $("#allResources");
                var $found = allEmployees.find("span:contains(" + searchData.toUpperCase() + ")").each(function () { $(this).css("display", "block") });
            }
        });
    });

    $("#ProjectRadioButton").change
        (
         function () {
             $("#departmentInput").hide();
             $("#otherInput").hide();
             $("#employeeInputForOther").hide();
             $("#SelectedProject").prop('selectedIndex', 0);
             $('#Resources').empty();
             $('#Resources').append($("<option selected></option>").val(null).html("Select"));
             $("#projectInput").show();

             $("#ManagerId").val('@Model.ManagerId');
         });

    $("#DepartmentRadioButton").change
        (
          function () {
              $("#projectInput").hide();
              $("#otherInput").hide();
              $("#employeeInputForOther").hide();
              $("#SelectedDepartment").prop('selectedIndex', 0);
              $('#Resources').empty();
              $('#Resources').append($("<option selected></option>").val(null).html("Select"));
              $("#departmentInput").show();

              $("#ManagerId").val('@Model.ManagerId');
          });

    var previousSelectedCategory;
    var isPreviousSelectedCategoryLocked = false;

    $("#Award").on('focus', function () {
        // Store the current value on focus and on change
        previousSelectedCategory = this.value;
    });

    $('#Award').on("change", function (event) {
        var selectedAward = $(this).context.selectedOptions[0].innerText;
        if (selectedAward != "Select") {
            if (selectedAward == "Pinnacle") {
                $("#pinnacleNominationPeriod").show();
                $("#somNominationPeriod").hide();
            } else {
                $("#somNominationPeriod").show();
                $("#pinnacleNominationPeriod").hide();
            }
        } else {
            $("#somNominationPeriod").hide();
            $("#pinnacleNominationPeriod").hide();
        }

        showCustomLoader();
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetLockedAwardCategories","Nomination")',
            success: function (data) {
                hideCustomLoader();
                var isLocked = true;
                var index = 0;
                var lockedCategories = "";
                $.each(data, function () {
                    if (data[index].Id == $('#Award option:selected').val()) {
                        lockedCategories = data[index].Name;
                    }
                    if (this.Id == previousSelectedCategory) {
                        isPreviousSelectedCategoryLocked = true;
                    }
                    //$('#Award option[value=' + data[index].Id + ']').attr('title', 'Nomination locked').prop('disabled', 'disabled');
                    index++;
                });
                if (lockedCategories != "") {
                    $('#nextButton').prop('disabled', 'disabled');
                    sweetAlert("Error", "Nominations for " + lockedCategories + " are locked.", "error");
                    isLocked = true;
                }
                else {
                    $('#nextButton').prop('disabled', '');
                    isLocked = false;
                }

                if (!isLocked) {
                    var showDataLoseWarning = $("#showDataLoseWarning").val();
                    if (showDataLoseWarning.toLowerCase() == "true") {
                        swal({
                            title: "Are you sure?",
                            text: "All your changes will be lost! Do you want to continue?",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#337ab7",
                            confirmButtonText: "Yes",
                            cancelButtonText: "No",
                            closeOnConfirm: true,
                            closeOnCancel: true
                        }, function (isConfirm) {
                            if (isConfirm) {
                                getCriteriaForAwardView();
                            } else {
                                event.stopPropagation();
                                //Check if previous value is locked
                                if (!isPreviousSelectedCategoryLocked) {
                                    $("#Award").val(previousSelectedCategory);
                                }

                                return false;
                            }
                            // Make sure the previous value is updated
                            previous = this.value;
                        });
                    } else {
                        getCriteriaForAwardView();
                    }
                }
            },
            error: function () {
                hideCustomLoader();
                sweetAlert("Error", "Oops something went wrong!", "error");
            }
        });
    });

    function getCriteriaForAwardView() {
        if (this.value == '1' || this.value == '2' || this.value == '5') {
            $("#label").show();
        } else {
            $("#label").hide();
        }

        $('#ProjectRadioButton').prop('checked', true);
        $('#DepartmentRadioButton').prop('checked', false);
        $("#projectInput").show();
        $("#departmentInput").hide();
        $("#SelectedProject").prop('selectedIndex', 0);
        $("#SelectedDepartment").prop('selectedIndex', 0);
        $('#Resources').empty();
        $('#Resources').append($("<option selected></option>").val(null).html("Select"));
        $("#managerComment").val('');

        $('#disclamer').prop('hidden', false);

        var selectdAward = $("#Award").val();
        $('#criteria-rating').empty();
        //var ServiceUrl = "/Nomination/CriteriasForAward?awardId=" + selectdAward;
        var ServiceUrl = "/Nomination/CriteriasForAwardPartialView?awardId=" + selectdAward;

        $.ajax({
            type: 'post',
            url: ServiceUrl,
            async: true,
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                $('#criteria-rating').html(data);
            }
        });
    }
    function edValueKeyPress(key) {
        $('div.textarea' + key + '').html(text_remaining + ' characters remaining').show();
        var text_max = 500;

        var text_length = $('#comment' + key + '').val().length;
        var text_remaining = text_max - text_length;
        $('div.textarea' + key + '').html(text_remaining + ' characters remaining');
    }

    function hideRemainingCharacterText(key) {
        var text_max = 500;

        var commentTextAreaId = '#comment' + key;
        var text_length = $(commentTextAreaId).val().length;
        var text_remaining = text_max - text_length;
        $('div.textarea' + key + '').html(text_remaining + ' characters remaining').hide();

        if ($(commentTextAreaId).attr("isRequiredForCriteria") == "true") {
            if ($(commentTextAreaId).val().trim() == "") {
                $(commentTextAreaId).addClass("noCommentError");
            } else {
                $(commentTextAreaId).removeClass("noCommentError");
            }
        }
    }


    $("#SelectedProject").change(function () {
        showCustomLoader();
        var selectedProject = $("#SelectedProject").val();
        var selectedAward = $("#Award").val();
        $('#Resources').empty();
        $('#Resources').append($("<option selected></option>").val(null).html("Select"));

        $.ajax({
            type: 'post',
            url: '@Url.Action("ResourcesInProject", "Nomination")',
            data: JSON.stringify({ engagementID: selectedProject, awardId: selectedAward }),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                hideCustomLoader();
                for (var key in data) {
                    $('#Resources')
                        .append($("<option></option>").val(data[key].ID).html(data[key].DisplayName));
                }
            },
            error: function (error) {
                hideCustomLoader();
                console.log(error);
            }
        });
    });

    $("#SelectedDepartment").change(function () {
        showCustomLoader();
        var selectedDept = $("#SelectedDepartment").val();
        var selectedAward = $("#Award").val();
        //var ServiceUrl = "/Nomination/ResourcesInDepartment?departmentID=" + selectedDept +""+ selectedAward;
        var ServiceUrl = '@Url.Action("ResourcesInDepartment", "Nomination")';
        $('#Resources').empty();
        $('#Resources').append($("<option selected></option>").val(null).html("Select"));

        $.ajax({
            type: 'GET',
            url: ServiceUrl,
            //url: "/Nomination/ResourcesInDepartment",
            data: { departmentID: selectedDept, awardId: selectedAward },
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                hideCustomLoader();
                for (var key in data) {
                    $('#Resources')
                        .append($("<option></option>").val(data[key].ID).html(data[key].DisplayName));
                }
            },
            error: function (xhr) {
                hideCustomLoader();
                //alert(xhr.toString());
                console.log(xhr);
            }
        });
    });

    function checkValidationOnSubmit() {

        if ($('#addNominationForm').valid()) {
            var comments = 0;
            $("#criteriaTable").find("textarea").each(function (data) {
                if ($(this).val().trim())
                    comments++;
            });
            var weightage = 0;
            weightage = checkWeightage();

            if (weightage > 100 || weightage < 100) {
                swal("Error", "Sum of total weightages assigned to criteria should be 100%");
                return false;
            }
            if (comments < 1) {
                $("#criterisCommentValidationmessage").parent().show();
                //$("#criterisCommentValidationmessage").text("Enter at least one criteria comment");
                $("#criterisCommentValidationmessage").text("Comment is mandatory if rating is provided for a criteria!");
                return false;
            } else if (!checkIfCommentsAreRequired()) {
                return false;
            }
            else {
                swal({
                    title: "Submit Nomination",
                    text: "Do you want to nominate this candidate?",
                    type: "info",
                    showCancelButton: true,
                    confirmButtonColor: "#337ab7",
                    confirmButtonText: "Yes!",
                    cancelButtonText: "No!",
                    closeOnConfirm: false,
                    closeOnCancel: true,
                },
                    function (isConfirm) {
                        if (isConfirm) {
                            showCustomLoader();
                            var modelbjectToSend = $('#addNominationForm').serialize() + '&' + $.param({ 'submit': "Submit" }, true);

                            showCustomLoader();

                            $.ajax({
                                type: 'post',
                                url: '@Url.Action("AddNomination", "Nomination")',
                                dataType: 'json',
                                async: false,
                                data: modelbjectToSend,
                                success: function (data) {
                                    hideCustomLoader();
                                    swal(data.ErrorMessage);
                                    if (data.nominationExceed) {
                                        swal({
                                            title: "Error",
                                            text: data.message,
                                            type: "error",
                                            showCancelButton: false,
                                            confirmButtonColor: "#337ab7",
                                            confirmButtonText: "Ok",
                                        },
                                        function () {
                                            if (isConfirm) {
                                                var managerId = $("#ManagerId").val();
                                                window.location.href = '/Nomination/GetNominationList';
                                            }
                                        });
                                    } else {
                                        swal({
                                            title: "Nomination Submitted!",
                                            text: "",
                                            type: "info",
                                            showCancelButton: false,
                                            confirmButtonColor: "#337ab7",
                                            confirmButtonText: "Ok",
                                        },
                                        function () {
                                            if (isConfirm) {
                                                var managerId = $("#ManagerId").val();
                                                window.location.href = '/Nomination/GetNominationList';
                                            }
                                        });
                                    }
                                },
                                error: function (error) {
                                    hideCustomLoader();
                                    if (error.responseText != null && error.responseText != undefined && error.responseText != '') {
                                        swal("Error", error.responseText.replace(/['"]+/g, ''));
                                    }
                                    else {
                                        swal("Error", "Oops! Something wrong happened..");
                                    }
                                }
                            });
                        } else {
                            hideCustomLoader();
                            //swal("Cancelled", "Nomination Cancelled");
                        }
                    });
            }
        }
        else {
            return false;
        }
    }

    function checkValidationOnSaveDraft() {
        if ($('#addNominationForm').valid()) {
            swal({
                title: "Save Nomination",
                text: "Do you want to save this nomination?",
                type: "info",
                showCancelButton: true,
                confirmButtonColor: "#0070b9",
                confirmButtonText: "Yes!",
                cancelButtonText: "No!",
                closeOnConfirm: false,
                closeOnCancel: true
            },
           function (isConfirm) {
               if (isConfirm) {
                   showCustomLoader();
                   var modelbjectToSend = $('#addNominationForm').serialize() + '&' + $.param({ 'submit': "Save" }, true);

                   $.ajax({
                       type: 'post',
                       url: '@Url.Action("AddNomination", "Nomination")',
                       data: modelbjectToSend,
                       success: function (data) {
                           hideCustomLoader();
                           if (data.nominationExceed) {
                               swal({
                                   title: "Error",
                                   text: data.message,
                                   showCancelButton: false,
                                   confirmButtonColor: "#337ab7",
                                   confirmButtonText: "Ok"
                               },
                     function () {
                         if (isConfirm) {
                             var managerId = $("#ManagerId").val();
                             window.location.href = '/Nomination/GetNominationList';
                             @*//window.location.href = '@Url.Action("SavedNomination", "Nomination")';*@
                         }
                     });
                           }
                           else {
                               swal({
                                   title: "Nomination Saved!",
                                   showCancelButton: false,
                                   confirmButtonColor: "#337ab7",
                                   confirmButtonText: "Ok"
                               },
                          function () {
                              if (isConfirm) {
                                  var managerId = $("#ManagerId").val();

                                  window.location.href = '/Nomination/GetNominationList';
                                  @*//window.location.href = '@Url.Action("SavedNomination", "Nomination")';*@
                              }
                          });
                           }


                       },
                       error: function (data) {
                           hideCustomLoader();
                           if (data.responseText != null && data.responseText != undefined && data.responseText != '') {
                               swal("Error", data.responseText.replace(/['"]+/g, ''));
                           }
                           else {
                               swal("Error", "Oops! Something wrong happened..");
                           }
                       }
                   });
               } else {
                   hideCustomLoader();
                   //swal("Cancelled", "Nomination Cancelled");
                   //window.location.href = '@Url.Action("AddNomination", "Nomination")';
               }
           });

        }
        else {
            return false;
        }
    }


    $("#criteriaTable").on('click', function () { $("#criterisCommentValidationmessage").text("") });
    $("#managerComment").on('click', function () { $("#managerCommentValidationmessage").text("") });

    function moveToNominationStep(stepNumber, toBeValidated) {
        var progressLineWidth = 25 * stepNumber;
        //
        if (toBeValidated) {
            if (!$('#addNominationForm').valid()) {
                return false;
            }
        }

        $("#showDataLoseWarning").val(true);

        //To move the number grid on the Top -- Start

        var stepId = "[step=" + stepNumber + "]";
        $("#nomination-steps").find(".f1-step.active").removeClass("active");
        $("#nomination-steps").find(stepId).prevAll(".f1-step").addClass("active");
        $("#nomination-steps").find(stepId).addClass("active");


        $(".f1-progress-line").css('width', progressLineWidth + "%");
        //To move the number grid on the Top -- End

        //To move to the next step -- Start

        var nominationStepId = "[nomination-step='" + stepNumber + "']";
        $("[nomination-step]").hide();
        $(nominationStepId).show();

        //To move to the next step -- End
    }

    function checkIfCommentsAreRequired() {
        var areAllMandatoryCommentsProvided = false;
        var countOfEmptyComments = 0;
        var criteriaComments = $("[isRequiredForCriteria]");
        $.each(criteriaComments, function () {
            if ($(this).attr("isRequiredForCriteria") == "true") {
                var classes = $(this).attr("class").toString();
                if (classes.indexOf("ddlWeightage") > 0) {
                    if ($(this).val() == 0) {
                        $(this).addClass("noCommentError");
                        countOfEmptyComments++;
                    } else {
                        $(this).removeClass("noCommentError");
                    }
                } else {
                    if ($(this).val().trim() == "") {
                        $(this).addClass("noCommentError");
                        countOfEmptyComments++;
                    } else {
                        $(this).removeClass("noCommentError");
                    }
                }
            }
        });

        if (countOfEmptyComments == 0) {
            areAllMandatoryCommentsProvided = true;
            $("#criterisCommentValidationmessage").parent().hide();
            $("#criterisCommentValidationmessage").text("");
        } else {
            swal("Error", "Criteria Weightage and Comment are mandatory if rating is provided for the criteria!");
            $("#criterisCommentValidationmessage").parent().show();
            $("#criterisCommentValidationmessage").text("Criteria Weightage and Comment are mandatory if rating is provided for the criteria!");
        }
        return areAllMandatoryCommentsProvided;
    }

    function checkWeightage() {
        var weightage = 0;
        $("#criteriaTable .ddlWeightage").each(function (data) {
            if ($(this).val().trim()) {
                weightage = weightage + parseInt($(this).val());
            }
        });
        return weightage;
    }
</script>