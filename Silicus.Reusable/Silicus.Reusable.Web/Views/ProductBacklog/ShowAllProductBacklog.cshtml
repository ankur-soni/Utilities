@using Kendo.Mvc.UI;
@using Kendo.Mvc.Extensions;

@{
    ViewBag.Title = "ShowAllProductBacklog";
    var isRolePm = ViewBag.IsRolePm;
}

<script>
    var ddlItem;
    function additionalData(e) {
        return { projectName : ddlItem }
    }    
    function onProjectChange(e) {
        debugger;
        ddlItem = this.value();
        var grid = $("#productBacklogs").data("kendoGrid");
        grid.dataSource.read();
    }

    function onProjectDataBound(e) {
        debugger;
        ddlItem = this.value();
        var grid = $("#productBacklogs").data("kendoGrid");
        grid.dataSource.read();
    }
</script>
<div class="row white-bg header-row">
    <nav class="" role="navigation" style="margin-bottom: 0">
        <div class="navbar-header">
            <a class="navbar-minimalize minimalize-styl-2 btn btn-primary" id="menu-toggle" style="margin-left:15px;" href="#"><i class="fa fa-bars"></i> </a>
        </div>
    </nav>

    <div class="col-lg-11 col-md-11 col-sm-11">
        <h1 class="dashboard-name">Product Backlog</h1>
    </div>
</div>
<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="box header-box M-T15">
            <div class="header-walloffame">
                <span>Projects</span>
                @(Html.Kendo().DropDownList()
                  .Name("projects")
                  .DataTextField("Name")
                  .DataValueField("Name")
                  .Events(e => e.Change("onProjectChange").DataBound("onProjectDataBound"))
                  .DataSource(source =>
                  {
                      source.Custom()
                      .ServerFiltering(false)
                      .Type("aspnetmvc-ajax")
                      .Transport(transport =>
                      {
                          transport.Read("GetProjects", "ProductBacklog");
                      })
                      .Schema(schema =>
                      {
                          schema.Data("Data")
                              .Total("Total");
                      });
                  })
                )
            </div>
        </div>
    </div>
</div>
<script>
    function onDataBound(e) {
        var isRolePm = @ViewBag.IsRolePm.ToString().ToLower();
        var grid = $("#productBacklogs").data("kendoGrid");
        var gridData = grid.dataSource.view();
        for (var i = 0; i < gridData.length; i++) {
            var currentUid = gridData[i].uid;
            var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
            var assignButton = $(currenRow).find(".k-grid-Assign");
            var updateButton = $(currenRow).find(".k-grid-Update");
            if (gridData[i].Assignee != "Unassigned" && gridData[i].Assignee != "") {
                if (assignButton) {
                    assignButton.text("Re Assign");
                }
            }else if(!isRolePm && !gridData[i].IsTaskAssignedToUser){
                updateButton.remove();
            }
        }
    }

    function Accept(e){
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //$.get( "/ProductBacklog/UpdateAssignee", { id: dataItem.Id} );
    }
</script>
<div class="row">
    <div class="col-sm-12">
        <div class="box">

            @(Html.Kendo().Grid<Silicus.Reusable.Web.Models.ViewModel.ProductBacklogViewModel>
                ()
                .Name("productBacklogs")
                .AutoBind(false)
                .Events(e => e.DataBound("onDataBound"))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Title).Editable(false);
                    model.Field(p => p.TimeAllocated).Editable(false);
                    model.Field(p => p.TimeSpent).Editable(false);
                    model.Field(p => p.State).Editable(false);
                    model.Field(p => p.Assignee).Editable(false);

                })
                .Read(read => read.Action("GetProductBacklogs", "ProductBacklog").Data("additionalData"))
                .PageSize(20)
                )

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Width(10);
                    columns.Bound(p => p.Title).Width(50);
                    columns.Bound(p => p.Type).Width(10);
                    columns.Bound(p => p.AreaPath).Width(30).Title("Area");
                    columns.Bound(p => p.Assignee).Width(50).Title("Assigned To");
                    columns.Bound(p => p.TimeAllocatedString).Width(10).Title("Time Allocated (Hrs)");
                    columns.Bound(p => p.TimeSpentString).Width(10).Title("Time Spent (Hrs)");
                    columns.Bound(p => p.State).Width(10);
                    columns.Command(command =>
                    {
                        command.Custom("Accept").Click("Accept");

                        if (isRolePm)
                        {
                            command.Custom("Assign");
                        }
                        command.Custom("Update");
                    }).Width(40).Title("Actions");
                })
                 .Scrollable()
                 .Resizable(resize => resize.Columns(true))
                .HtmlAttributes(new { style = "height: 750px;" })
                .Sortable()
                .Pageable(pageable => pageable
                .Refresh(true))
                .Editable(ed => ed.Mode(GridEditMode.InLine))
            )

        </div>
    </div>
</div>
