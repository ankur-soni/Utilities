@model Silicus.EncourageWithAzureAd.Web.Models.ViewShortlistDetailsViewModel

@{
    ViewBag.Title = "ShortlistNomination";
}

<style>
    .container .content {
        display: none;
        padding: 5px;
    }

    th {
    }

    .page-heading {
        margin-left: 0%;
    }

    .navbar-minimalize {
        margin-left: 35%;
    }
</style>
<div class="row border-bottom">
    <nav class="navbar  " role="navigation" style="margin-bottom: 0">
        <div class="navbar-header">
            <a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="#"><i class="fa fa-bars"></i> </a>
        </div>
    </nav>
</div>
<div class="row wrapper border-bottom white-bg page-heading border-bottom" style="width:90%;">
    <div class="col-md-11">
        <h1>Nomination</h1>
    </div>
</div>
<div class="wrapper wrapper-content animated fadeInRight" style="margin-left:5%">

    @using (Html.BeginForm())
    {
        @Html.HiddenFor(model => model.nominationId, htmlAttributes: new { id = "nominationId" })

        <table class="table table-hover issue-tracker white-bg" style="width:80%">
            <thead>
                <tr>
                    <td align="center" colspan="4" style="font-weight:bold">
                        <label>
                            Review For:
                            @Html.DisplayFor(modelItem => modelItem.userName)

                        </label>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label> Project/Department:</label>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => modelItem.projectOrDepartment)
                    </td>

                </tr>
                <tr>
                    <td>
                        <label> Manager:</label>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => modelItem.Manager)
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Credits</label>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => modelItem.totalCredits)
                    </td>
                </tr>
            </thead>
        </table>

        <table class="table table-hover issue-tracker " style="width:80%;table-layout:fixed">
            <tr>
                <th>
                    @Html.DisplayFor(modelItem => modelItem.Manager) Says:
                </th>
            </tr>
            <tr class="white-bg">
                <td class="more" style="word-wrap: break-word;"><div>@Model.nominationComment</div></td>
            </tr>
        </table>

        foreach (var reviewer in Model.reviewerComments)
        {
            var creditCount = 0;
            <div class="white-bg" style="width:80%;">
                <div class="row col-md-8">
                    @Html.Label("Review Comments By : " + reviewer.FirstOrDefault().ReviewerName, new { style = "margin-left:3%;color: #0067AA;" })
                    <div class="row">&nbsp;</div>
                </div>
                <a class="header"><div>Collapse the Comments</div></a>

                <table class="table table-hover issue-tracker white-bg content">
                    <thead>
                        <tr></tr>
                        <tr>
                            <th>Criteria</th>
                            <th>Manager Comment</th>
                            <th>Rating</th>
                            <th>Reviewer Comment</th>
                            <th>Credits</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Criterias)
                        {
                            <tr>
                                <td class="col-md-3">@item.Title</td>

                                @*<td class="col-md-3">*@
                                @{
                                    var commentObj = Model.ManagerComments.Where(model => model.CriteriaId == @item.Id).FirstOrDefault();
                                    if (commentObj != null && !string.IsNullOrEmpty(commentObj.Comment))
                                    {
                                        <td class="more col-md-4" style="word-break:break-all">@commentObj.Comment</td>
                                        <td class="col-md-2">
                                            @*<input id="input-21a" value="@commentObj.Rating" type="number" data-star-captions="{}" data-default-caption="{rating} Stars" class="rating rating-loading" data-show-clear="false" data-show-caption="false" data-symbol="*" min=0 max=5 step=1 data-size="xs" readonly="readonly">*@

                                            @Html.DropDownList("rating_"+item.Id,
                                                Enumerable.Range(1, 5).
                                                Select(j => new SelectListItem
                                                {
                                                    Value = j.ToString(),
                                                    Text = j.ToString()
                                                }), "", new { @class = "example-square", @autocomplete = "off", @value = commentObj.Rating })
                                        </td>

                                    }
                                    else
                                    {
                                        <td class="more col-md-4" style="word-break:break-all"></td>
                                        <td>
                                            @*<input id="input-21a" value="0" type="number" data-star-captions="{}" data-default-caption="{rating} Stars" class="rating rating-loading" data-show-clear="false" data-show-caption="false" data-symbol="*" min=0 max=5 step=1 data-size="xs" readonly="readonly">*@
                                            @Html.DropDownList("rating_" + item.Id,
                                                 Enumerable.Range(1, 5).
                                                 Select(j => new SelectListItem
                                                 {
                                                     Value = j.ToString(),
                                                     Text = j.ToString()
                                                 }), "", new { @class = "example-square", @autocomplete = "off", @value = 0 })
                                        </td>
                                    }
                                }
                                @*<td class="col-md-3">*@
                                @{
                                    var reviewObj = reviewer.Where(model => model.CriteriaID == @item.Id).FirstOrDefault();
                                    if (reviewObj != null && !string.IsNullOrEmpty(reviewObj.Comment))
                                    {
                                        <td class="more col-md-3" style="word-break:break-all">@reviewObj.Comment</td>

                                    }
                                    else
                                    {
                                        <td class="more" style="word-break:break-all"></td>
                                    }
                                }

                                <td class="col-md-2 ">
                                    @{
                                        if (reviewObj != null && !reviewObj.Credit != null)
                                        {
                                            <div class="switch">
                                                <div class="onoffswitch">
                                                    @if (reviewObj.Credit == true)
                                                    {
                                                        creditCount++;
                                                        <input type="checkbox" value="true" length="0" disabled="disabled" class="onoffswitch-checkbox" id='example @reviewObj.Id' checked>
                                                    }
                                                    else
                                                    {
                                                        <input type="checkbox" value="true" length="0" disabled="disabled" class="onoffswitch-checkbox" id='example @reviewObj.Id'>
                                                    }

                                                    <label class="onoffswitch-label" for="example @reviewObj.Id" style="cursor:not-allowed;">
                                                        <span class="onoffswitch-inner"></span>
                                                        <span class="onoffswitch-switch"></span>
                                                    </label>
                                                </div>
                                            </div>
                                        }
                                    }
                                </td>
                            </tr>
                                        }

                        <tr>
                            <td align="right" colspan="3" style="font-weight:bold">
                                @Html.Label("Total Credits:", new { style = "color: #0067AA;" })
                            </td>
                            <td>
                                @creditCount
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="row">&nbsp;</div>
            }
    if (!String.IsNullOrEmpty(Model.HrAdminsfeedback))
    {
        <table class="table table-hover issue-tracker " style="width:80%;table-layout:fixed">
            <tr>
                <th>
                    @Html.DisplayFor(modelItem => modelItem.HrAdminName) Says:
                </th>
            </tr>
            <tr class="white-bg">
                <td class="more" style="word-wrap: break-word;"><div>@Model.HrAdminsfeedback</div></td>
            </tr>
        </table>
    }
    <div class="row">&nbsp;</div>

    <div class="form-group">
        <div style="text-align:center;width:80%;">
            @*<input type="button" value="Back" class="btn btn-primary back btnSameSize" onclick="location.href='#'"/>*@
            <input type="button" value="Back" class="btn btn-primary btnSameSize " onclick="location.href='@Url.Action("ReviewFeedbackList", "Review")'" />
            <input type="button" value="Shortlist" class="btn btn-primary shortlist btnSameSize" onclick="location.href='#'"
                    @{ if (Model.IsShortlisted || Model.IsWinner) { @: disabled="disabled"
                                                                                                                                                                } } />
            <input type="button" value="Mark Winner" class="btn btn-primary btnSameSize" data-toggle="modal" data-target="#myModal"
                    @{ if (Model.IsWinner) { @: disabled="disabled"
                                                                                                                                                        } } />
        </div>
    </div>
    if (ViewBag.NominationLockStatus)
    {
        <div style="display:none" id="allow-shortlist">true</div>
    }
    else
    {
        <div style="display:none" id="allow-shortlist">false</div>
        }

    }
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Select Winner</h4>
            </div>
            <div class="modal-body">
                <span class="requiredfeild">Feedback:</span>
                <textarea rows="3" id="feedback" style="width:100%;max-width:100%" placeholder="Why this employee shoulde be the winner?" required="required"></textarea>
                <span style="color:red;display:none" id="feedbackRequired"></span>
                <span class="requiredfeild">Comment:</span>
                <textarea rows="3" id="comment" style="width:100%;max-width:100%" placeholder="To be shared across the company" required="required"></textarea>
                <span style="color:red;display:none" id="commentRequired"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn winner btn-default" id="selectWinner">Submit</button>
                <button type="button" class="btn btn-danger" id="cancel" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>

<script src="~/js/jquery-2.1.1.js"></script>
<script src="~/js/jquery.barrating.min.js"></script>

<script>

    $(".header").click(function () {
        $header = $(this);
        $content = $header.next();
        $content.slideToggle(100, function () {
            $header.text(function () {
                //change text based on condition
                return $content.is(":visible") ? "Collapse the Comments" : "Expand the Comments";
            });
        });
    });

    var ratings = $('.example-square');

    $.each(ratings, function (index) {
        var id = "#" + this.id;
        var rating = +this.getAttribute("value");

        $(id).barrating('show', {
            theme: 'bars-square',
            showValues: true,
            showSelectedRating: false,
            readonly: true
        });

        $(id).barrating('set', rating);
    });

    $(document).ready(function () {
        @*$('.back').click(function () {
            window.location.href = '@Url.Action("ReviewFeedbackList", "Review")';
        },*@
        $('.shortlist').click(function () {
            debugger;
            @*var isLocked = @Html.Raw(Json.Encode(Model.IsLocked));*@
            var isLocked = $("div #allow-shortlist").text();
            if (isLocked == "false") {
                sweetAlert("Please lock the nomination from dashboard before proceed.");
                return false;
            }

            swal({
                title: "Shortlist Nomination",
                text: "Are you sure you want to shortlist this candidate?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#0070b9",
                confirmButtonText: "Yes!",
                cancelButtonText: "No!",
                closeOnConfirm: false,
                closeOnCancel: false
            },
                 function (isConfirm, inputValue) {

                     var a = inputValue;
                     if (isConfirm) {
                         var nominationIdToShortlist = $("#nominationId").val();
                         $.ajax({
                             type: 'post',
                             url: '@Url.Action("ShortlistNomination", "Review")',
                             data: JSON.stringify({ nominationId: nominationIdToShortlist }),
                             contentType: "application/json; charset=utf-8",
                             success: function (data) {
                                 swal({
                                     title: "Nomination Shortlisted",
                                     showCancelButton: false,
                                     confirmButtonColor: "#88a364",
                                     confirmButtonText: "Ok",
                                 },
                                 function () {
                                     if (isConfirm) {
                                         window.location.href = '@Url.Action("ReviewFeedbackList", "Review")';
                                     }
                                 });
                             },
                             error: function () {
                                 swal("Error", "Oops! Something wrong happened..");
                             }
                         });
                     } else {
                         swal("Cancelled", "This candidate has not been shortlisted");
                     }
                 });
        });

        $("#comment").keypress(function () { $("#commentRequired").css("display", "none") });
        $("#feedback").keypress(function () { $("#feedbackRequired").css("display", "none") });
        $("#cancel").click(function () { $("#comment").val(""); $("#feedback").val(""); $("#commentRequired").text(""); $("#feedbackRequired").text("") });

        $('.winner').click(function () {
            debugger;
            var isLocked = $("div #allow-shortlist").text();
            if (isLocked == "false") {
                sweetAlert("Please lock the nomination from dashboard before proceed.");
                return false;
            }
            var nominationIdToShortlist = $("#nominationId").val();
            var commentForWinner = $("#comment").val();
            var feedbackForWinner = $("#feedback").val();
            if (commentForWinner != "" && feedbackForWinner != "") {
                $("#selectWinner").attr("data-dismiss", "modal");
            }
            else {
                if (commentForWinner == "") {
                    $("#commentRequired").text("You must enter a comment!");
                    $("#commentRequired").css("display", "block");
                }
                if (feedbackForWinner == "") {
                    $("#feedbackRequired").text("You must enter feedback!");
                    $("#feedbackRequired").css("display", "block");
                }
                return false;
            }
            $.ajax({
                type: 'post',
                url: '@Url.Action("SelectWinner", "Review")',
                data: JSON.stringify({ nominationId: nominationIdToShortlist, winningComment: commentForWinner, feedback: feedbackForWinner }),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    swal({
                        title: "Winner Selected",
                        showCancelButton: false,
                        confirmButtonColor: "#0070b9",
                        confirmButtonText: "Ok"
                    },
                    function (isConfirm) {
                        if (isConfirm) {
                            window.location.href = '@Url.Action("ReviewFeedbackList", "Review")';
                        }
                    });
                },
                error: function (data) {
                    alert(data);
                    swal("Error", "Oops! Something wrong happened..");
                }
            });

        });

        @*$('.winner').click(function () {

            var commentForWinner = "";
            var isLocked = $("div #allow-shortlist").text();
            if (isLocked == false) {
                sweetAlert("Please lock the nomination from dashboard before proceed.");
                return false;
            }
            swal({
                title: "Select Winner",
                text: "Are you sure you want to select this candidate as Winner?",
                type: "input",
                confirmButtonText: "Yes!",
                cancelButtonText: "No!",
                showCancelButton: true,
                closeOnConfirm: false,
                animation: "slide-from-top",
                inputPlaceholder: "To be shared across the company",
            },
            function (inputValue) {
                if (inputValue === false) {

                }
                else if (inputValue === "") {
                    swal.showInputError("You need to write something!");
                    return false
                }
                else {
                    commentForWinner = inputValue;
                    swal({
                        title: "Select Winner",
                        text: "Enter your feedback.",
                        type: "input",
                        confirmButtonText: "Yes!",
                        cancelButtonText: "No!",
                        showCancelButton: true,
                        closeOnConfirm: false,
                        animation: "slide-from-top",
                        inputPlaceholder: "Why you think this employee should be the winner?",
                    }, function (inputValue) {
                        if (inputValue === false) {

                        }
                        else if (inputValue === "") {
                            swal.showInputError("You need to write something!");
                            return false;
                        }
                        else {
                            var nominationIdToShortlist = $("#nominationId").val();
                            $.ajax({
                                type: 'post',
                                url: '@Url.Action("SelectWinner", "Review")',
                                data: JSON.stringify({ nominationId: nominationIdToShortlist, winningComment: commentForWinner, feedback: inputValue }),
                                contentType: "application/json; charset=utf-8",
                                success: function (data) {
                                    swal({
                                        title: "Winner Selected",
                                        showCancelButton: false,
                                        confirmButtonColor: "#0070b9",
                                        confirmButtonText: "Ok"
                                    },
                                    function (isConfirm) {
                                        if (isConfirm) {
                                            window.location.href = '@Url.Action("ReviewFeedbackList", "Review")';
                                        }
                                    });
                                },
                                error: function (data) {
                                    alert(data);
                                    swal("Error", "Oops! Something wrong happened..");
                                }
                            });
                        }
                    });

                }


            });

        });*@
    });

    $(function () {
        var showChar = 80, showtxt = "less", hidetxt = "more";
        $('.more-txt').each(function () {
            debugger;
            var content = $(this).text();
            if (content.length > showChar) {
                var con = content.substr(0, showChar);
                var hcon = content.substr(showChar, content.length - showChar);
                var txt = con + '<div class="morecontent"><div style="width:50%;max-width:50%;display:none;word-wrap: break-word;">' + hcon + '</div>&nbsp;&nbsp;<a href="" class="moretxt">' + hidetxt + '</a></div>';
                $(this).html(txt);
            }
        });
        $(".moretxt").click(function () {
            if ($(this).hasClass("sample")) {
                $(this).removeClass("sample");
                $(this).text(hidetxt);
            } else {
                $(this).addClass("sample");
                $(this).text(showtxt);
            }
            $(this).parent().prev().toggle();
            $(this).prev().toggle();
            return false;
        });
    });

</script>
