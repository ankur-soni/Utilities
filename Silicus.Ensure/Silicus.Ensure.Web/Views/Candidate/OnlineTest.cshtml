@model Silicus.Ensure.Web.Models.TestSuiteCandidateModel
@using Kendo.Mvc.UI;
@using Silicus.Ensure.Web.Models.Test
@using Silicus.Ensure.Web

@{
    ViewBag.Title = "Online Test";
    Layout = "~/Views/Shared/_LayoutCandidate.cshtml";
}
        <div class="row">
    <div class="col-sm-12 main-content" id="main" style="background: #ccc;">
        <div class="row topBox">
            <div class="col-sm-12">
                <div class="alert alert-danger M-T15">
                    <strong>Attention!</strong> This test is window protected, please do not move away from the window or refresh page.
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">

                <input type="hidden" value="@Model.TestSuiteId" id="TestSuiteId" />
                <input type="hidden" value="@Model.UserTestSuiteId" id="UserTestSuiteId" />
                <input type="hidden" value="@Model.UserId" id="UserId" />
            </div>
        </div>
        <div class="row">
            <div class="custBox">
                <div class="f1" style="background:#067bb5;">
                    <div class="col-sm-8">
                        @Html.Partial("_CandidateInfo", Model.CandidateInfo)
                    </div>
                    <div class="col-sm-4">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="clock">
                                    <div id="counter">

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                @(Html.Kendo().Button()
                        .Name("btnAddMoreTime").Events(e => e.Click("AddMoreTime"))
                                    .HtmlAttributes(new { type = "button" }).Content("Add more time").HtmlAttributes(new { style = "float:right;", @class = "btn btn-addTime btn-lg" }))

                                @Html.Hidden("TimerIncCount", Model.ExtraCount)
                            </div>
                        </div>

                    </div>
                    <div class="col-sm-12 M-T15">
                        <span style="font-weight:bold;font-size:15px;color:#fff;">Test Progress</span>
                        <div class="progress M-T10">
                            <div id="progressBar" class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="50"
                                 aria-valuemin="0" aria-valuemax="100" style="width:50%">
                                <span id="progressInfo">50%</span> Complete
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>

            </div>
        </div>

        <div class="row M-B25">
            <div class="col-sm-9 M-T15">
                <div class="f1 M-B30" style="background:#fff;">
                    <div id="QuestionDetails">
                    </div>
                </div>
            </div>
            <div class="col-sm-3 M-T15" style="padding-left:0px;">
                <div class="f1 M-B30" style="background:#fff;">
                    <div id="QuestionNavigation">
                        @Html.Partial("_QuestionNavigationPanel", @Model.NavigationDetails)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="msgMain">Success!</span></h4>
            </div>
            <div class="modal-body">
                <p id="msgContent">Some text in the modal.</p>
            </div>
            <div class="modal-footer">
                <button id="btnModalOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnAddMoreTimeOK();">OK</button>
                <button id="btnSubmitTestOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnSubmitTestOK();">OK</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>

<!-- Modal Submit Test On Time Complete-->
<div class="modal fade" id="myModalTC" role="dialog" onclick="TestDurationComplete();">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="TestDurationComplete();">&times;</button>
                <h4 class="modal-title"><span id="msgMainTC">Warning!</span></h4>
            </div>
            <div class="modal-body">
                <p id="msgContentTC">The test duration is over, thank you for your participation. Further, the recruitment team will contact you for the update.</p>
            </div>
            <div class="modal-footer">
                <button id="btnModalOKTC" type="button" class="btn btn-default" data-dismiss="modal" onclick="TestDurationComplete();">OK</button>
            </div>
        </div>

    </div>
</div>





<script>
    var clock;
    var totalTime;

    $(document).ready(function () {
        $("#frmTestresult").kendoValidator();
        // Hide Submit button of popup. Show when to want submit test.
        $("#btnSubmitTestOK").hide();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var url = "/Candidate/LoadQuestion?userTestSuiteId=";
        $('#QuestionDetails').load(url + userTestSuiteId);

        // Hide "Add More Time" if used 2 times
        var timerCnt = $("#TimerIncCount").val();
        if (timerCnt >= 2)
            $("#btnAddMoreTime").hide();

        // Timer
        clock = $('#counter').FlipClock({
            clockFace: 'HourlyCounter',
            autoStart: false,
            callbacks: {
                stop: function () {
                    // $("#myModalTC").modal();
                    TestDurationComplete();
                    var text = "The test duration is over, thank you for your participation. Further, the recruitment team will contact you for the update";
                    ShowSweetAlertWithoutCancel("Warning!", text, "warning");
                },
                interval: ProgressBar
            }
        });

        var tm =@Model.Duration
        tm = parseInt(tm) * 60;

        // Initialize progress bar.
        totalTime = tm;
        $('#progressBar').attr('aria-valuemax', totalTime).css('width', '0%');
        $('#progressInfo').text('0%');

        // Set counter time and start.
        clock.setTime(tm);
        clock.setCountdown(true);
        clock.start();

        $('.QuestionCheckbox').on('click', QuestionCheckboxClicked);
    });
        
    function QuestionCheckboxClicked(event) {
        var questionId = $(this).attr('id');
        UpdateCurrentQuestionAndLoadNewOne(questionId);
    }

    function UpdateCurrentQuestionAndLoadNewOne(questionId) {
        var questionNavigationDetails = GetCurrentQuestionStatus();
        UpdateCurrentQuestionNavigationStatus(questionNavigationDetails);
        MarkAsViewed(questionId);
        GetQuestionDetails(questionId);
    }

    function MarkAsViewed(questionId) {
        if (questionId) {
            var input = '#NavigationSection ' + '#' + questionId;
            if (input) {
                if (!($(input).hasClass('Viewed') || $(input).hasClass('Answered'))) {
                    $(input).addClass('Viewed');
                }
            }
        }
    }
    function UpdateCurrentQuestionNavigationStatus(questionNavigationDetails) {
        var ClassesForAnsweredQuestion = 'fa fa-check-square';
        var ClassesForViewedQuestion = 'fa fa-square';
        var CassForUnSeenQuestion = 'UnSeen';
        if (questionNavigationDetails) {
            var input = '#NavigationSection ' + '#' + questionNavigationDetails.QuestionNumber;
            input = $(input).find('.QuestionCheckboxInnerDiv');
            $(input).removeClass(CassForUnSeenQuestion);
            $(input).removeClass(ClassesForViewedQuestion);
            $(input).removeClass(ClassesForAnsweredQuestion);
            if (questionNavigationDetails.IsAnswered) {
                $(input).addClass(ClassesForAnsweredQuestion);
            }
            else if (questionNavigationDetails.IsViewed) {
                $(input).addClass(ClassesForViewedQuestion);
            }
            else {
                $(input).addClass(CassForUnSeenQuestion);
            }
        }
    }
    function GetCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsAnswered = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsAnswered = $("#QuestionDetails").find(".radio input:checked,.checkbox input:checked").length > 0 ? true : false;
        }
        else {
            IsAnswered = $("#PracticalAnswer").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsAnswered: IsAnswered, IsViewed: IsViewed };
        return result;
    }

    function AddMoreTime() {
        var timerCnt = $("#TimerIncCount").val();
        if (timerCnt == 0)
            ShowProgressPopUp(true, "You have only 2 chances. Are you sure, you want to increase time limit by 10 Mins?");
        else
            ShowProgressPopUp(true, "This is the last chance. Are you sure, you want to increase time limit by 10 Mins?");
    }

    function OnAddMoreTimeOK() {
        var timerCnt = $("#TimerIncCount").val();
        if (timerCnt == null || timerCnt == "")
            timerCnt = 0;
        var userTestSuiteId = $("#UserTestSuiteId").val();
        $.ajax({
            url: '/Candidate/AddMoreTime',
            dataType: "json",
            type: "POST",
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ count: timerCnt, userTestSuiteId: userTestSuiteId }),
            success: function (data) {
                if (data < 3) {
                    // Add time in counter
                    var newtm = parseInt(clock.getTime()) + parseInt(60 * 10);
                    clock.setTime(newtm);

                    // Assign reduced chance
                    $("#TimerIncCount").val(data);

                    // Update Progress bar
                    totalTime = parseInt(totalTime) + parseInt(60 * 10);
                    var leftTm = parseInt(totalTime) - clock.getTime();
                    var newprogress = parseInt((parseInt(leftTm) / parseInt(totalTime)) * 100);
                    $('#progressBar').attr('aria-valuemax', totalTime).css('width', newprogress + "%");
                    $('#progressBar').attr('aria-valuenow', clock.getTime()).css('width', newprogress + "%");
                    $('#progressInfo').text(newprogress + "%");

                    // Hide Add more time button.
                    if (data == 2) {
                        $("#btnAddMoreTime").hide();
                    }

                }
            },
            error: function () {

            }
        });
    }

    function ProgressBar() {
        var time = clock.getTime().time;
        if (time % 60 == 0) {
            var leftTm = parseInt(totalTime) - clock.getTime();
            var newprogress = parseInt((parseInt(leftTm) / parseInt(totalTime)) * 100);
            $('#progressBar').attr('aria-valuenow', clock.getTime()).css('width', newprogress + "%");
            $('#progressInfo').text(newprogress + "%");

            UpdateTimeDB(time);

            if (time == 60) {
                var timerCntVal = $("#TimerIncCount").val();
                if (timerCntVal == 0)
                    ShowProgressPopUp(false, "Please click on 'Add more time' button in order to add 10 more minutes to Test duration.");
                else if (timerCntVal == 1)
                    ShowProgressPopUp(false, "Please click on 'Add more time' button for the last time to add 10 more minutes to Test duration.");
                else
                    ShowProgressPopUp(false, "1 minute remaining to complete the test.");
            }
            else if (time == 900 && totalTime > 1799)
                ShowProgressPopUp(false, "15 minute remaining to complete the test.");
            else if (time == 1800 && totalTime != 1800)
                ShowProgressPopUp(false, "30 minute remaining to complete the test.");
            else if (time == 3600 && totalTime != 3600)
                ShowProgressPopUp(false, "60 minute remaining to complete the test.");
        }
    }

    function ShowProgressPopUp(bl, msg) {
        if (!bl) {
            ShowSweetAlertWithoutCancel("Warning!", msg, "warning");
        }
        else {
            swal({
                title: "Warning!",
                text: msg,
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes",
                cancelButtonText: "No",
                closeOnConfirm: true,
                closeOnCancel: true
            },
 function (isConfirm) {
     if (isConfirm) {
         OnAddMoreTimeOK();
         swal("Added!", "Now you have extra 10 mins.", "success");
     }
 });
        }
    }

    function UpdateTimeDB(tm) {
        var userTestSuiteId = $("#UserTestSuiteId").val();
        $.ajax({
            url: '/Candidate/UpdateTimeCounter',
            dataType: "json",
            type: "POST",
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ time: tm, userTestSuiteId: userTestSuiteId }),
            success: function () {
            },
            error: function () {
            }
        });
    }

    function OnNext(e) {
        var questionId = $('#btnNext').attr('data-id');
            UpdateCurrentQuestionAndLoadNewOne(questionId);
        return false;
    }

    function OnPrevious() {
        var questionId = $('#btnPrevious').attr('data-id');

             UpdateCurrentQuestionAndLoadNewOne(questionId);
        return false;
    }

    function GetQuestionDetails(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var questionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Answer: answer };
        $('#QuestionDetails').load('/Candidate/GetQuestionDetails', questionDetails);
    }

    function UpdateAndGetQuestionReview(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var candidateId = $("#UserId").val();
        var comment = $("#Comment").val();
        var marks = $("#ReviwerMark").val();
        var reviewerQuestionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Comment: comment, Marks: marks };
        $('#QuestionDetails').load('/Reviewer/UpdateReviewAndGetQuestionDetails', reviewerQuestionDetails);
    }

    function GetAnswer() {
        var answer = "";
        if ($("#QuestionType").val().trim() == "1") {
            if ($("#AnswerType").val().trim() == "1") {
                answer = $('[name="optradio"]:radio:checked').val();
            }
            else {
                $("input:checkbox[name=optcheckbox]:checked").each(function () {
                    answer = answer + $(this).val() + ",";
                });

                answer = answer.slice(0, -1);
            }
        }
        else {
            answer = $("#PracticalAnswer").val();
            answer = encodeURIComponent(answer);
        }
        if (answer == "undefined")
            answer = null;
        return answer;
    }

    function OnSubmitTest() {
        var msg = "Are you sure, you want to Submit the Test? Once you submit the Test, you cannot revisit to view the Questions and their Answers.";
        swal({
            title: "Warning!",
            text: msg,
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            closeOnConfirm: true,
            closeOnCancel: true
        },
    function (isConfirm) {
        if (isConfirm) {
            OnSubmitTestOK();
            var text = "The test is submitted , thank you for your participation. Further, the recruitment team will contact you for the update";
            swal("Submitted!", "Now you have extra 10 mins.", "success");
        }
    });
    }

    function OnSubmitTestOK() {
        var answer = GetAnswer();
        var testSuiteId = $("#TestSuiteId").val();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var userId = $("#UserId").val();
        window.location.href = '/Candidate/OnSubmitTest?testSuiteId=' + testSuiteId + '&userTestSuiteId=' + userTestSuiteId + '&userTestDetailId=' + userTestDetailId + '&userId=' + userId + '&answer=' + answer;
    }

    function TestDurationComplete() {
        var answer = GetAnswer();
        var testSuiteId = $("#TestSuiteId").val();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var userId = $("#UserId").val();
        window.location.href = '/Candidate/OnSubmitTest?testSuiteId=' + testSuiteId + '&userTestSuiteId=' + userTestSuiteId + '&userTestDetailId=' + userTestDetailId + '&userId=' + userId + '&answer=' + answer;
    }

    function getCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsAnswered = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsAnswered = $(".radio input:checked").length > 0 ? true : false;
        }
        else {
            IsAnswered = $("#PracticalAnswer").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsAnswered: IsAnswered, IsViewed: IsViewed };
        return result;
    }



    function toggleFullScreen() {
        if (!document.fullscreenElement &&    // alternative standard method
            !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {  // current working methods
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) {
                document.documentElement.msRequestFullscreen();
            } else if (document.documentElement.mozRequestFullScreen) {
                document.documentElement.mozRequestFullScreen();
            } else if (document.documentElement.webkitRequestFullscreen) {
                document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
        }
    }

    $(document).ready(function () {
        var text = "You are navigating to Fullscreen.";
        ShowSweetAlertWithoutCancel("Warning!", text, "warning");

        swal({
            title: "FullScreen Mode",
            text: "You are navigating to Fullscreen.",
            type: "warning",
            showCancelButton: false,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Ok",
            cancelButtonText: "No",
            closeOnConfirm: true,
            closeOnCancel: false
        },
   function (isConfirm) {
       if (isConfirm) {
           toggleFullScreen();
       }
   });
    });


    

    $('#btnNext').on('click', function () {
        toggleFullScreen();
    });


    $(document).bind('keydown', function (e) {        
        if (e.keyCode === 27) { // Escape key
            e.preventDefault();             
        }
    });



    window.onbeforeunload = function () {
        return "Do you really want to close?";
    };

</script>
