@model Silicus.Ensure.Web.Models.TestSuiteCandidateModel
@using Kendo.Mvc.UI;
@using Silicus.Ensure.Web.Models.Test
@using Silicus.Ensure.Web

@{
    ViewBag.Title = "Online Test";
    Layout = "~/Views/Shared/_LayoutCandidate.cshtml";
}

<div class="main-content" id="main">
    <div class="fluid mt20">
        <div id="DivTestSummary">
            @Html.Partial("_TestSummary", new TestSummaryViewModel()
       {
           Objective =
               new TestViewModel(),
           Practical = new TestViewModel()
       })


        </div>

        <div class="row">
            <div class="col-md-12" style="border-bottom-width:1px; border-bottom-style:solid; border-bottom-color:black;">
            </div>
            <input type="hidden" value="@Model.TestSuiteId" id="TestSuiteId" />
            <input type="hidden" value="@Model.UserTestSuiteId" id="UserTestSuiteId" />
            <input type="hidden" value="@Model.UserId" id="UserId" />
        </div>
        <br />
        <div class="row">
            <div class="col-md-6">
                @Html.Partial("_CandidateInfo", Model.CandidateInfo)
            </div>
            
        </div>

        <div class="row">
            <div class="col-md-12" style="border-bottom-width:1px; border-bottom-style:solid; border-bottom-color:black;">
            </div>
        </div>
        <div class="row">
            <div class="col-lg-9">
                <div id="QuestionDetails">
                </div>
            </div>
            <div class="col-lg-3">
                <div id="QuestionNavigation">
                    @Html.Partial("_QuestionNavigationPanel", @Model.NavigationDetails)
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="msgMain">Success!</span></h4>
            </div>
            <div class="modal-body">
                <p id="msgContent">Some text in the modal.</p>
            </div>
            <div class="modal-footer">
                <button id="btnModalOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnAddMoreTimeOK();">OK</button>
                <button id="btnSubmitTestOK" type="button" class="btn btn-default" data-dismiss="modal" onclick="OnSubmitTestOK();">OK</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>




<!-- Modal Submit Test On Time Complete-->
<div class="modal fade" id="testresultPopup" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Candidate Result</h4>
            </div>
            <div class="modal-body">
                <form id="frmTestresult">
                    @Html.Partial("_CandidateResult", new CandidateResultViewmodel())
                </form>
            </div>
            <div class="modal-footer">
                <button id="SubmitCandidateResult" type="button" class="btn btn-default">OK</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>



<script>
    var clock;
    var totalTime;

    $(document).ready(function () {

        $("#frmTestresult").kendoValidator();
        // Hide Submit button of popup. Show when to want submit test.
        $("#btnSubmitTestOK").hide();

        // Load First Question On page Load.
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var url = "/Reviewer/LoadQuestion?userTestSuiteId=";
        $('#QuestionDetails').load(url + userTestSuiteId);



       

        $("#btnSubmitEvalution").on("click", submitEvalution);
        $("#SubmitCandidateResult").on("click", submitCandidateResult);
        $('.QuestionCheckbox').on('click', QuestionCheckboxClicked);
    });

    function QuestionCheckboxClicked(event) {
        var questionId = $(this).find('input').attr('id');
        UpdateCurrentReviewAndLoadNewOne(questionId);
    }

    function UpdateCurrentReviewAndLoadNewOne(questionId) {
        var questionNavigationDetails = GetCurrentQuestionStatus();
        UpdateCurrentQuestionNavigationStatus(questionNavigationDetails);
        MarkAsViewed(questionId);
        UpdateAndGetQuestionReview(questionId);
    }


    function MarkAsViewed(questionId) {
        if (questionId) {
            var input = '#NavigationSection ' + '#' + questionId;
            if (input) {
                if (!($(input).hasClass('Viewed') || $(input).hasClass('Answered'))) {
                    $(input).addClass('Viewed');
                }
            }
        }
    }
    function UpdateCurrentQuestionNavigationStatus(questionNavigationDetails) {
        if (questionNavigationDetails) {
            var input = '#NavigationSection ' + '#' + questionNavigationDetails.QuestionNumber;
            if (questionNavigationDetails.IsReviewed) {
                $(input).removeClass('Viewed');
                $(input).addClass('Answered');
            }
            else if (questionNavigationDetails.IsViewed) {
                $(input).removeClass('Answered');
                $(input).addClass('Viewed');
            }
            else {
                $(input).removeClass('Viewed');
                $(input).removeClass('Answered');
            }
        }
    }
    function GetCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsReviewed = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsReviewed = true;
        }
        else {
            IsReviewed = $("#Comment").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsReviewed: IsReviewed, IsViewed: IsViewed };
        return result;
    }

    

    function OnNext(e) {
        var questionId = $('#btnNext').attr('data-id');
        UpdateAndGetQuestionReview(questionId);

        return false;
    }

    function OnPrevious() {
        var questionId = $('#btnPrevious').attr('data-id');
        UpdateAndGetQuestionReview(questionId);
        return false;
    }

    function GetQuestionDetails(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var questionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Answer: answer };
        $('#QuestionDetails').load('/Candidate/GetQuestionDetails', questionDetails);
    }

    function UpdateAndGetQuestionReview(questionId) {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var candidateId = $("#UserId").val();
        var comment = $("#Comment").val();
        var marks = $("#ReviwerMark").val();
        var reviewerQuestionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Comment: comment, Marks: marks };
        $('#QuestionDetails').load('/Reviewer/UpdateReviewAndGetQuestionDetails', reviewerQuestionDetails);
    }

    function GetAnswer() {
        var answer = "";
        if ($("#QuestionType").val().trim() == "1") {
            if ($("#AnswerType").val().trim() == "1") {
                answer = $('[name="optradio"]:radio:checked').val();
            }
            else {
                $("input:checkbox[name=optcheckbox]:checked").each(function () {
                    answer = answer + $(this).val() + ",";
                });

                answer = answer.slice(0, -1);
            }
        }
        else {
            answer = $("#PracticalAnswer").val();
            answer = encodeURIComponent(answer);
        }
        if (answer == "undefined")
            answer = null;
        return answer;
    }


    function getCurrentQuestionStatus() {
        var QuestionNumber = $("#QuestionNumber").val();
        var QuestionType = $("#QuestionType").val();
        var IsAnswered = false;
        var IsViewed = true;
        if (QuestionType == 1) {
            IsAnswered = $(".radio input:checked").length > 0 ? true : false;
        }
        else {
            IsAnswered = $("#PracticalAnswer").val().trim().length > 0 ? true : false;
        }
        var result = { QuestionNumber: QuestionNumber, Questiontype: QuestionType, IsAnswered: IsAnswered, IsViewed: IsViewed };
        return result;
    }


    function submitEvalution() {
        var answer = GetAnswer();
        var userTestSuiteId = $("#UserTestSuiteId").val();
        var userTestDetailId = $("#UserTestDetailId").val();
        var questionType = $("#QuestionType").val();
        var candidateId = $("#UserId").val();
        var comment = $("#Comment").val();
        var marks = $("#ReviwerMark").val();
        var questionId = $(this).find('input').attr('id');
        var reviewerQuestionDetails = { QuestionId: questionId, UserTestSuiteId: userTestSuiteId, UserTestDetailId: userTestDetailId, Comment: comment, Marks: marks };
        // $('#QuestionDetails').load('/Reviewer/UpdateReviewAndGetQuestionDetails', reviewerQuestionDetails);
        $.ajax({
            type: "POST",
            url: "/Reviewer/SumbmitTestReview",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(reviewerQuestionDetails),
            dataType: "json",
            success: function (data) {
                if (data)
                    $("#testresultPopup").modal('show');
                else
                {
                    $("#testresultPopup").modal('hide');
                    ShowSweetAlertWithoutCancel("Warning!", "Please Review and Mark all Question Before Submit evaluation !", "warning");
                }
            }
        });
        
    }

    function submitCandidateResult() {
        var validator = $("#frmTestresult").data("kendoValidator");
        var userId = $("#UserId").val();
        if (validator.validate()) {
            var formdata = new FormData($('form').get(0));
            formdata.append('CandidateUserId', userId);

            $.ajax({
                url: '@Url.Action("SumbmitCandidateResult", "Candidate")',
                type: 'POST',
                data: formdata,
                processData: false,
                contentType: false,
                success: function (msg) {
                    $("#testresultPopup").modal('hide');
                }
            });
        }
    }

    function SumbmitTestReview() {
        var validator = $("#frmTestresult").data("kendoValidator");
        var userId = $("#UserId").val();
        if (validator.validate()) {
            var formdata = new FormData($('form').get(0));
            formdata.append('CandidateUserId', userId);

            $.ajax({
                url: '@Url.Action("SumbmitCandidateResult", "Candidate")',
                type: 'POST',
                data: formdata,
                processData: false,
                contentType: false,
                success: function (msg) {
                    $("#testresultPopup").modal('hide');
                }
            });
        }
    }
    



</script>

