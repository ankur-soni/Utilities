@model Silicus.Ensure.Web.Models.TestSuiteViewModel
@using Silicus.Ensure.Models.Constants
@using Kendo.Mvc.UI;



<div class="row white-bg header-row">
    <nav class="" role="navigation" style="margin-bottom: 0">
        <div class="navbar-header">
            <a class="navbar-minimalize minimalize-styl-2 btn btn-primary" id="menu-toggle" style="margin-left:15px;border-radius:0px;" href="#"><i class="fa fa-bars"></i> </a>
        </div>
    </nav>

    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-10">
        <h1 class="dashboard-name">@ViewBag.Type Test Suite</h1>
    </div>
</div>
<div class="row">
    <div class="alert alert-success" id="messageDiv" style="display:none;">
        <span id="messageContent"></span>
    </div>
</div>

@using (Html.BeginForm("Save", "TestSuite", FormMethod.Post, new { id = "frmAddTestSuite" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-sm-12">
            <div class="box M-T15 M-B60">
                <div class="f1">
                    <div class="row">

                        <div class="form-horizontal">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            @if (Model != null)
                            {
                                @Html.HiddenFor(model => model.TestSuiteId)
                                @Html.HiddenFor(model => model.IsCopy)
                                @Html.HiddenFor(model => model.Status)
                                @Html.HiddenFor(model => model.PrimaryTagNames)
                            }


                            <div class="form-group">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.TestSuiteName) <span style="color:red;">*</span>
                                </div>
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.TestSuiteName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TestSuiteName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.Duration) <span style="color:red;">*</span>
                                </div>
                                <div class="col-md-4">
                                    @if (Model != null && Model.Duration == 0)
                                    {
                                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", Value = "" } })
                                    }
                                    else
                                    {
                                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                                    }
                                    @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-2 col-sm-2 col-xs-2">
                                    @Html.LabelFor(model => model.Position) <span style="color:red;">*</span>
                                </div>
                                <div class="col-md-4 col-sm-8 col-xs-8">
                                    @(Html.Kendo().DropDownListFor(m => m.Position)
                                    .DataTextField("PositionName")
                                    .DataValueField("PositionId")
                                    .OptionLabel("--Select--")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                {
                                                    read.Action("GetAllPositionDetails", "Common");
                                                })
                                                .ServerFiltering(false);
                                            })
                                    .HtmlAttributes(new { style = "width: 100%" }))
                                    @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4 col-sm-2 col-xs-2">
                                    <a href="#" onclick="addPosition();"><span class="btn btn-primary"><i class="fa fa-plus" aria-hidden="true"></i></span></a>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.Competency) <span style="color:red;">*</span>
                                </div>
                                <div class="col-md-4">
                                    @(Html.Kendo().DropDownListFor(model => model.Competency)
                    .OptionLabel("--Select--")
                    .BindTo(new List<SelectListItem>() {
                    new SelectListItem(){
                    Text=Convert.ToString(Proficiency.Beginner),
                    Value=Convert.ToString((Int32)Proficiency.Beginner)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(Proficiency.Intermediate),
                    Value=Convert.ToString((Int32)Proficiency.Intermediate)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(Proficiency.Expert),
                    Value=Convert.ToString((Int32)Proficiency.Expert)
                    }
                    })
                   .HtmlAttributes(new { style = "width: 100%" }))
                                    @Html.ValidationMessageFor(model => model.Competency, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-2 col-sm-2 col-xs-2">
                                    Question Type <span style="color:red;">*</span>
                                </div>
                                <div class="col-lg-4 col-md-8 col-sm-10 col-xs-10">

                                    <div class="row">
                                        <div class="col-md-2 col-sm-2 col-xs-2">
                                            @Html.LabelFor(model => model.OptionalQuestion, htmlAttributes: new { @class = "" })
                                        </div>
                                        <div class="col-md-4 col-sm-4 col-xs-4">
                                            @if (Model != null && Model.OptionalQuestion == 0)
                                            {
                                                @Html.TextBoxFor(m => m.OptionalQuestion, new { @class = "form-control", Value = "", placeholder = "in %" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(m => m.OptionalQuestion, new { @class = "form-control", placeholder = "in %" })
                                            }
                                            @Html.ValidationMessageFor(m => m.OptionalQuestion)
                                        </div>
                                        <div class="col-md-2 col-sm-2 col-xs-2">
                                            @Html.LabelFor(model => model.PracticalQuestion, htmlAttributes: new { @class = "" })
                                        </div>
                                        <div class="col-md-4 col-sm-4 col-xs-4">
                                            @if (Model != null && Model.PracticalQuestion == 0)
                                            {
                                                @Html.TextBoxFor(m => m.PracticalQuestion, new { @class = "form-control", Value = "", placeholder = "in %" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(m => m.PracticalQuestion, new { @class = "form-control", placeholder = "in %" })
                                            }
                                            @Html.ValidationMessageFor(m => m.PracticalQuestion)
                                        </div>
                                    </div>
                                </div>

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "col-md-2" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-2 col-sm-2 col-xs-2">
                                    Experience <span style="color:red;">*</span>
                                </div>
                                <div class="col-md-2 col-sm-5 col-xs-5">
                                    @(Html.Kendo().DropDownListFor(m => m.FromExperience)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo(EnumHelper.GetSelectList((typeof(Year)))
                        .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                        .HtmlAttributes(new { style = "width: 100%" })
                        .OptionLabel("Year")
                                    )
                                    @Html.ValidationMessageFor(m => m.FromExperience)
                                </div>
                                <div class="col-md-2 col-sm-5 col-xs-5">
                                    @(Html.Kendo().DropDownListFor(m => m.ToExperience)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo(EnumHelper.GetSelectList((typeof(Year)))
                        .Select(x => new SelectListItem { Text = x.Value, Value = x.Value }))
                        .HtmlAttributes(new { style = "width: 100%" })
                        .OptionLabel("Months")
                                    )
                                    @Html.ValidationMessageFor(m => m.ToExperience)
                                </div>
                            </div>

                            <div id="TagCustomControl">

                                <div class="form-group">
                                    <div class="col-md-2 col-sm-2 col-xs-2">
                                    </div>
                                    <div class="col-md-2 col-sm-2 col-xs-2">
                                        <span class="font-Bold themeColorBlue">Skill Tags </span> <span style="color:red;">*</span>
                                    </div>
                                    <div class="col-md-2 col-sm-2 col-xs-2">
                                        <span class="font-Bold themeColorBlue"> Weightage % </span> <span style="color:red;">*</span>
                                    </div>
                                    <div class="col-md-2 col-sm-2 col-xs-2">
                                        <span class="font-Bold themeColorBlue">Efficiency</span> <span style="color:red;">*</span>
                                    </div>
                                    <div class="col-md-2 col-sm-2 col-xs-2">
                                        <span class="font-Bold themeColorBlue"></span>
                                    </div>
                                </div>

                                @if (Model != null && Model.Tags != null && Model.Tags.Count > 0)
                                {
                                    int i = 0;
                                    var tagCount = Model.Tags.Count;
                                    foreach (var tag in Model.Tags)
                                    {
                                        i++;
                                        <div class="form-group">
                                            <div class="col-md-2 col-sm-2 col-xs-2">
                                                Skill Tags
                                            </div>
                                            <div class="col-md-2 col-sm-2 col-xs-2">
                                                <input type="text" id="Tag_@i" value="@tag.TagName" name="Tag_@i" data-val="true" data-val-required="Skill tags is required!." class="tagAutoComplete">
                                            </div>
                                            <div class="col-md-2 col-sm-2 col-xs-2">
                                                <input type="text" id="Weightage_@i" value="@tag.Weightage" name="Weightage_@i" data-val="true" data-val-required="Weightage is required!." class="key-numeric WeightageField" />
                                            </div>
                                            <div class="col-md-2 col-sm-3 col-xs-3">
                                                <input type="text" id="Proficiency_@i" value="@tag.Proficiency" name="Proficiency_@i" data-val="true" data-val-required="Efficiency is required!." required class="proficiencyDropDown" />
                                            </div>
                                            <div class="col-md-2 col-sm-3 col-xs-3">

                                                @{var isDisply = "";
                                                    if (tagCount > i)
                                                    {
                                                        isDisply = "display:none;";
                                                    }


                                                    <span data-val="@i" style="margin-right:5px; @isDisply" class="addbtn btn btn-primary"><i class="fa fa-plus" aria-hidden="true"></i></span>
                                                    if (Model.Tags.Count > 1)
                                                    {
                                                        <span data-val="@i" style="margin-right:5px; @isDisply" class="removebtn btn btn-primary"><i class="fa fa-minus" aria-hidden="true"></i></span>
                                                    }
                                                }
                                            </div>
                                        </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="form-group">
                                                            <div class="col-md-2 col-sm-2 col-xs-2">
                                                                Skill Tags <span style="color:red;">*</span>
                                                            </div>
                                                            <div class="col-md-2 col-sm-2 col-xs-2">
                                                                <input type="text" id="Tag_1" name="Tag_1" data-val="true" data-val-required="Skill tags is required." class="tagAutoComplete">
                                                            </div>
                                                            <div class="col-md-2 col-sm-2 col-xs-2">
                                                                <input type="text" id="Weightage_1" name="Weightage_1" data-val="true" data-val-required="Weightage is required." class="key-numeric WeightageField form-control" />
                                                            </div>
                                                            <div class="col-md-2 col-sm-3 col-xs-3">
                                                                <input type="text" id="Proficiency_1" name="Proficiency_1" data-val="true" data-val-required="Efficiency is required." class="proficiencyDropDown" />
                                                            </div>
                                                            <div class="col-md-2 col-sm-3 col-xs-3">
                                                                @*<input data-val="1" type="button" value="Add" class="addbtn btn btn-primary" />*@
                                                                <span data-val="1" class="addbtn btn btn-primary"><i class="fa fa-plus" aria-hidden="true"></i></span>
                                                            </div>
                                                        </div>
                                                    }
                            </div>

                            <div class="form-group">
                                <div class="col-md-2 col-sm-12 col-xs-12">
                                    @Html.LabelFor(model => model.SpecialInstruction)
                                </div>
                                <div class="col-md-8 col-sm-12 col-xs-12">
                                    @Html.Kendo().EditorFor(m => m.SpecialInstruction).Name("SpecialInstruction").Value(@HttpUtility.HtmlDecode(@Model.SpecialInstruction))

                                </div>
                            </div>

                            <div class="">
                                <div class="col-md-12">
                                    <div class="pull-right">
                                        <input type="button" style="width: 70px;" id="btnSave" value="Save" class="btn btn-primary" />
                                        <input type="button" onclick="onCancelClick()" value="Cancel" class="btn btn-secondary" />
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
                                                    }


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    $(document).ready(function () {
        SetNavigationMenuActive('TestSuite');
    });
    function onCancelClick() {
        window.onbeforeunload = null;
        $(window).unbind('unload');
        redirectToTestSuiteList();
    }
    function redirectToTestSuiteList() {
        window.location = '@Url.Action("List", "TestSuite")';
    }
    function createControls() {
        $("input.tagAutoComplete").kendoAutoComplete({
            dataSource: {
                serverFiltering: false,
                transport: {
                    read: "/Common/GetAllTagDetails"
                }
            },
            filter: "contains",
            dataTextField: "TagName",
            dataValueField: "TagId",
            minLength: 1,
            seperator: ","

        });

        $("input.proficiencyDropDown").kendoDropDownList({
            dataTextField: "name",
            dataValueField: "id",
            required: true,
            dataSource: [
                { name: '--Select--', id: '' },
                { name: '@Convert.ToString(Proficiency.Beginner)', id: '@Convert.ToInt32(Proficiency.Beginner)' },
                { name: '@Convert.ToString(Proficiency.Intermediate)', id: '@Convert.ToInt32(Proficiency.Intermediate)' },
                { name: '@Convert.ToString(Proficiency.Expert)', id: '@Convert.ToInt32(Proficiency.Expert)' }
            ]
        });

        $('.key-numeric').keypress(function (e) {
            var verified = (e.which == 8 || e.which == undefined || e.which == 0) ? null : String.fromCharCode(e.which).match(/[^0-9]/);
            if (verified) { e.preventDefault(); }
        });
    }

    function formatOfCustomControl(rowno) {
        return '<div class="form-group">' +
                    '<div class="col-md-2 col-sm-2 col-xs-2 col-lg-2">Skill Tags <span style="color:red;">*</span></div>' +
                    '<div class="col-md-2 col-sm-2 col-xs-2">' +
                        '<input type="text" id="Tag_' + rowno + '" name="Tag_' + rowno + '" data-val="true" data-val-required="Skill tags is required." class="tagAutoComplete">' +
                    '</div>' +
                    '<div class="col-md-2 col-sm-2 col-xs-2">' +
                        '<input type="text" id="Weightage_' + rowno + '" name="Weightage_' + rowno + '" data-val="true" data-val-required="Weightage is required." class="key-numeric WeightageField" />' +
                    '</div>' +
                    '<div class="col-md-2 col-sm-3 col-xs-2">' +
                        '<input type="text" id="Proficiency_' + rowno + '" name="Proficiency_' + rowno + '" data-val="true" data-val-required="Efficiency is required." class="proficiencyDropDown" />' +
                    '</div>' +
        '<div class="col-md-2 col-sm-3 col-xs-2">' +

            '<span data-val="' + rowno + '" style="margin-right:5px;" class="addbtn btn btn-primary"><i class="fa fa-plus" aria-hidden="true"></i></span>' +

            '<span data-val="' + rowno + '" style="margin-right:5px;" class="removebtn btn btn-primary"><i class="fa fa-minus" aria-hidden="true"></i></span>' +
        '</div>' +
    '</div>';
    }

    function validateWeightage(input, params) {
        var sum = 0;
        if (input.hasClass("WeightageField")) {
            input.attr("data-Weightage-msg", "Weightage sum must be 100.");
            $summands = $(".WeightageField");
            $summands.each(function () {
                var value = Number($(this).val());
                if (!isNaN(value)) sum += value;
            });
            return sum === 100;
        }
        return true;
    }
    function isTestSuiteNameAvailable(testSuiteName) {
        var isAvailable = true;
        if (testSuiteName) {
            $.ajax({
                type: "POST",
                url: '/TestSuite/IsTestSuiteNameAvailable',
                data: { testSuiteName: testSuiteName },
                async: false,
                success: function (returndata) {
                    isAvailable = returndata;
                    return returndata;
                }
            });
        }
        return isAvailable;
    }

    $(function () {
        SetNavigationMenuActive('TestSuite');
        createControls();
        //$("#TestSuiteName").on("change", isTestSuiteNameAvailable);

        $("#frmAddTestSuite").kendoValidator({
            rules: {
                Weightage: function (input, params) {
                    return validateWeightage(input, params);
                },
                TestSuiteName: function (input, params) {
                    if (input.is("[name=TestSuiteName]")) {
                        input.attr("data-TestSuiteName-msg", "Test suite name already exist.");
                        var isAvailable = isTestSuiteNameAvailable(input.val());
                        return isAvailable;
                    }
                    return true;
                }
            }
        });

        $("#OptionalQuestion").change(function () {
            var oQuestion = parseInt(100) - parseInt($(this).val());
            $("#PracticalQuestion").val(parseInt(oQuestion));
        });
        $("#PracticalQuestion").change(function () {
            var oQuestion = parseInt(100) - parseInt($(this).val());
            $("#OptionalQuestion").val(parseInt(oQuestion));
        });

        $("#TagCustomControl").on("click", ".addbtn", function () {
            var rowno = eval($(this).attr('data-val'));
            var control = formatOfCustomControl(rowno + 1);
            $("#TagCustomControl").append(control);
            $(".addbtn[data-val=" + rowno + "]").hide();
            if (rowno > 1)
                $(".removebtn[data-val=" + rowno + "]").hide();
            createControls();
        });

        $("#TagCustomControl").on("click", ".removebtn", function () {
            var $btn = $(this);
            $.when(showConfirmationWindow('Are you sure,  you want to delete this record?', '&nbsp;Delete')).then(function (confirmed) {
                if (confirmed) {
                    var rowno = eval($btn.attr('data-val')) - 1;
                    $(".addbtn[data-val=" + rowno + "]").show();
                    if (rowno > 1)
                        $(".removebtn[data-val=" + rowno + "]").show();
                    var div = $btn.closest('.form-group');
                    $(div).remove();
                }
            });


        });

        $("#btnSave").click(function () {
            window.onbeforeunload = null;
            if ($("#frmAddTestSuite").valid()) {
                tags = '';
                var TestSuiteId = $("#TestSuiteId").val();
                var IsCopy = $("#IsCopy").val();
                var TestSuiteName = $("#TestSuiteName").val();
                var Duration = $("#Duration").val();
                var Position = $("#Position").val();
                var Competency = $("#Competency").val();
                var ProjectName = $("#ProjectName").val();
                var FromExperience = $("#FromExperience").val();
                var ToExperience = $("#ToExperience").val();
                var OptionalQuestion = $("#OptionalQuestion").val();
                var PracticalQuestion = $("#PracticalQuestion").val();
                var Status = $("#Status").val();
                var SpecialInstruction = $("#SpecialInstruction").val();
                var Weights = '';
                var Proficiency = '';
                $('#TagCustomControl input.tagAutoComplete').each(function () {
                    if (tags == '') {
                        tags += $(this).val();
                    }
                    else {
                        tags += "," + $(this).val();
                    }
                })

                $('#TagCustomControl input.WeightageField').each(function () {
                    if (Weights == '') {
                        Weights += $(this).val();
                    }
                    else {
                        Weights += "," + $(this).val();
                    }
                })

                $('#TagCustomControl input.proficiencyDropDown').each(function () {
                    if (Proficiency == '') {
                        Proficiency += $(this).val();
                    }
                    else {
                        Proficiency += "," + $(this).val();
                    }
                })

                $.ajax(
                {
                    type: "POST",
                    url: "Save",
                    data: {
                        TestSuiteId: TestSuiteId,
                        IsCopy: IsCopy,
                        TestSuiteName: TestSuiteName,
                        Duration: Duration,
                        Position: Position,
                        Competency: Competency,
                        PrimaryTagNames: tags,
                        Weights: Weights,
                        Proficiency: Proficiency,
                        ProjectName: ProjectName,
                        Status: Status,
                        FromExperience: FromExperience,
                        ToExperience: ToExperience,
                        OptionalQuestion: OptionalQuestion,
                        PracticalQuestion: PracticalQuestion,
                        SpecialInstruction: SpecialInstruction
                    },
                    success: function (response) {
                        if (response != null && response.status == "success") {
                            $("#SuccessModel").modal();
                            if (IsCopy == "True") {
                                ShowMessage("Test suite copy created successfully.", 1);
                                redirectToTestSuiteList();
                            }
                            else if (TestSuiteId == 0) {
                                ShowMessage("Test suite created successfully.", 1);
                                redirectToTestSuiteList();
                            }
                            else {
                                ShowMessage("Test suite updated successfully.", 1);
                                redirectToTestSuiteList();
                            }
                        } else {
                            ShowMessage(response.message, 0);
                        }
                    },
                    error: function (response) {
                        ShowMessage("error!");
                    }
                });
            }
            else {
                $("#frmAddTestSuite").submit();
            }
        });

    });



    function addPosition() {
        $("#PositionForm")[0].reset();
        $("#addPositionPopup").modal('show');
    }
    function ValidateAndSavePostion() {
        if ($("#PositionForm").valid()) {
            $.ajax({
                type: "POST",
                url: '/Positions/PositionSave',
                data: $('#PositionForm').serialize(),
                success: function (returndata) {
                    $("#addPositionPopup").modal('hide');
                    var $PositionSelect = $('#Position').data('kendoDropDownList');
                    var multidata = $PositionSelect.dataSource.data();
                    multidata.unshift(returndata);
                    $("#PositionForm").trigger("reset");
                    $PositionSelect.value(returndata.PositionId);
                    $('#SavePositionButton').attr('disabled', false);
                }
            });
        }
        else {
            $("#PositionForm").trigger("reset");
            $('#SavePositionButton').attr('disabled', false);
        }
    }
    function savePosition() {
        $('#SavePositionButton').attr('disabled', true);
        setTimeout(ValidateAndSavePostion, 3000);
    }
    var dataItem1; //This should be Global variable
    function onSelectTag(e) {
        var selectedValue = this.dataItem(e.item.index()).TagName;
        if (selectedValue != null) {
            this.dataItem(e.item.index()).TagName = selectedValue;
        }
    }
    function onAdditionalData() {
        return {
            text: $("#TagName").val()
        };
    }


</script>


<div class="modal fade" id="addPositionPopup" role="dialog">
    <form id="PositionForm" action="/Position/Save" method="post">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><span>Add Position</span></h4>
                </div>
                <div class="modal-body" style="padding: 20px 30px 0px 30px;">

                    @Html.Partial("~/Views/Positions/AddPosition.cshtml", new Silicus.Ensure.Models.DataObjects.Position())
                </div>
                <div class="modal-footer">
                    <button type="button" style="width:70px;" id="SavePositionButton" onclick="savePosition()" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>
    </form>
</div>
