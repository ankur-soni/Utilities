@model Silicus.Ensure.Models.DataObjects.Panel
@using Kendo.Mvc.UI;


<div>

    @if (Request.IsAuthenticated)
    {
        @(Html.Kendo().Grid<Silicus.Ensure.Models.DataObjects.Panel>
    ().Name("PanelGrids")
    .Events(e => e.Edit("gvPanel_onRowEdit"))
    .DataSource(dataSource => dataSource
    .Ajax()
    .Model(model =>
    {
        model.Id(p => p.PanelId);
        model.Field(p => p.PanelId).Editable(false);

    })
    .Read(read => read.Action("GetPanelDetails", "Panel"))
    .Create(update => update.Action("PanelSave", "Panel"))
    .Update(update => update.Action("PanelUpdate", "Panel"))
    .Destroy(delete => delete.Action("PanelDelete", "Panel"))
    .Events(events => events.Error("error_handler").RequestEnd("requestend_handlerPanel"))
    )
    .Columns(columns =>
    {
        columns.Bound(p => p.PanelId).Visible(false).Width(250);
        columns.Bound(p => p.PanelName).Title("Panel name").Width(1250);
        columns.Command(command =>
        {
            command.Edit().HtmlAttributes(new { style = "margin-top:4px!important;" });
            command.Custom("Delete").Click("ConfirmDeletePanelRow").HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-delete", style = "margin-top:4px!important;" });
        }).Title("Actions").Width(660);

    })
    .Pageable(pager => { pager.PageSizes(true); })
    .Resizable(build => build.Columns(true))
    .Sortable()
    .ToolBar(toolbar =>
    {
    toolbar.Template(@<text>
        <div class="toolbar">
           
            <div class="row">
                <div class="col-xs-11 col-sm-8 col-md-7 col-lg-6 pull-right">
                    <div class="form-group M-T10 pull-right">
                        <a href='/Panels/PanelSave' class='k-button k-button-icontext k-grid-add addTag' style="margin-right:15px;"><span style="padding-right:5px;" class='fa fa-plus'></span>Add panel</a>
                        <div id="tagSearch1" style="width:250px;" class="input-group">
                            <span class="input-group-addon"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></span>
                            <input type="text" class="form-control" id='PanelFieldFilter' placeholder="Search" style="height: 31px;">
                            <span class="input-group-btn">
                                <button id="PanelSearch" class="btn btn-default btn-search" style="height:15px;" type="button"><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span></button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </text>);
    })
    .Editable(ed => ed.Mode(GridEditMode.InLine))
        )
    }
</div>

<script>

    $(document).ready(function () {



        $("#PanelFieldFilter").keyup(function () {

            var value = $("#PanelFieldFilter").val();
            grid = $("#PanelGrids").data("kendoGrid");
            var pageSize = grid.dataSource.pageSize();
            if (value.length > 0) {
                if (value) {
                    grid.dataSource.filter({ field: "PanelName", operator: "contains", value: value });
                    grid.dataSource.sort({ field: "PanelName", dir: "asc" });
                    grid.dataSource.pageSize(pageSize);
                } else {
                    grid.dataSource.filter({});
                }
            }
            else if (value == "")
                grid.dataSource.filter({});
        });

        $("#PanelSearch").click(function (e) {
            e.preventDefault();
            var datasource = $("#PanelGrids").data("kendoGrid").dataSource;
            //Clear filters:
            datasource.filter([]);
            $("#PanelFieldFilter").val('');
        });
    });

    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: {
                //define custom validation rule to match remote validation:
                mvcremotevalidation: function (input) {
                    if (input.is("[data-val-remote]") && input.val() != "") {
                        var remoteURL = input.attr("data-val-remote-url");
                        var valid;
                        $.ajax({
                            async: false,
                            type: "POST",
                            url: remoteURL,
                            data: JSON.stringify({ 'PanelName': input.val() }),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                valid = data;
                            }
                        });
                        return valid;

                    }
                    return true;
                }
            },
            messages: {
                mvcremotevalidation: function (input) {
                    return input.attr("data-val-remote");
                }
            }
        });

    })(jQuery, kendo);

    function gvPanel_onRowEdit(e) {
        if (e && e.model && e.model.isNew()) {
            $(".k-grid-update").html('<span><i class="fa fa-save"></i> Save </span>');
        }
    }

    function requestend_handlerPanel(e) {
        if (e.type == "destroy" && !e.response.Errors) {
            ShowMessage("Panel deleted successfully.", 1);
            RefreshKendoGrid('PanelGrids');
        }

        if (e.type == "update" && !e.response.Errors) {
            ShowMessage("Panel updated successfully.", 1);
            RefreshKendoGrid('PanelGrids');
        }

        if (e.type == "create" && !e.response.Errors) {
            ShowMessage("Panel created successfully.", 1);
            RefreshKendoGrid('PanelGrids');
        }

    }

    function error_handler(e) {
        ShowMessage(getErrorMessage(e, 0));
    }

    function ConfirmDeletePanelRow(e) {
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        deleteKendoGridRow('PanelGrids', data);
    }

</script>
