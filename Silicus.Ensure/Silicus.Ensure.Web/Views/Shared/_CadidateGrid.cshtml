@model Silicus.Ensure.Web.Models.UserViewModel
@using Silicus.Ensure.Models.Constants;
@using Kendo.Mvc.UI;

<div class="">

    <div class="toolbar">
        <div class="row">
            <div class="col-sm-12">
                <div class="col-sm-5 col-md-4 col-lg-3 M-T15 M-B15">
                    <div class="input-group">
                        <span class="input-group-addon"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></span>
                        <input type="text" class="form-control" id='FieldFilter' placeholder="Search" style="height: 38px;">
                        <span class="input-group-btn">
                            <button id="candidateSearch" class="btn btn-default" style="border:1px solid #0070B9!important" type="button"><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span></button>
                        </span>
                    </div>
                </div>

            </div>
        </div>
        <div class="row M-B15">
            <div class="col-sm-12">
                <div class="col-sm-4 col-md-3 col-lg-2">
                    <span class="themeColorBlue labelAlignMid"><b>Candidate Status</b></span>

                    @(Html.Kendo().DropDownListFor(m => m.CandidateStatus)
                    .Name("CandidateStatus")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Events(e => e.Change("Change"))

                    .BindTo(new List<SelectListItem>
                    () {
                        new SelectListItem(){
                    Text="All",
                    Value=""
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.New.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.New)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.TestAssigned.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.TestAssigned)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.TestSubmitted.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.TestSubmitted)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.UnderEvaluation.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.UnderEvaluation)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.Selected.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.Selected)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.Rejected.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.Rejected)
                    }
                    }).HtmlAttributes(new { style = "width: 100%", @class = "M-T5" }))
                </div>
                <div class="col-sm-4 col-md-3 col-lg-2">
                    <span class="themeColorBlue labelAlignMid"><b> Positions</b></span>

                    @(Html.Kendo().DropDownList()
                            .Name("Position")
                                    .Events(e => e.Change("PositionChange"))
                            .OptionLabel("All")
                            .BindTo(ViewBag.PositionListItem)
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .SelectedIndex(0)
                                    .HtmlAttributes(new { style = "width: 100%", @class = "M-T5" })
                    )
                </div>
                <div class="col-sm-4 col-md-3 col-lg-2 cust-mar">

                    <a href='#' onclick='AddNew();' class='k-button k-button-icontext k-grid-add'><span class='k-icon k-add'></span>Add candidate</a>
                </div>
            </div>
        </div>

    </div>

    <div class="table-responsive">

        @if (Request.IsAuthenticated)
        {
            @(Html.Kendo().Grid<Silicus.Ensure.Web.Models.UserViewModel>().Name("userGrids")
         .Columns(columns =>
              {
                  columns.Bound(p => p.FirstName).ClientTemplate("#=FirstName# #=LastName#").Title("Name").Width(200);
                  columns.Bound(p => p.RequisitionId).Title("Requisition id").Width(100);
                  columns.Bound(p => p.Position).Width(200);
                  columns.Bound(p => p.ContactNumber).Title("Contact number").Width(100);
                  columns.Bound(p => p.TotalExperienceInYear).ClientTemplate("#=TotalExperienceInYear#.#=TotalExperienceInMonth#").Title("Total experience").Width(80);
                  columns.Bound(p => p.PanelName).Title("Panel").Width(200);
                  columns.Bound(p => p.CandidateStatus).ClientTemplate(@"
                                                                        #if(CandidateStatus=='TestAssigned'){#
                                                                            Test Assigned
                                                                        #}
                                                                        else if(CandidateStatus=='TestSubmitted') {#
                                                                            Test Submitted
                                                                        #}
                                                                        else if(CandidateStatus=='UnderEvaluation') {#
                                                                            Under Evaluation
                                                                        #}
                                                                        else{#
                                                                            #=CandidateStatus#
                                                                        #}
                                                                        #").Title("Status").Width(250);
                  columns.Bound(c => c.UserId).ClientTemplate(@"<a class='k-button M-T4' href='" + Url.Action("CandidateAdd", "Admin") + "?UserId=#=UserId#'>Edit</a><a id='testSuiteDel' class='k-button M-T4' href='\\#' onclick='ConfirmDeleteUserRow(event)'>Delete</a>").Title("Actions").Width(500).Sortable(false);
                  columns.Bound(c => c.UserId).ClientTemplate(@"

                                         #if(CandidateStatus=='New'){#
                                        <a onclick=showTest('#=UserId#','#=TestStatus#') style='cursor:pointer'>Assign Test</a> |
                                        <a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>#if(PanelName){#Reassign Panel#} else{#Assign Panel #}#</a>
                                        #}
                                        else if(CandidateStatus=='TestAssigned') {#
                                        <a  class ='dialog-window' onclick=ReAssign('#=UserId#','#=TestStatus#') style='cursor:pointer'>Reassign Test</a> |
                                        <a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>#if(PanelName){#Reassign Panel#} else{#Assign Panel #}#</a> |
                                        <a  class ='dialog-window' onclick=ViewTest('#=TestSuiteId#','#=UserId#') style='cursor:pointer'>View Test</a>
                                        #}
                                        else if(CandidateStatus=='TestSubmitted') {#
                                        <a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>#if(PanelName){#Reassign Panel#} else{#Assign Panel #}#</a> |
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',2,#=TestSuiteId#,'#=UserId#','#=UserApplicationId#') style='cursor:pointer'>View Test</a>
                                        #}
                                        else if(CandidateStatus=='UnderEvaluation') {#
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',2,#=TestSuiteId#,'#=UserId#','#=UserApplicationId#') style='cursor:pointer'>View Test</a>
                                        #}
                                        else if(CandidateStatus=='Selected'||CandidateStatus=='Rejected') {#
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',2,#=TestSuiteId#,'#=UserId#','#=UserApplicationId#') style='cursor:pointer'>View Test</a>
                                        #}

                                        #").Title("Test actions").Width(600).Sortable(false);

              })
            .DataSource(dataSource => dataSource
                      .Ajax()
                      .Model(model =>
                      {
                          model.Id(p => p.UserId);
                          model.Field(p => p.UserId).Editable(false);
                      })

                          .Read(read => read.Action("GetCandidateDetails", "User"))
                          .Create(update => update.Action("CreateUser", "User"))
                          .Update(update => update.Action("UpdateUser", "User"))
                          .Destroy(update => update.Action("DeleteUser", "User"))
                          .PageSize(10)
                          .ServerOperation(false)
                     )
                  .Pageable(p => p.PageSizes(true))
                  .Sortable()
                  .Resizable(resizing => resizing.Columns(true))
            )


        }

    </div>
</div>