@model Silicus.Ensure.Web.Models.UserViewModel
@using Kendo.Mvc.UI;
@{
    ViewBag.Title = "CandidateAdd";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="main-content">
    @if (Model.UserId != 0)
    {
        <h2>Edit Candidate</h2>
    }
    else
    {
        <h2>Add Candidate</h2>
    }
    @using (Html.BeginForm("CandidateSave", "User", FormMethod.Post, new { id = "frmSearchAllNdc", EncType = "multipart/form-data" }))
    {
        <input type="hidden" id="Role" name="Role" value="@Silicus.Ensure.Models.Constants.RoleName.Candidate.ToString()" />
        @Html.HiddenFor(m => m.UserId)
        <div class="fluid mt20">
            <div class="row" style="margin-bottom:10px!important">
                <div class="alert alert-success" id="messageDiv">
                    <strong>Error!</strong> <span id="messageContent">@Html.ValidationSummary(true)</span>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.FirstName)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.FirstName)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.MiddleName)
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.MiddleName, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom:10px!important">
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.LastName)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.LastName)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Position)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @(Html.Kendo().DropDownListFor(model => model.Position)
                            .OptionLabel("--Select--")
                            .BindTo(Model.PositionList)
                            .DataTextField("PositionName")
                            .DataValueField("PositionName")
                            .Value(Model.Position)
                            .HtmlAttributes(new { style = "width: 100%;border-color: #c5c5c5;" })
                        )
                        @Html.ValidationMessageFor(m => m.Position)
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom:10px!important">
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RequisitionId)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.RequisitionId, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.RequisitionId)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Gender)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @(Html.Kendo().DropDownListFor(m => m.Gender)
                        .OptionLabel("--Select--")
                        .Name("Gender")
                        .DataTextField("Text")
                        .DataValueField("Value")
                            .BindTo(new List<SelectListItem>
                            () {
                            new SelectListItem(){
                            Text="Male",
                            Value="Male"
                            },
                            new SelectListItem(){
                            Text="Female",
                            Value="Female"
                            }
                            }).HtmlAttributes(new { style = "width: 100%" }))
                        @Html.ValidationMessageFor(m => m.Gender)
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom:10px!important">
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Email)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Email)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.CurrentLocation)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.CurrentLocation, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CurrentLocation)
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom:10px!important">
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.DOB)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        <input type="text" style="width:100%" name="DOB" id="DOB" value="@if (Model.UserId != 0)
                                                                                         { @Model.DOB.ToShortDateString()}" />
                        @Html.ValidationMessageFor(m => m.DOB)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.ContactNumber)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.ContactNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ContactNumber)
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom:10px!important">
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.ClientName)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.ClientName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ClientName)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Technology)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.Technology, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Technology)
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom:10px!important">
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.TotalExperience)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.TotalExperience, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.TotalExperience)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RelevantExperience)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.RelevantExperience, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.RelevantExperience)
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom:10px!important">
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.CurrentCompany)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.CurrentCompany, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CurrentCompany)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.CurrentTitle)<b style="color:Red;">*</b>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBoxFor(model => model.CurrentTitle, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CurrentTitle)
                    </div>
                </div>
            </div>
        </div>
        <div class="row" style="margin-bottom:10px!important">
            <div class="col-md-6">
                <div class="col-md-6">
                    Upload Resume:
                </div>
                <div class="col-md-6">
                    <div class="demo-section k-content">
                        <input name="files" id="file" type="file" />
                    </div>
                    @if (!string.IsNullOrEmpty(Model.ResumeName))
                    {
                        <div id="uploadFileLink" class="postuploadedfilesholder clearfix">
                            <div class="fileupload">
                                <a href="@Html.Raw(Url.Content(Model.ResumePath))" targ target="_blank">@Html.Raw(Model.ResumeName)</a>
                                <span class="deleteupload" title="Delete"><a onclick="DeleteF()">x</a></span>
                            </div>
                        </div>
                        <script type="text/javascript">
                            function DeleteF() {
                                $("#uploadFileLink").html("");
                                $("#ResumeName").val("");
                            }
                        </script>
                    }
                </div>
            </div>
        </div>
        <div class="row" style="margin-bottom:10px!important">
            <div class="col-md-6"></div>
            <div class="col-md-2 col-md-offset-4">
                @(Html.Kendo().Button()
                            .Name("btnCancel").Icon("cancel")
            .HtmlAttributes(new { type = "button" })
            .Content("Cancel")
            .Events(ev => ev.Click("onCancelClick")))

                @(Html.Kendo().Button()
                 .Name("btnSave").Icon("tick")
                .HtmlAttributes(new { type = "submit" })
                .Content("Save"))
            </div>
        </div>
    }
</div>
<script>
    $(document).ready(function () {
        $('#messageDiv').fadeOut(5000);
    });
    $(document).ready(function () {

        $("#DOB").kendoDatePicker({
            format: "dd/MM/yyyy"
        });
    });

    $(function () {
        $("form").kendoValidator();
        $('.k-invalid').css('margin-bottom','0!important');
    });
    function onCancelClick() {
        window.location = '@Url.Action("Candidates", "Admin")';
    }

    //register custom validation rules
    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: { // custom rules
                experiencevalidation: function (input, params) {
                    if (input.is("[name='DOB']")) {
                        if (!(input.val() != "")) {
                            input.attr("data-experiencevalidation-msg", "Date of birth is required!");
                            return false;
                        }
                        else if(input.val() != "")
                        {
                            var d=new Date();
                            if( $('#DOB').val()>d)
                            {
                                input.attr("data-experiencevalidation-msg", "Date of birth can not be greater than today!");
                                return false;
                            }
                        }

                    }
                    if (input.is("[name='Position']")) {
                        if ((input.val() != "" && input.val() == "--Select--")) {
                            input.attr("data-experiencevalidation-msg", "Position is required!");
                            return false;
                        }
                    }
                    if (input.is("[data-val-remote]") && input.val() != "") {
                        var remoteURL = input.attr("data-val-remote-url");
                        if (!checkMail(input.val(), remoteURL)) {
                            input.attr("data-experiencevalidation-msg", "Email is already exist!");
                            return false;
                        }
                    }
                    if (input.is("[id='file']")) {
                        if (!(input.val() != "")) {
                            input.attr("data-experiencevalidation-msg", "File is required!");
                            return false;
                        }
                        else if(input.val() != "")
                        {
                            var fileName=$('#file')[0].files[0].name;
                            var extension=fileName.substring(fileName.lastIndexOf('.') + 1)
                            if(extension.toLowerCase()== "doc"||extension.toLowerCase() == "docx"||extension.toLowerCase() == "pdf")
                            {
                                return true;
                            }
                            else
                            {
                                input.attr("data-experiencevalidation-msg", "Allowed extensions are '.doc, .docx, pdf'!");
                                return false;
                            }
                        }
                    }
                    return true;
                }
            },
            messages: { //custom rules messages
                experiencevalidation: function (input) {
                    // return the message text
                    return input.attr("data-val-experiencevalidation");
                }
            }
        });
    })(jQuery, kendo);

    function checkMail(email,remoteURL)
    {
        var valid;
        $.ajax({
            async: false,
            type: "POST",
            url: remoteURL,
            data: JSON.stringify({ 'Email': email,'UserId':@Model.UserId }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                valid = data;
            }
        });
        return valid;
    }
</script>
<style>
    .height {
        height: 250px;
    }
</style>
