@model Silicus.Ensure.Web.Models.UserViewModel
@using Silicus.Ensure.Models.Constants;
@using Kendo.Mvc.UI;

@{
    ViewBag.Title = "Roles";
}
@{
    if (TempData["Success"] != null && !string.IsNullOrWhiteSpace(@TempData["Success"].ToString()))
    {
        var message = TempData["Success"] as string;
        <script type="text/javascript">
            var jsMessage='@Html.Raw(@message)';
            ShowMessage(jsMessage,true);
        </script>
    }
}
<style>
    .k-loading-image {
        background-image: none !important;
    }
</style>
<script>
    $(document).ready(function () {
        showCustomLoader();
        SetNavigationMenuActive('Candidates');
        $("#FieldFilter").keyup(function () {
            var value = $("#FieldFilter").val();
            grid = $("#userGrids").data("kendoGrid");
            var pageSize = grid.dataSource.pageSize();
            if (value.length > 0) {
                if (value) {
                    var filter = { logic: "or", filters: [] };
                    filter.filters.push({ field: "FirstName", operator: "contains", value: value });
                    filter.filters.push({ field: "RequisitionId", operator: "contains", value: value });
                    filter.filters.push({ field: "ContactNumber", operator: "contains", value: value });
                    filter.filters.push({ field: "PanelName", operator: "contains", value: value });
                    filter.filters.push({ field: "RecruiterName", operator: "contains", value: value });
                    filter.filters.push({ field: "Position", operator: "contains", value: value });
                    grid.dataSource.query({ filter: filter });
                    grid.dataSource.pageSize(pageSize);
                } else {
                    grid.dataSource.filter({});
                }
            }
            else if (value == "")
                grid.dataSource.filter({});
        });
        $("#candidateSearch").click(function (e) {
            e.preventDefault();
            var datasource = $("#userGrids").data("kendoGrid").dataSource;
            //Clear filters:
            datasource.filter([]);
            $("#FieldFilter").val('');
        });
        $(".loader-overlay").hide();
    });
    function showTest(UserId, TestStatus) {
        if (TestStatus == '@CandidateStatus.New.ToString()') {
            showCustomLoader();
            $('#assignTestHeader').text('Assign test');
            $.ajax({
                type: 'post',
                async: false,
                url: "/Admin/CandidatesSuit",
                cache: false,
                data: { UserId: UserId },
                contenttype: "application/json; charset=utf-8",
                success: function (data) {
                    $("#CandidateInfo").html(data);
                    $('#myModal').fadeIn();
                    $('#myModal').modal();
                }
            });
        }
        else {
            alert("Sorry! Can't perform this operation.");
            $(".loader-overlay").hide();
        }
    }

    function ReAssignPanel(UserId) {
        var modalHeader = 'Reassign panel';
        AssignPanel(UserId, modalHeader);
    }

    function AssignPanel(UserId, modalHeader) {
        showCustomLoader();
        $.ajax({
            type: 'post',
            async: false,
            url: "/Admin/AssignPanel",
            cache: false,
            data: { UserId: UserId, IsReassign: 1 },
            contenttype: "application/json; charset=utf-8",
            success: function (data) {
                $("#PanelInfo").html(data);
                $('#myModal1').fadeIn();
                $('#myModal1').modal();
                if (modalHeader) {
                    $('#panelModalHeader').text(modalHeader);
                }
            }
        });
    }

    function ReAssignRecruiter(UserId) {
        var modalHeader = 'Reassign recruiter';
        AssignRecruiter(UserId, modalHeader);
    }

    function AssignRecruiter(UserId, modalHeader) {
        showCustomLoader();
        $.ajax({
            type: 'post',
            async: false,
            url: "/Admin/AssignRecruiter",
            cache: false,
            data: { UserId: UserId, IsReassign: 1 },
            contenttype: "application/json; charset=utf-8",
            success: function (data) {
                $("#RecruiterInfo").html(data);
                $('#recruiterModal').fadeIn();
                $('#recruiterModal').modal();
                if (modalHeader) {
                    $('#recruiterModalHeader').text(modalHeader);
                }
            }
        });
        //}
    }
    function ReAssign(UserId, TestStatus) {
        if (TestStatus == '@CandidateStatus.TestAssigned.ToString()') {
            showCustomLoader();
            $('#assignTestHeader').text('Reassign test');
            $.ajax({
                type: 'post',
                async: false,
                url: "/Admin/CandidatesSuit",
                cache: false,
                data: { UserId: UserId, IsReassign: 1 },
                contenttype: "application/json; charset=utf-8",
                success: function (data) {
                    $("#CandidateInfo").html(data);
                    $('#myModal').fadeIn();
                    $('#myModal').modal();
                }
            });
        }
    }


    $(function () {
        $("#Savebtn").bind("click", function () {        
            showCustomLoader();
            var chkCheck = false;
            $('input:checkbox').each(function () {
                if ($(this).is(':checked')) {
                    chkCheck = true;
                }
            });
            if (chkCheck) {
                var uId = $("#CurrentUser").val();
                var IsReAssign = $("#IsReAssign").val();
                var checkvals = $("[class='check']:checked").attr("value")

                $('#myModal').find('input[type=checkbox]:checked').removeAttr('checked');
                $.ajax({
                    type: 'post',
                    async: false,
                    url: "/Admin/AssignSuite",
                    cache: false,
                    data: { SuiteId: checkvals, UserId: uId, IsReAssign: IsReAssign },
                    contenttype: "application/json; charset=utf-8",
                    success: function (returndata) {
                        if (returndata == 1) {
                            $('#myModal').fadeOut();
                            ShowMessage("Test suite assigned successfully.", 1);
                            $('#userGrids').data('kendoGrid').dataSource.read();
                            $('#userGrids').data('kendoGrid').refresh();
                            $(".loader-overlay").hide();
                        }
                    },
                    error: function (er) {
                        $(".loader-overlay").hide();
                    }
                });
            }
            else {
                toastr.error('Please select at least one test suite.')
                $(".loader-overlay").hide();
            }
        });

    });

    $(function () {
        $("#SavePanlebtn").bind("click", function () {
            showCustomLoader();
            var chkCheck = false;
            $('input:checkbox').each(function () {
                if ($(this).is(':checked')) {
                    chkCheck = true;
                }
            });
            if (chkCheck) {
                var uId = $("#CurrentUser").val();
                var IsReAssign = $("#IsReAssign").val();
                var checkvals = $("#PanelInfo [class='check']:checked").attr("value")
                $.ajax({
                    type: 'post',
                    async: false,
                    url: "/Admin/AssignPanelCandidate",
                    cache: false,
                    data: { PUserId: checkvals, UserId: uId, IsReAssign: IsReAssign },
                    contenttype: "application/json; charset=utf-8",
                    success: function (returndata) {
                        if (returndata == 1) {
                            $('#userGrids').data('kendoGrid').dataSource.read();
                            $('#userGrids').data('kendoGrid').refresh();
                            ShowMessage("Panel assigned successfully.", 1);
                            $('#myModal1').fadeOut();
                            $(".loader-overlay").hide();
                        }
                    },
                    error: function (er) {
                        $('#myModal1').fadeOut();
                        $(".loader-overlay").hide();
                    }
                });
            }
            else {
                toastr.error('Please select at least one panel.')
                $(".loader-overlay").hide();
            }
        });

    });

    $(function () {
        $("#SaveRecruiterbtn").bind("click", function () {
            var chkCheck = false;
            $('input:checkbox').each(function () {
                if ($(this).is(':checked')) {
                    chkCheck = true;
                }
            });
            if (chkCheck) {
                var uId = $("#CurrentUser").val();
                var IsReAssign = $("#IsReAssign").val();
                var checkvals = $("#RecruiterInfo [class='check']:checked").attr("value")
                $.ajax({
                    type: 'post',
                    async: false,
                    url: "/Admin/AssignRecruiterCandidate",
                    cache: false,
                    data: { RecruiterUserId: checkvals, UserId: uId, IsReAssign: IsReAssign },
                    contenttype: "application/json; charset=utf-8",
                    success: function (returndata) {
                        if (returndata == 1) {
                            $('#userGrids').data('kendoGrid').dataSource.read();
                            $('#userGrids').data('kendoGrid').refresh();
                            ShowMessage("Recruiter assigned successfully.", 1);
                            $('#recruiterModal').fadeOut();
                            $(".loader-overlay").hide();
                        }
                    },
                    error: function (er) {
                        $('#recruiterModal').fadeOut();
                        $(".loader-overlay").hide();
                    }
                });
            }
            else {
                toastr.error('Please select at least one recruiter.')
                $(".loader-overlay").hide();
            }
        });

    });






    function Change() {
        dropFilter();
    }

    function dropFilter() {

        var CandidateStatus = $("#CandidateStatus").val();
        var Position = $("#Position").val();

        var grid = $("#userGrids").data("kendoGrid");
        var filterArray = new Array();

        filterArray.push({ field: "CandidateStatus", operator: "contains", value: CandidateStatus });
        filterArray.push({ field: "Position", operator: "contains", value: Position });
        grid.dataSource.filter(filterArray);
    }

    function PositionChange() {
        dropFilter();
    }

    function AddNew() {
        window.location.href = "/Admin/CandidateAdd?UserId=0";
        return false;
    }

    function ConfirmDeleteUserRow(e) {
        var tr = $(e.target).closest("tr");
        var data = $("#userGrids").data('kendoGrid').dataItem(tr);
        deleteCandidateKendoGridRow('userGrids', data);
    }

    function CheckAssign(status, id, TestSuiteId, UserId, UserApplicationId) {
        if (id == 1) {
            window.location.href = "/Admin/ViewQuestion?UserId=" + UserId + '&TestSuiteId=' + TestSuiteId;
            return false;
        }
        else if (id == 2) {
            window.location.href = "/Reviewer/ReviewTest?UserApplicationId=" + UserApplicationId;
            return false;
        }
        else {
            toastr.error('Please assign the test suite first.');
        }
    }
    function ViewTest(testSuiteId, userId) {
        $.ajax({
            type: 'post',
            async: false,
            url: "/Admin/PartialTestSuitView",
            cache: false,
            data: { testSuiteId: testSuiteId, userId: userId },
            success: function (returndata) {
                $("#TestSuitInfo").html(returndata);
                $('#ViewTest').fadeIn();
                $('#ViewTest').modal();
            },
            error: function (er) {
                $('#ViewTest').fadeOut();
            }
        });
    }

    function deleteCandidateKendoGridRow(gridId, data) {
        swal({
            title: "Are you sure,",
            text: "Are you sure, you want to archive this record ? Please note that a candidate once archived cannot be made active again.",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            closeOnConfirm: true,
            closeOnCancel: true
        },
        function (isConfirm) {
            if (isConfirm) {
                $.ajax({
                    type: 'post',
                    async: false,
                    url: "/user/DeleteUser",
                    cache: false,
                    data: { UserId: data.UserId },
                    success: function (returndata) {
                        grid = $("#" + gridId).data("kendoGrid");
                        grid.dataSource.sync();
                        $("#" + gridId).data("kendoGrid").dataSource.read();
                        ShowMessage("Candidate has been archived.", 1);
                    },
                    error: function (er) {
                        ShowMessage("Error occured in archiveing.", 1);
                    }
                });
            } else {

            }
        });
    }


    $(document).ajaxStop(function () {
        $(".loader-overlay").hide();
    });

    $(document).ajaxStart(function () {
        showCustomLoader();
    });
</script>
<div class="">

    <div class="toolbar">
        <div class="row">
            <div class="col-sm-12">
                <div class="col-sm-5 col-md-4 col-lg-3 M-T15 M-B15">
                    <div class="input-group">
                        <span class="input-group-addon"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></span>
                        <input type="text" class="form-control" id='FieldFilter' placeholder="Search" style="height: 38px;">
                        <span class="input-group-btn">
                            <button id="candidateSearch" class="btn btn-default" style="border:1px solid #0070B9!important" type="button"><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span></button>
                        </span>
                    </div>
                </div>

            </div>
        </div>
        <div class="row M-B15">
            <div class="col-sm-12">
                <div class="col-sm-4 col-md-3 col-lg-2">
                    <span class="themeColorBlue labelAlignMid"><b>Candidate Status</b></span>

                    @(Html.Kendo().DropDownListFor(m => m.CandidateStatus)
                    .Name("CandidateStatus")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Events(e => e.Change("Change"))

                    .BindTo(new List<SelectListItem>
                    () {
                        new SelectListItem(){
                    Text="All",
                    Value=""
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.New.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.New)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.TestAssigned.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.TestAssigned)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.TestSubmitted.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.TestSubmitted)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.UnderEvaluation.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.UnderEvaluation)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.Selected.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.Selected)
                    },
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.Rejected.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.Rejected)
                    }                    ,
                    new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.Archived.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.Archived)
                    },
                     new SelectListItem(){
                    Text=Convert.ToString(CandidateStatus.OnHold.CandidateStatusString()),
                    Value=Convert.ToString(CandidateStatus.OnHold)
                    }
                    }).HtmlAttributes(new { style = "width: 100%", @class = "M-T5" }))
                </div>
                <div class="col-sm-4 col-md-3 col-lg-2">
                    <span class="themeColorBlue labelAlignMid"><b> Positions</b></span>

                    @(Html.Kendo().DropDownList()
                            .Name("Position")
                                    .Events(e => e.Change("PositionChange"))
                            .OptionLabel("All")
                            .BindTo(ViewBag.PositionListItem)
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .SelectedIndex(0)
                                    .HtmlAttributes(new { style = "width: 100%", @class = "M-T5" })
                    )
                </div>
                <div class="col-sm-4 col-md-3 col-lg-2 cust-mar">

                    <a href='#' onclick='AddNew();' class='k-button k-button-icontext k-grid-add'><span class='k-icon k-add'></span>Add candidate</a>
                </div>
            </div>
        </div>

    </div>

    <div class="table-responsive">

        @if (Request.IsAuthenticated)
        {
            @(Html.Kendo().Grid<Silicus.Ensure.Web.Models.UserViewModel>().Name("userGrids")
         .Columns(columns =>
         {
             columns.Bound(p => p.FirstName).ClientTemplate("#=FirstName# #=LastName#").Title("Name").Width(200);
             columns.Bound(p => p.RequisitionId).Title("Requisition id").Width(100);
             columns.Bound(p => p.Position).Width(200);
             columns.Bound(p => p.ContactNumber).Title("Contact number").Width(100);
             columns.Bound(p => p.TotalExperienceInYear).ClientTemplate("#=TotalExperienceInYear#(y) #=TotalExperienceInMonth#(m)").Title("Total experience").Width(80);
             columns.Bound(p => p.PanelName).Title("Panel").Width(200);
             columns.Bound(p => p.RecruiterName).Title("Recruiter").Width(200);
             columns.Bound(p => p.CandidateStatus).ClientTemplate(@"
                                                                        #if(CandidateStatus=='TestAssigned'){#
                                                                            Test assigned
                                                                        #}
                                                                        else if(CandidateStatus=='TestSubmitted') {#
                                                                            Test submitted
                                                                        #}
                                                                        else if(CandidateStatus=='UnderEvaluation') {#
                                                                            Under evaluation
                                                                        #}
                                                                        else if(CandidateStatus=='OnHold') {#
                                                                           On hold
                                                                        #}
                                                                        else{#
                                                                            #=CandidateStatus#
                                                                        #}
                                                                        #").Title("Status").Width(250);
             columns.Bound(c => c.UserId).ClientTemplate(@"<a class='k-button M-T4' href='" + Url.Action("CandidateAdd", "Admin") + "?UserId=#=UserId#'>Edit</a>    #if(CandidateStatus!='Archived'){# <a id='testSuiteDel' class='k-button M-T4' href='\\#' onclick='ConfirmDeleteUserRow(event)'>Archive</a>  #} #").Title("Actions").Width(500).Sortable(false);
             columns.Bound(c => c.UserId).ClientTemplate(@"

                                         #if(CandidateStatus=='New'){#
                                        <a onclick=showTest('#=UserId#','#=TestStatus#') style='cursor:pointer'>Assign test</a> |
                                        #if(PanelName){#<a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>Reassign panel#} else{#<a  class ='dialog-window' onclick=AssignPanel('#=UserId#') style='cursor:pointer'>Assign panel #}#</a> |
                                       #if(RecruiterName){# <a  class ='dialog-window' onclick=ReAssignRecruiter('#=UserId#') style='cursor:pointer'>Reassign Recruiter#} else{#<a  class ='dialog-window' onclick=AssignRecruiter('#=UserId#') style='cursor:pointer'>Assign recruiter #}#</a>
                                         #if(HasHistory){#<a class='dialog-window' href='/Admin/CandidateHistory?UserId=+#=UserId#' style='cursor:pointer'>| View history #}#</a>
#}
                                        else if(CandidateStatus=='TestAssigned') {#
                                        <a  class ='dialog-window' onclick=ReAssign('#=UserId#','#=TestStatus#') style='cursor:pointer'>Reassign test</a> |
                                        #if(PanelName){#<a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>Reassign panel#} else{#<a  class ='dialog-window' onclick=AssignPanel('#=UserId#') style='cursor:pointer'>Assign panel #}#</a> |
                                         #if(RecruiterName){# <a  class ='dialog-window' onclick=ReAssignRecruiter('#=UserId#') style='cursor:pointer'>Reassign recruiter#} else{#<a  class ='dialog-window' onclick=AssignRecruiter('#=UserId#') style='cursor:pointer'>Assign recruiter #}#</a> |
                                        <a  class ='dialog-window' onclick=ViewTest('#=TestSuiteId#','#=UserId#') style='cursor:pointer'>View test</a>
                                        #}
                                        else if(CandidateStatus=='TestSubmitted' || CandidateStatus=='OnHold') {#
                                        #if(PanelName){#<a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>Reassign panel#} else{#<a  class ='dialog-window' onclick=AssignPanel('#=UserId#') style='cursor:pointer'>Assign panel #}#</a> |
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',2,#=TestSuiteId#,'#=UserId#','#=UserApplicationId#') style='cursor:pointer'>View test</a>
                                      |  #if(RecruiterName){# <a  class ='dialog-window' onclick=ReAssignRecruiter('#=UserId#') style='cursor:pointer'>Reassign recruiter#} else{#<a  class ='dialog-window' onclick=AssignRecruiter('#=UserId#') style='cursor:pointer'>Assign recruiter #}#</a>
                                        #}
                                        else if(CandidateStatus=='UnderEvaluation') {#
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',2,#=TestSuiteId#,'#=UserId#','#=UserApplicationId#') style='cursor:pointer'>View test</a>
                                      |  #if(RecruiterName){# <a  class ='dialog-window' onclick=ReAssignRecruiter('#=UserId#') style='cursor:pointer'>Reassign recruiter#} else{#<a  class ='dialog-window' onclick=AssignRecruiter('#=UserId#') style='cursor:pointer'>Assign recruiter #}#</a>
                                        #}
                                        else if(CandidateStatus=='Selected'||CandidateStatus=='Rejected') {#
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',2,#=TestSuiteId#,'#=UserId#','#=UserApplicationId#') style='cursor:pointer'>View test</a>
                                            |#if(RecruiterName){# <a  class ='dialog-window' onclick=ReAssignRecruiter('#=UserId#') style='cursor:pointer'>Reassign recruiter#} else{#<a  class ='dialog-window' onclick=AssignRecruiter('#=UserId#') style='cursor:pointer'>Assign recruiter #}#</a>
                                        #}
                                         else if(CandidateStatus=='Archived') {#
                                   <a class='dialog-window' href='/Admin/CandidateHistory?UserId=+#=UserId#' style='cursor:pointer'>View history</a>
                                        #}


                                       #").Title("Test actions").Width(600).Sortable(false);

         })
                                       .DataSource(dataSource => dataSource
                                       .Ajax()
                                       .Model(model =>
                                       {
                                           model.Id(p => p.UserId);
                                           model.Field(p => p.UserId).Editable(false);
                                       })

                                       .Read(read => read.Action("GetCandidateDetails", "User", new { RoleName = RoleName.Candidate.ToString() }))
                                       .Create(update => update.Action("CreateUser", "User"))
                                       .Update(update => update.Action("UpdateUser", "User"))
                                       .PageSize(10)
                                       .ServerOperation(true)
                                       )
                                       .Pageable(p => p.PageSizes(true))
                                       .Sortable()
                                       .Resizable(resizing => resizing.Columns(true))
            )


        }

    </div>
</div>

<div class="modal fade" id="myModal" data-backdrop="static" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 id="assignTestHeader" class="modal-title">Assign test</h4>
            </div>
            <div class="modal-body" id="CandidateInfo">

            </div>
            <div class="modal-footer">
                <button type="button" style="width:70px;" class="btn btn-primary" id="Savebtn">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModal1" data-backdrop="static" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 id="panelModalHeader" class="modal-title">Assign panel</h4>
            </div>
            <div class="modal-body" id="PanelInfo">

            </div>
            <div class="modal-footer">
                <button type="button" style="width:70px;" class="btn btn-primary" id="SavePanlebtn">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="recruiterModal" data-backdrop="static" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 id="recruiterModalHeader" class="modal-title">Assign recruiter</h4>
            </div>
            <div class="modal-body" id="RecruiterInfo">

            </div>
            <div class="modal-footer">
                <button type="button" style="width:70px;" class="btn btn-primary" id="SaveRecruiterbtn">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ViewTest" data-backdrop="static" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">View test suite</h4>
            </div>
            <div class="modal-body" id="TestSuitInfo">

            </div>
        </div>
    </div>
</div>
<style>
    #userGrids .k-loading-image {
        background-image: none;
    }
</style>
