@using Kendo.Mvc.UI;

@model System.Web.Mvc.JsonResult
@{
    ViewBag.Title = "Dashboard";
}
<script src="https://code.highcharts.com/highcharts.js"></script>

<script>
    $(document).ready(function () {

        SelectedMenu('#question-bank-dashboard');
        $("#questionbank-submenu").css("display", "block");
        $("#questionbank-link a span.arrow").addClass("open");
        //SetNavigationMenuActive('Marksheer');
        debugger;
        var model = @Html.Raw(Json.Encode(Model));

        Highcharts.chart('container', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Technology wise Question Count'
            },
            xAxis: {
                categories: model.Data.catList,
                crosshair: true
            },
            yAxis: {
                allowDecimals: false,
                title: {
                    text: 'Units'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color:'gray'
                    }
                    , formatter: function()
                    {
                        return '<b> Total :' + this.total + '</b>'
                    }
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y}</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    dataLabels: {
                        enabled: true,
                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                        style: {
                            textOutline: false
                        },
                        formatter: function() {
                            if (this.y > 0) {
                                return this.y ;
                            } else {
                                return '';
                            }
                        }
                    }
                }
            },
            series: [{
                name: 'Beginner',
                data: model.Data.BeginerList

            }, {
                name: 'Intermediate',
                data: model.Data.ItermidiateList

            }, {
                name: 'Expert',
                data: model.Data.ExpertList

            }]
        });


    });

    function onDataBound()
    {

        //var test = $('#questionList').data('kendoGrid').dataSource.data();

        //var categories = new Array();
        //var BeginerList = new Array();
        //var ItermidiateList = new Array();
        //var ExpertList = new Array();

        //$.each(test, function (index, data) {
        //    if(-1 !== (idx = jQuery.inArray(data.CreatedBy, categories))) {
        //    } else {
        //        categories.push(data.CreatedBy);
        //    }
        //});

        //$.each(categories, function (index, cat) {
        //    var p=i=e=false;
        //    $.each(test, function (index1, data) {
        //        if(data.CreatedBy == cat)
        //        {
        //            if(data.ProficiencyLevel == "Beginner")
        //            {
        //                p= true;
        //                BeginerList.push(data.Count);
        //            }
        //            if(data.ProficiencyLevel == "Intermediate")
        //            {
        //                i = true;
        //                ItermidiateList.push(data.Count);
        //            }
        //            if(data.ProficiencyLevel == "Expert")
        //            {
        //                e= true;
        //                ExpertList.push(data.Count);
        //            }
        //        }
        //    });

        //    if(p==false)
        //        BeginerList.push(0);
        //    if(i==false)
        //        ItermidiateList.push(0);
        //    if(e==false)
        //        ExpertList.push(0);
        //});

        //debugger;
        //Highcharts.chart('GridChart', {
        //    //data: {
        //    //    table: test
        //    //},
        //    chart: {
        //        type: 'column'
        //    },
        //    title: {
        //        text: 'Contributor wise Question Count'
        //    },
        //    xAxis: {
        //        categories: categories,
        //        crosshair: true
        //    },
        //    yAxis: {
        //        allowDecimals: false,
        //        title: {
        //            text: 'Units'
        //        },
        //        stackLabels: {
        //            enabled: true,
        //            style: {
        //                fontWeight: 'bold',
        //                color:'gray'
        //            }
        //            , formatter: function()
        //            {
        //                return '<b> Total :' + this.total + '</b>'
        //            }
        //        }
        //    },
        //    series: [{
        //        name: 'Beginner',
        //        data: BeginerList

        //    }, {
        //        name: 'Intermediate',
        //        data: ItermidiateList

        //    }, {
        //        name: 'Expert',
        //        data: ExpertList

        //    }],plotOptions: {
        //        column: {
        //            stacking: 'normal',
        //            dataLabels: {
        //                enabled: true,
        //                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
        //                style: {
        //                    textOutline: false
        //                },
        //                formatter: function() {
        //                    if (this.y > 0) {
        //                        return this.y ;
        //                    } else {
        //                        return '';
        //                    }
        //                }
        //            }
        //        }
        //    },

        //    tooltip: {
        //        formatter: function () {
        //            return '<b>' + this.series.name + '</b> : ' +
        //                this.point.y
        //        }
        //    }
        //});
    }

    function StatusDropDownList(args) {
        args.element.kendoDropDownList({
            dataSource: [
               { text: "ReadyForReview", value: "ReadyForReview" },
               { text: "Rejected", value: "Rejected" },
               { text: "OnHold", value: "OnHold" },
               { text: "Approved", value: "Approved" }
            ],
            dataTextField: "text",
            dataValueField: "value",
            autoBind: false,
            valuePrimitive: true
        });
    }
    function TechnologyDropDownList(args) {
        args.element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: {
                        url: "/Technology/GetAllTechnologiesForDropDown"
                    }
                }
            },
            dataTextField: "TechnologyName",
            dataValueField: "TechnologyName",
            autoBind: false,
            valuePrimitive: true
        });
    }
</script>
<div class="row">
    <div class="col-sm-12">
        <h1 class="page-title">
            Dashboard
        </h1>
    </div>
</div>

<div id="exTab1" class="container">
    <div id="Tabs" role="tabpanel">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
      
                <li class="active">
                    <a href="#1a" data-toggle="tab">Summary</a>
                </li>
                <li>
                    <a href="#2a" data-toggle="tab">Detail</a>
                </li>

            </ul>

            <div class="tab-content clearfix" role="tabpanel">
                <div class="tab-pane active" id="1a">
                    <h3>Question Summary</h3>
                    <div id="container" style="min-width: 250px; height: 400px; margin: 0 auto"></div>
                </div>
                <div class="tab-pane" id="2a">
                    @*<div id="GridChart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>*@
                    <h3>Question Details</h3>
                    <div class="table-responsive">

                        @(Html.Kendo().Grid<Silicus.Ensure.Web.Models.Questionstatistics>().Name("questionList")
                                .Columns(columns =>
                                {
                                    //columns.Bound(q => q.CreatedBy);
                                    columns.Bound(q => q.Technology).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").Template("TechnologyDropDownList").ShowOperators(false))).ClientGroupHeaderTemplate("Technology: #= value #"); 
                                    columns.Bound(q => q.ProficiencyLevel).Title("Status").Width(300).Filterable(ftb => ftb.Cell(cell => cell.Operator("equals").Template("StatusDropDownList").ShowOperators(false)));
                                    columns.Bound(q => q.Count).ClientGroupFooterTemplate("Count: #=sum#");

                                }).Events(events => events
             .DataBound("onDataBound")
        //.Filter("onFiltering")

        ).DataSource(dataSource => dataSource.Ajax()
        .Aggregates(aggregates =>
        {
            aggregates.Add(p => p.Count).Sum();
        })
.Sort(s => s.Add("Count"))
 .Group(groups => groups.Add(p => p.Technology))
   .Read(read => read.Action("GetAllQuestionsStastistics", "QuestionBank"))
   .PageSize(20)

   .ServerOperation(true)
                                            ).Pageable(p => p.PageSizes(true))
                                             .Sortable()

                                             .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                                             .Resizable(resizing => resizing.Columns(true))
                        )

                    </div>
                </div>
            </div>

    </div>
</div>