@model Silicus.Ensure.Web.Models.UserViewModel
@using Silicus.Ensure.Models.Constants;
@using Kendo.Mvc.UI;

@{
    ViewBag.Title = "Roles";
}

<script>
    $(document).ready(function () {
        SetNavigationMenuActive('Candidates');
        $("#FieldFilter").keyup(function () {
            var value = $("#FieldFilter").val();
            grid = $("#userGrids").data("kendoGrid");

            if (value.length > 0) {
                if (value) {
                    var filter = { logic: "or", filters: [] };
                    filter.filters.push({ field: "FirstName", operator: "contains", value: value });
                    filter.filters.push({ field: "RequisitionId", operator: "contains", value: value });
                    filter.filters.push({ field: "ContactNumber", operator: "contains", value: value });
                    //filter.filters.push({ field: "TotalExperienceInYear", operator: "contains", value: value });
                    filter.filters.push({ field: "PanelName", operator: "contains", value: value });
                    grid.dataSource.query({ filter: filter });
                } else {
                    grid.dataSource.filter({});
                }
            }
            else if (value == "")
                grid.dataSource.filter({});
        });
        $("#candidateSearch").click(function (e) {
            e.preventDefault();
            var datasource = $("#userGrids").data("kendoGrid").dataSource;
            //Clear filters:
            datasource.filter([]);
            $("#FieldFilter").val('');
        });

    });
    function showTest(UserId, TestStatus) {
        if (TestStatus == '@TestStatus.NotAssigned.ToString()') {
            $.ajax({
                type: 'post',
                async: false,
                url: "/Admin/CandidatesSuit",
                cache: false,
                data: { UserId: UserId },
                contenttype: "application/json; charset=utf-8",
                success: function (data) {
                    $("#CandidateInfo").html(data);
                    $('#myModal').fadeIn();
                    $('#myModal').modal();
                }
            });
        }
        else {
            alert("Sorry! Cann't perform this operation.");
        }
    }

    function ReAssignPanel(UserId) {
        //if (TestStatus == '@TestStatus.NotAssigned.ToString()') {
        $.ajax({
            type: 'post',
            async: false,
            url: "/Admin/AssignPanel",
            cache: false,
            data: { UserId: UserId, IsReassign: 1 },
            contenttype: "application/json; charset=utf-8",
            success: function (data) {
                $("#PanelInfo").html(data);
                $('#myModal1').fadeIn();
                $('#myModal1').modal();
            }
        });
        //}
    }

    function ReAssign(UserId, TestStatus) {
        if (TestStatus == '@TestStatus.Assigned.ToString()') {
            $.ajax({
                type: 'post',
                async: false,
                url: "/Admin/CandidatesSuit",
                cache: false,
                data: { UserId: UserId, IsReassign: 1 },
                contenttype: "application/json; charset=utf-8",
                success: function (data) {
                    $("#CandidateInfo").html(data);
                    $('#myModal').fadeIn();
                    $('#myModal').modal();
                }
            });
        }
    }


    $(function () {
        $("#Savebtn").bind("click", function () {
            var chkCheck = false;
            $('input:checkbox').each(function () {
                if ($(this).is(':checked')) {
                    chkCheck = true;
                }
            });
            if (chkCheck) {
                var uId = $("#CurrentUser").val();
                var IsReAssign = $("#IsReAssign").val();
                var checkvals = $("[class='check']:checked").attr("value")

                $('#myModal').find('input[type=checkbox]:checked').removeAttr('checked');
                $.ajax({
                    type: 'post',
                    async: false,
                    url: "/Admin/AssignSuite",
                    cache: false,
                    data: { SuiteId: checkvals, UserId: uId, IsReAssign: IsReAssign },
                    contenttype: "application/json; charset=utf-8",
                    success: function (returndata) {
                        if (returndata == 1) {
                            $('#userGrids').data('kendoGrid').dataSource.read();
                            $('#userGrids').data('kendoGrid').refresh();
                            ShowMessage("Test suit assigned successfully.", 1);
                            $('#myModal').fadeOut();
                        }
                    },
                    error: function (er) {

                    }
                });
            }
            else {
                alert('Please select at least one test suit !')
            }
        });

    });

    $(function () {
        $("#SavePanlebtn").bind("click", function () {
            var chkCheck = false;
            $('input:checkbox').each(function () {
                if ($(this).is(':checked')) {
                    chkCheck = true;
                }
            });
            if (chkCheck) {
                var uId = $("#CurrentUser").val();
                var IsReAssign = $("#IsReAssign").val();
                var checkvals = [];
                $('input:checkbox').each(function () {
                    if ($(this).is(':checked')) {
                        checkvals.push($(this).val());
                    }
                });
                JSON.stringify(checkvals);
                //alert(checkvals);
                $.ajax({
                    type: 'post',
                    async: false,
                    url: "/Admin/AssignPanelCandidate",
                    cache: false,
                    data: { PUserId: checkvals, UserId: uId, IsReAssign: IsReAssign },
                    contenttype: "application/json; charset=utf-8",
                    success: function (returndata) {
                        if (returndata == 1) {
                            $('#userGrids').data('kendoGrid').dataSource.read();
                            $('#userGrids').data('kendoGrid').refresh();
                            ShowMessage("Test suit assigned successfully.", 1);
                            $('#myModal1').fadeOut();
                        }
                    },
                    error: function (er) {
                        $('#myModal1').fadeOut();
                    }
                });
            }
            else {
                alert('Please select at least one panel !')
            }
        });

    });

    function Change() {
        var value = $("#CandidateStatus").val();
        grid = $("#userGrids").data("kendoGrid");
        if (value == "All") {
            grid.dataSource.filter([]);
        }
        else {
            grid.dataSource.filter({ field: "CandidateStatus", operator: "eq", value: value });
        }
    }
    function PositionChange() {
        var value = $("#Position").val();
        grid = $("#userGrids").data("kendoGrid");
        if (value == "") {
            grid.dataSource.filter([]);
        }
        else {
            grid.dataSource.filter({ field: "Position", operator: "eq", value: value });
        }
    }

    function AddNew() {
        window.location.href = "/Admin/CandidateAdd?UserId=0";
        return false;
    }

    function deleteUser(userId) {
        if (confirm('Are you sure, do you want to delete user?')) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("DeleteUser", "User")',
                data: { UserId: userId },
                success: function (returndata) {
                    if (returndata == 1) {
                        $('#userGrids').data('kendoGrid').dataSource.read();
                        $('#userGrids').data('kendoGrid').refresh();
                        ShowMessage("User deleted successfully.", 1);
                    }
                    else {
                        ShowMessage("Error occured while delete operation.", 0);
                    }
                }
            });
        }
    }

    function CheckAssign(status, id, TestSuiteId, UserId) {
        if (id == 1) {
            window.location.href = "/Admin/ViewQuestion?UserId=" + UserId + '&TestSuiteId=' + TestSuiteId;
            return false;
        }
        else if (id == 2) {
            window.location.href = "/admin/SubmittedTest?UserId=" + UserId + '&TestSuiteId=' + TestSuiteId;
            return false;
        }
        else {
            alert('Please assign the test suit first');
        }
    }
</script>
<div>

    @if (Request.IsAuthenticated)
    {
        @(Html.Kendo().Grid<Silicus.Ensure.Web.Models.UserViewModel>().Name("userGrids")
         .Columns(columns =>
              {
                  columns.Bound(p => p.FirstName).ClientTemplate("#=FirstName# #=LastName#").Title("Name").Width(150);
                  columns.Bound(p => p.RequisitionId).Title("Requisition Id").Width(150);
                  columns.Bound(p => p.Position).Width(70);
                  columns.Bound(p => p.ContactNumber).Title("Contact Number").Width(80);
                  columns.Bound(p => p.TotalExperienceInYear).ClientTemplate("#=TotalExperienceInYear#.#=TotalExperienceInMonth#").Title("Total Experience").Width(50);
                  columns.Bound(p => p.PanelName).Title("Panel").Width(150);
                  columns.Bound(p => p.CandidateStatus).ClientTemplate(@"
                                                                        #if(CandidateStatus=='TestAssigned'){#
                                                                            Test Assigned
                                                                        #}
                                                                        else if(CandidateStatus=='TestSubmitted') {#
                                                                            Test Submitted
                                                                        #}
                                                                        else if(CandidateStatus=='UnderEvaluation') {#
                                                                            Under Evaluation
                                                                        #}
                                                                        else{#
                                                                            #=CandidateStatus#
                                                                        #}
#").Title("Status").Width(100);
                  columns.Bound(c => c.UserId).ClientTemplate(@"<a class='k-button k-button-icontext k-grid-edit' href='" + Url.Action("CandidateAdd", "Admin") + "?UserId=#=UserId#'><span class='k-icon k-edit'></span>Edit</a><a id='testSuiteDel' class='k-button k-button-icontext k-grid-delete' href='\\#' onclick='return deleteUser(#=UserId#)'><span class='k-icon k-delete'></span>Delete</a>").Title("Action").Width(160).Sortable(false);
                  columns.Bound(c => c.UserId).ClientTemplate(@"

                                         #if(CandidateStatus=='New'){#
                                        <a onclick=showTest('#=UserId#','#=TestStatus#') style='cursor:pointer'>Assign Test</a> |
                                        <a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>Assign Panel</a>
                                        #}
                                        else if(CandidateStatus=='TestAssigned') {#
                                        <a  class ='dialog-window' onclick=ReAssign('#=UserId#','#=TestStatus#') style='cursor:pointer'>Reassign Test</a> |
                                        <a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>Assign Panel</a>
                                        #}
                                        else if(CandidateStatus=='TestSubmitted') {#
                                        <a  class ='dialog-window' onclick=ReAssignPanel('#=UserId#') style='cursor:pointer'>Assign Panel</a> |
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',1,#=TestSuiteId#,'#=UserId#') style='cursor:pointer'>View Test</a>
                                        #}
                                        else if(CandidateStatus=='UnderEvaluation') {#
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',1,#=TestSuiteId#,'#=UserId#') style='cursor:pointer'>View Test</a> |
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',2,#=TestSuiteId#,'#=UserId#') style='cursor:pointer'>Add feedback</a>
                                        #}
                                        else if(CandidateStatus=='Selected'||CandidateStatus=='Rejected') {#
                                        <a  class ='dialog-window' onclick=CheckAssign('#=TestStatus#',1,#=TestSuiteId#,'#=UserId#') style='cursor:pointer'>View Test</a>
                                        #}

                                        #").Title("Actions").Sortable(false);

              })
            .DataSource(dataSource => dataSource
                      .Ajax()
                      .Model(model =>
                      {
                          model.Id(p => p.UserId);
                          model.Field(p => p.UserId).Editable(false);
                      })

                          .Read(read => read.Action("GetCandidateDetails", "User", new { RoleName = RoleName.Candidate.ToString() }))
                          .Create(update => update.Action("CreateUser", "User"))
                          .Update(update => update.Action("UpdateUser", "User"))
                          .Destroy(update => update.Action("DeleteUser", "User"))
                          .PageSize(10)
                     )
                  .Pageable(p => p.PageSizes(true))
                  .Sortable()
                  .Resizable(resizing => resizing.Columns(true))
                  .ToolBar(toolbar =>
                    {
                        toolbar.Template(@<text>
                            <div class="toolbar">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="input-group">
                                            <span class="input-group-addon"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></span>
                                            <input type="text" class="form-control" id='FieldFilter' placeholder="Search...">
                                            <span class="input-group-btn">
                                                <button id="candidateSearch" class="btn btn-default" style="height:16px;" type="button"><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span></button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3" style="float: right; padding-right: 0px; margin-right: -22px;">
                                        <a href='#' onclick='AddNew();' class='k-button k-button-icontext k-grid-add'><span class='k-icon k-add'></span>Add Candidate</a>
                                    </div>
                                </div>
                            </div>
                        </text>);
                    }))
    }

</div>
<div class="modal fade" id="myModal" data-backdrop="static" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Test-Suite List</h4>
            </div>
            <div class="modal-body" id="CandidateInfo">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="Savebtn">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModal1" data-backdrop="static" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Assign Panel List</h4>
            </div>
            <div class="modal-body" id="PanelInfo">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="SavePanlebtn">Save</button>
            </div>
        </div>
    </div>
</div>
